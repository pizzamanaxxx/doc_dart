{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"DART User's Manual (5.9.6)","text":""},{"location":"index.html#1-features","title":"1- Features","text":"<ul> <li>The 3 DART modes and 2 light modes</li> <li>Edition of DART simulations</li> <li>Display and processing tools</li> <li>Format of input/output DART files</li> <li>Work packages</li> </ul>"},{"location":"index.html#2-the-application","title":"2- The Application","text":"<p>DART  simulates passive remote sensing (RS) and LiDAR signals and also the radiative budget (RB) of urban and natural landscapes. It traceslight in landscapes and atmosphere with 2 light-modes. The Forward light-mode voxelizes landscapes and traces light with DOM (discrete ordinate method) or MC (Monte Carlo) methods. The Bi-directional light-mode does not voxelize landscapes and traces light with bi-directional MC methods. DART has 3 modes:</p> <ul> <li>Passive RS and RB: reflectance and brightness temperature images, albedo, SIF (sun induced fluorescence),... This mode is called DART-FT for the DOM Forward light-mode and DART-Lux for the Bi-directional light-mode. </li> <li>LiDAR: waveform, photon counting, point cloud. This mode is called DART-RC for the MC Forward light-mode, and DART-Lux for the Bi-directional light-mode.</li> <li>Monte Carlo: reflectance of landscapes without atmosphere. It uses very basic MC methods and is rarely used.</li> </ul>"},{"location":"index.html#3-structure-of-the-documentation","title":"3- Structure of the documentation","text":"<p>DART (Discrete Anisotropic Radiative Transfer) models radiative transfer (RT) from the ultraviolet to the thermal infrared, for simulating the radiation budget (RB), including sun-induced chlorophyll fluorescence (SIF), and remote sensing (RS) signals (Lidar, spectro-radiometer images) of natural and urban surfaces (i.e., Earth scenes) with atmosphere. This document1 explains DART functionalities and how to use them:</p> <ul> <li>Chapter 1: Overview of major RT models, and DART, for studying land surfaces with remote sensing.</li> <li>Chapter 2: DART functionalities (scene creation, sensor configuration,...) from the Graphic User Interface (GUI).</li> <li>Chapter 3: Tools for managing DART and its results, with and without the GUI.</li> <li>Chapter 4: Format of most DART inputs and outputs.</li> <li>Chapter 5: Advices you can read in order to have a better usage of DART.</li> <li>Chapter 6: List of physical concepts or measures mainly used in DART.</li> <li>Chapter 7: Formerly named Work Packages, they are Tutorials (WP0 : overview, WP1: reflectance, WP2: thermal emission,.. ) to practice DART and better understand the physics of RS . Their simulations are in the DART web site. Beginners should start with WPs 1 and 2.</li> </ul> <ol> <li> <p>Regularly updated. In addition, the \"DART Handbook\" presents some physics of DART RT modeling\u00a0\u21a9</p> </li> </ol>"},{"location":"Annexes/Annex1/annex1.html","title":"Annex 1: DART Python modules / scripts","text":"<p>Python modules are provided in folder <code>DART\\bin\\python_script</code> (see below), with usage in their code or Readme files.</p> <p><p>Python modules. Modules with label * are directly run from DART GUI. They are not described here.</p></p> <p>DART GUI with menu \"Tools/Python Script Launcher' (i.e., python_script_runner.bat;image below) cn launch most Python modules. For that, select the module to run and set input parameters (i.e., folders, file names, options).</p> <p><p>Python_script_runner.bat.</p></p>"},{"location":"Annexes/Annex1/annex1.html#a-inversion-of-in-situ-irradiance-in-terms-of-aerosol-and-cloud-parameters","title":"a) Inversion of in-situ irradiance in terms of aerosol and cloud parameters","text":"<p>Goal: to get a time series of aerosol and cloud parameters \\(k_a\\) and \\(k_c\\) so that DART BOA irradiance \\(E_{BOA,tot,\\Delta \\lambda}^{DART}(t) \\:\\:(W/m^2)\\) or \\(SKYL_{BOA,tot,\\Delta \\lambda}^{DART}(t)\\) matches measured \\(E_{BOA,tot,\\Delta \\lambda}^{measured}(t)\\) or \\(SKYL_{BOA,tot,\\Delta \\lambda}^{measured}(t)\\), with \\(k_a(t).\\Delta \\tau_{a,\\lambda}\\) and \\(k_c(t).\\Delta \\tau_{c,\\lambda}\\) the aerosol and cloud optical depths (\\(\\Delta \\tau_{a,\\lambda}\\) and \\(\\Delta \\lambda_{c,\\lambda}\\) are the aerosol and cloud spectral optical depths defined in the simulation).</p> <p>Method:</p> <ul> <li>bi-section algorithm: DART iterative run per date t until DART matches measurements. \\(k_a\\) is first searched in \\([0;\\: k_{a,max}]\\) with \\(k_c = 0\\); if \\(k_a\\) is not found, there may be a cloud, and DART is iteratively run with (\\(k_{a,init},k_c\\) variable) starting from (\\(k_{a,init},k_{c,init}\\)) to get \\(k_c(t)\\); \\(k_a\\) or \\(k_c = -9999\\) if there is no solution. \\(k_c = 0\\) if \\(k_{c,init} =0\\). It treats the \\(1^{st}\\) aerosol and \\(1^{st}\\) aerosol-cloud if there is an aerosol-cloud model; \\(1^{st}\\) and \\(2^{nd}\\) aerosol otherwise.</li> </ul> <p>Note</p> <p>If \"Coupling Gain\" (i.e., \\(\\frac {E_{BOA,tot,\\Delta \\lambda}^{after\\:coupling}} {E_{BOA,tot,\\Delta \\lambda}^{before\\:coupling}}\\) in the \\(E_{BOA,tot,\\Delta \\lambda}^{measured}(t)\\) file)=1, \\(E_{BOA,tot,\\Delta \\lambda}^{after\\:coupling}\\) is adjusted to \\(E_{BOA,tot,\\Delta \\lambda}^{measured}(t)\\), using DART computer intensive \"atmosphere coupling\" option; else, since Coupling Gain is usually slightly larger than 1, \\(E_{BOA,tot,\\Delta \\lambda}^{before\\:coupling}\\) is adjusted to \\(\\frac {E_{BOA,tot,\\Delta \\lambda}^{measured}} {Coupling\\:\\:Gain}\\), using DART with the \"No Coupling\" option.</p> <ul> <li>DART simulation (example): 1mx1m bare ground with reflectance close to the actual reflectance of the scene, \\(N_{bands}\\) (\\(E_{BOA,\\Delta \\lambda}^{.DART}\\) accuracy and computation time increase with \\(N_{bands}\\)), \\(N_{aerosol/cloud} \\ge 2\\) (prefix 'cloud' in the 'aerosol optical properties' file name indicates an 'aerosol-cloud').</li> </ul> <p>Note</p> <p>No need to simulate DART products because the method uses \\(E_{BOA,\\lambda}^{DART}(t)\\) stored in <code>simulation.properties.txt</code>.</p> <p>Parameters: </p> <ul> <li>Folder of DART simulation (see previous image)</li> <li>Irradiance text file \\(\\mathcal{I}\\).txt. Per line/time: \\(E_{BOA,tot,\\Delta \\lambda}^{measured}, E_{BOA,diff,\\Delta \\lambda}^{measured}\\) Year Month Day Hour Min. Sec. Coupling_Gain</li> </ul> <p>Note</p> <p>If \\(\\mathcal{I}\\) has too many data, you can create a new \\(\\mathcal{I}\\) {set of Mean(N successive data)} with {average_time_series.py, parameter N}.</p> <ul> <li>Optional: <ul> <li>i \\(k_a;k_c\\) : aerosol &amp; cloud initial multiplicative factors; default: \\(k_{a,init}(t)\\) &amp; \\(k_{c,init}(t)\\) in DART simulation</li> <li>t start time; end time: inversion over \\([t_{start};\\: t_{end}]\\). Default: [0000 0 0 0 0 0 9999 0 0 0 0].</li> <li>m \\(Iteration_{max}\\): maximal number of iterations. Default: 20.</li> <li>s \\(k_{a,max}\\) : maximal aerosol optical depth. Default: 2.</li> <li>e \\(\\epsilon_1\\) : maximal relative error \\(\\frac {|E_{BOA,\\Delta \\lambda}^{DART}(t) - E_{BOA,\\Delta \\lambda}^{measured}(t)|} {E_{BOA,\\Delta \\lambda}^{measured}(t)}\\). Default: 0.05.</li> <li>ee \\(\\epsilon_2\\): maximal relative error if upper ki was found. Default: 0.</li> <li>eee \\(\\epsilon_{SKYL}\\): SKYL adjustement if \\(SKYL_{measured} \\in ]0;\\: \\epsilon_{SKYL}[\\). Else \\(E_{tot}\\) adjustment. Default: 0.1.</li> </ul> </li> </ul> <p>Result: anywhere (option \u2013d); default: <code>simulation_name.result.txt</code> in folder of the python module. It stores per line:</p> <p>\\(\\frac {E_{BOA,tot,\\Delta \\lambda}^{measured}} {Coupling\\:\\:Gain}.E_{BOA,diff,\\Delta \\lambda}^{measured} - E_{BOA,tot,\\Delta \\lambda}^{measured}.\\frac {coupling\\:\\:Gain\\:-1} {coupling\\:\\:gain}\\) Year Month Day Hour Min Sec \\(k_a \\in [0; preset\\:k_{a,max}]\\:k_c \\ge 0\\) \\(E_{BOA,\\Delta \\lambda}^{DART}.E_{BOA,diff,\\Delta \\lambda}^{DART}.\\frac {E_{BOA,\\Delta \\lambda}^{DART}} {E_{BOA,tot,\\Delta \\lambda}^{measured}}\\)</p> <p><p><code>Python_script_runner.bat</code>. Here, it runs the script <code>cloud_aod_factor_inversion.py</code> with DART simulation <code>Aerosol_Cloud_OpticalDepth</code> and irradiance file <code>cloud_aod_inversion_irradiance_example.txt</code> \\(E_{BOA, \\Delta \\lambda}^{measured}(t)\\)</p></p> <p>Example:</p> <ul> <li>Simulation <code>Aerosol_Cloud_OpticalDepth</code>: 10 bands, [250nm 2750nm]. z=149m, 35.18\u00b0E, 9.54\u00b0N. Atmosphere: USSTD76, Rural23, \\(k_{H_2O} =0.3\\). No coupling.</li> <li>\\(E_{BOA,\\Delta \\lambda}^{measured}\\): file <code>cloud_aod_inversion_Irradiance_example.txt</code>: \\(\\Delta t=30mn\\), 23-24/06/2014, Coupling_Gain=1.02. The image below shows that Coupling_Gain \\(\\approx\\) cst over a day with constant atmosphere conditions.</li> <li>Inversion done with a relative error error \\(\\epsilon=0.01\\) (option \u2013e 0.01). It is much slower than if \\(\\epsilon=0.05\\).</li> </ul> <p></p> <p>Hourly \\(E_{BOA}\\) before coupling (BC) and after coupling (AC) from morning to evening, for 3 atmosphere conditions: \\((k_a,k_c)\\) = (1,0), (4,0), (4,0.3). The associated gains \\(\\frac {E_{BOA,AC}} {E_{BOA,BC}}\\) are nearly constant during the day with relatively low values: 1.017, 1.025, and 1.062. It explains that the ionversion is made with a gain equal to 1.02, and therefore without the \"Atmosphere radiative coupling\".</p> <p>The retrieved atmosphere parameters \\(k_a(t)\\) and \\(k_c(t)\\) lead to \\(E_{BOA,tot,\\Delta \\lambda}^{measured}(t) \\approx E_{BOA,tot,\\Delta \\lambda}^{DART}(t)\\) (see below). A few abrupt \\(k_a\\) changes occur early and late in the day with low irradiance values. They can be explained by experimental factors such as the time accuracy of measurements. \\(k_a\\) changes during the day are probably due to cloud sudden occurrence. Basic knowledge of atmosphere conditions is useful to imptove results, for instance to pre-set a smaller range of \\(k_a\\).</p> <p><p>\\(E_{BOA,tot,\\Delta \\lambda}^{measured}(t)\\) and \\(E_{BOA,tot,\\Delta \\lambda}^{DART}(t)\\). Nasrallah, Tunisia on 23-24/06/2014. The inversion is done with \\(\\epsilon=0.01\\) (option \u2013e 0.01). It is much faster if \\(\\epsilon=0.05\\) ( ' instead of 90').</p></p> <p>Note</p> <p>Erroneous results may indicate: - Incorrect DART parameters: atmosphere (aerosol optical depth, water vapor content,\u2026) and/or site coordinates. - Incorrect time of measurements (e.g., in case of an integration time \\(\\Delta t\\), time should correspond to \\(\\Delta t/2\\)).</p>"},{"location":"Annexes/Annex1/annex1.html#b-satellite-image-inversion-urban-material-reflectance-op_inversionpy","title":"b) Satellite image inversion (urban material reflectance): op_inversion.py","text":"<p>Goal. To invert a satellite image \\(S_{\\lambda}(u,v)\\) of a city as reflectance maps \\(F_{i,\\lambda}(u,v).\\rho_i,\\lambda\\) at \\(\\Delta r_{sat}\\), per chosen urban optical property \\(OP_i\\) (material), using an urban geometric database. \\(\\rho_{i,\\lambda} =\\) DART simulation initial \\(OP_i\\). In short, \\(F_{i,\\lambda}(u,v)\\) is assessed. It is noted \\(k_{i,\\lambda}(x,y)\\) at \\(\\Delta r_{DART}\\). </p> <p>Geometric database. basel river extracted.obj (10km x 11km. 6 groups i: DEM, roof,\u2026). </p> <p>Sentinel 2 satellite image \\(S_{\\lambda}(u,v)\\): <code>sat.mp#</code> of Basel : 7km x 6.5km. \\(0.49\\mu m, 0.56\\mu m, 0.665\\mu m\\). </p> <p>Per band inversion method. First, put \\(S_{\\lambda}(u,v)\\) in <code>workspace_name/iter1/input/bandx</code> (x=1: \\(0.49\\mu m\\), 2: \\(0.56\\mu m, 3: 0.665\\mu m\\)), and set DART to create images per type of scene element and to use factors \\(k_{i,\\lambda,n}(x,y)\\). DART is run n times. A \\(1^{st}\\) scattering order equation assesses \\(k_{i,\\lambda,n}(x,y)\\) at n=1, and a bisection / Newton method up-dates it at n&gt;1; the workspace stores it \\(\\forall n\\).</p> <p>DART simulation.</p> <ol> <li>Basel 05082015.20m.3bands : 5060mx5320mx160m, \\(\\Delta x=\\Delta z=20m\\). Tree file trees <code>updated*.txt</code> &amp; basel river extracted.obj; consistent coordinates) + workspace basel.</li> <li>Basel 05082015.20m.3bands SubZone (: 438mx417mx92.5m, \\(\\Delta x=\\Delta z=0.5m\\), <code>dsm.obj</code> created by \"tools\" ; (103, 88) - (120, 105) in satellite image) + workspace_sub_zone1. </li> </ol> <p>Warning</p> <p>In the \"Optical and temperatures\" menu, set \"\", with default multiplicative factors equal to 1, and . The inversion procedure automatically sets the option .</p> <p>Start. Run op_inversion.bat in <code>DART\\bin\\python_script\\OpticalPropertiesInversion</code> to run the GUI and specify input / output data (see below) in its 4 tabs (cf. below).</p> <p>Settings. An existing workspace () or data (: DART home, working simulation, DART &amp; satellite images; option: tree text file name, satellite image sub-zone coordinates) to create it are specified. File <code>.settings</code> stores it.</p> <p>Note</p> <p>In order to create a new inversion, first create an empty \"workspace\" folder using Windows or Unix, and then click on the \u201cSelect\u201d button to choose it. Do not forget to click on \u201cCreate\u201d button after selecting the simulation.</p> <p><p>Tab \"Settings\". Workspace name () and data to create it if it does not exist (): names of DART simulation, satellite image, and tree text file, and sub-zone coordinates in the satellite image if needed.</p></p> <p><p>Reflectance images of a sub-zone (workspace_sub_zone1) at iteration n=3. a) Satellite: \\(\\Delta r=25m\\). b) DART: \\(\\Delta r=25m\\). c) DART: \\(\\Delta r=0.5m\\); 25m resolution \\(F_{\\lambda,i}(u,v)\\) impacts it. Border effects  (i.e., larger errors) occur at bottom left &amp; right corners since the scene and DEM are not symmetric. d) 3D view of errors: \\(\\Delta r=1m\\).</p></p> <p>Process. DART simulation must be previously run, because the inversion procedure does not run it. Three tabs () allow one to run a given iteration (), all up to a given iteration () or to continue up to a given iteration (). At any iteration n, new maps Fm,x,n(u,v) per selected band x () and OP m (; other OPs are constant) are derived from the comparison of satellite and DART images. They are stored in folder <code>Workspace/itern/output/bandx</code>. At iteration n+1, they are copied in DART input/bandx folder, and DART is run with \"new OP = initial OP x \\(F_{m,x,n}(u,v)\\)\". At iteration n=0, \\(F_{m,x,n}(u,v)=1 \\forall u,v\\) (i.e., DART option \"Use an array of multiplicative factors\" is automatically unset).</p> <p>The procedure works with any user-selected numbers () of iterations, and threads for the inversion (auto: available computer cores) and for DART (auto: number of cores set in DART). Three accuracy thresholds () can be used per pixel (u,v): (1) a surface element with relative contribution &lt; threshold is neglected. (2) At iteration 1, a pixel inversion result is accepted only if \\(F_{m,x,1}(u,v)\\) &lt; predefined Max{\\(F_{m,x,1}(u,v)\\)}. (3) At iteration n &gt;1, a pixel is not treated if its relative error is smaller than a threshold.</p> <p>Spatial interpolations () \"DART \\(\\rightarrow\\) Satellite\" and \"Satellite \\(\\rightarrow\\) DART\" are used since pixel sizes of DART and satellite images usually differ. Nearest neighbor method (index 0 of \"Spline int\u2026\") is usually optimal.</p> <p><p>Tab \"Process\": operation mode (), spectral bands to process (), optical properties to invert (), computer threads and iteration number (), accuracy level (), and spatial interpolation mode ().</p></p> <p>Note</p> <p>The optical properties of elements that are not selected keep their initial value during the inversion procedure.</p> <p>View. Data (: error estimates, images,\u2026) are viewed per iteration () and band (), per type of product ():</p> <ul> <li>in: the DART image and the scene component images (e.g., River).</li> <li>out: maps of multiplicative factors. DART uses them for simulating images (in) t the following iteration.</li> </ul> <p>The workspace stores all products: satellite image, DART images at full or satellite image size, the absolute difference image \"Satellite - DART\", and the DART image and image difference histograms.</p> <p><p>Tab \"View\": satellite image and results (: Images / Histograms / Errors) per iteration (), per band () and per DART output (). Options \"Equalize\" and \"Clip\" () are for improving the visual aspect of images.</p></p> <p>Tools.</p> <ul> <li>Option <code>Match Obj/Trees/subzone to satellite image</code> (): to superimpose the 3D object and/or tree file to the satellite image. The help menu (key h) indicates all possible options.</li> <li>Options <code>Apply to Obj</code> and <code>Apply to tree file</code> (): to copy the 3D object geometric transformations in the 3D object \"Geometric properties\" section of the DART simulation, and/or create a new tree text file that should be specified for the DART simulation. Note that an 'Untransformed tree text file' can be used.</li> </ul> <p><p>Tab tools. It is used to match the 3D object and the tree file to the satellite image. The left panel displays the geometric coordinates. It can be used also to define a sub zone (shortcut \"R\").</p></p> <p>A satellite image sub-zone can be defined: strike key r and draw a rectangular sub-zone. Its coordinates in DART and satellite images appear on the screen (). To run the inversion procedure for this sub-zone, input these DART coordinates into the sub-scene definition of a new DART simulation and input these satellite image coordinates into the Tab \"Setting\" of a new workspace.</p> <p><p>Selection of sub-zone  in Sentinel 2 image and 'dsm.obj'.</p></p> <p>Simulation 'Basel_05082015.20m.3bands_SubZone' uses the sub-zone 3D object \"dsm.obj\" (DART \"maket\" module can create it) because loading it is faster than loading <code>basel_river_extracted.obj</code>.</p> <p><p>Algorithm of the inversion method. It relies on the iterative calculation of DART radiance images per type of element that is present in the urban landscape.</p></p> <p><p>Results of workspace_basel. a) Sentinel 2 image (2015/8/5) and DART images at iterations n=0, 1 and 8. At n=0, OP is unique for urban elements of the same type (e.g., roofs). b) Relative error decreases with n (n=0: 70%, n=1: 13%, n=2: 3.3%, n=3: 1.4%, n=5: 1%,...). c) Larger errors occur for pixels with \\(\\rho_{satellite} &gt; 1\\).</p></p> <p>Note</p> <p>Apart from creating scene using obj file, scene can also be created using DART elements. For per element, only one optical property can be assigned.</p> <p>The image below indicates the types of DART elements that can be considered for the inversion. Note that only one optical property must be assigned pet type of element. For example, an unique optical property for all houses. The sopatial multiplicative factor allows one to have spatially variable optical properties for the roofs.</p> <p><p>Types of DART elements that can be considered for the inversion. Note er optical property for each element. For example, please do not assign different optical property to different houses.</p></p> <p>On-going work: accelerate DART simulations with new DART fast mode and decrease RAM with tree cloning.</p>"},{"location":"Annexes/Annex1/annex1.html#c-mapping-an-area-with-agricultural-fields-multi_field_generatorpy","title":"c) Mapping an area with agricultural fields: multi_field_generator.py","text":"<p>Objective: manual creation of a field crop area. Any other scene element can be added.</p> <p>Method: interactive definition of field vertices, and field (: vertices, row orientation, distance between plants,\u2026) and 3D plant (: rotation, scale,\u2026) parameter per field, possibly with an underlying image () of the study area. The resulting field_map.txt file () can be saved and later edited. Copy and paste is possible on any field. The command \" Write DART field.txt\" creates the DART field.txt. A help (: ?) is provided.</p> <p>Example of DART simulation: CropFieldCreation</p> <p><p>a) DART-Lux image of the scene simulated with the field.txt file () created by the Python module <code>DART\\bin\\python_script\\CropFieldCreation\\multi_field_generator.py</code>. Border effects at the top correspond to grapevines at the bottom that are only partly in the scene. The latter ones should be removed in the <code>field.txt</code> file in order to reove the border effects. b) Zoom of DART-Lux image at 2cm resolution.</p></p>"},{"location":"Annexes/Annex1/annex1.html#d-change-the-size-of-all-or-part-of-3d-objects-changeobjsize_py","title":"d) Change the size of all or part of 3D objects: changeObjSize_***.py","text":"<p>Objective: to scale all or part of the triangles of an input 3D object. The output 3D object is identical to the input 3D object except that its triangles are scaled. The output 3D object appears with the same colors as the input 3D object if the mtl file of the input object is in the folder of the output object.</p> <p>2 scripts:</p> <ul> <li>changeObjLeavesSize_multiple_barycenters_groups.py: triangles of a specified group are scaled and each barycenter (center of gravity) of connected triangles of the group is preserved. The image below illustrates the scaling of the corncob of a maize 3D object.</li> <li>changeObjSize_unique_barycenter.py: all triangles are scaled, and the barycenter of all the connected triangles is preserved.</li> </ul> <p>Note</p> <p>Triangles must be logically order in the input <code>*.obj</code> file.</p> <p><p>Run of <code>changeObjLeavesSize_multiple_barycenters_groups.py</code> with <code>python_script_runner.bat</code></p></p>"},{"location":"Annexes/Annex1/annex1.html#e-dart-dao-to-create-a-scene-from-a-lai-array-dartbinpython_scriptdao","title":"e) DART DAO: to create a scene from a LAI array (DART\\bin\\python_script\\DAO)","text":"<p>Objective: to create a DART DAO turbid scene, and to derive DAO and non DAO triangle scenes for DART-FT and Lux</p> <ul> <li>1) Copy the empty file dao.nfm in the DART folder. Then, DAO python scripts, for example run with , create DAO turbid and triangle scenes in the folder \"output/Scene\".</li> </ul> <p>Warning</p> <p>The DAO replaces the maket module, so that running this module will destroy the scene generated by the DAO. </p> <ul> <li> <p>2) Create the simulation 'Turb': 3m x 3m scene, 1m x 1m cells, 90 bands \\(\\in\\) [400;850nm], DSM, 1 Lambertian optical property \\(\\rho_{ground}\\) = 'clay brown', 1 Vegetation optical property: default SIF parameters and leaf biochemistry / structure.</p> </li> <li> <p>3) Run the Maket module. It generates a DAO scene with expected scene and cell dimensions.</p> </li> <li> <p>4)  Create the DAO 3D turbid scene. 2 methods are proposed: </p> <ul> <li>3D LAI array importation (here: <code>LAI_Array.txt</code>: scene layers from top to bottom separated by \"***\") Usage: <code>Create_TurbidScene_From_LAI_Array.py SimulationName LAI_Array_name</code></li> <li>Creation of a random LAI distribution (here: \\(LAI_{cell} \\in\\) [0 1) Usage: <code>Create_TurbidScene_Random.py SimulationName</code></li> </ul> </li> <li> <p>5) Create the DAO 3D triangle scene from the DAO 3D turbid scene, with \\(5\\times 10^{-3}\\) accuracy per \\(LAI_{cell}\\).</p> <ul> <li>Save 'Turb' as simulation 'Tri' and copy the folder 'Turb\\output' into 'Tri' where you remove the Vegetation optical property and add a Lambertian optical property (it must be the same as 'Turb' vegetation optical property if 'Tri' and 'Turb' results are to be compared). Then run the \"direction\" and \"phase\" modules (not the maket module!).</li> <li>Conversion of the turbid LAI cells as cells filled with triangles Usage: <code>Turbid_To_Triangles.py SimulationName triangle_cells</code> 'triangle_cells': this folder stores N random samples of M objects that simulate a turbid cell (here: \\(LAI_m\\) 3D object = 0.01, 0.02, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 1) with triangles (area \\(A_{triangle} = 5\\times 10^{-5}m^2\\)). The conversion rule is: \"triangle cell\" </li> <li>Scene \\(LAI_{cell} &lt; 0.5\\): the turbid medium is replaced by 2 triangles cells at most:<ul> <li>\\(1^{st}\\) triangle cell: it can be only enlarged, by 5% at most (if expected scaling &gt; 5% \\(\\implies\\) 2nd cell).</li> <li>\\(2^{nd}\\) triangle cell: it can be enlarged or shrunk.</li> </ul> </li> <li>Scene \\(LAI_{cell} &gt; 0.5\\): the turbid medium is replaced by 3 triangles cells at most:<ul> <li>\\(1^{st}\\) triangle cell: it cannot be scaled (if precision &gt; \\(5\\times 10^{-3} \\implies 2^{nd}\\) cell).</li> <li>\\(2^{nd}\\) triangle cell: it can be only enlarged, by 5% at most (if expected scaling &gt; 5% \\(\\implies\\) 3rd cell).</li> <li>\\(3^{rd}\\) triangle cell: it can be enlarged or shrunk.  Examples: - LAIcell = 0.23 (\u2248 0.2 + 0.02 x 1.22472) \u21d2 2 triangle cells: LAIn = 0.2 and LAIn = 0.02 scaled by 1.2247. \"triangle cells\"</li> </ul> </li> <li>\\(LAI_{cell}\\) = 0.48 (\\(\\approx\\) 0.4 + 0.1 x 0.89442) \\(\\implies\\) 2 triangle cells: \\(LAI_n = 0.4\\) and \\(LAI_n = 0.1\\) shrunk by 0.8944.</li> <li>\\(LAI_{cell}= 0.64\\) (\\(\\approx\\) 0.5 + 0.1 + 0.05 x0.8944) \\(\\implies\\) 3 cells: \\(LAI_n= 0.5, LAI_n= 0.1, LAI_n= 0.05\\) shrunk by 0.8944.</li> <li>\\(LAI_{cell} = 0.93\\) (\\(\\approx\\) 0.5 + 0.4 x 1.03682) \\(\\implies\\) 2 triangle cells: \\(LAI_n = 0.5\\) and \\(LAI_n = 0.4\\) scaled by 1.0368.</li> </ul> </li> <li> <p>6) DART-FT sequence \\((\\theta_s=30\u00b0 / 60\u00b0; \\phi_s=225\u00b0)\\); do not run the Maket module: DAO turbid &amp; triangle scenes. \\(\\rho_{scene}\\) , \\(\\rho_{PSI}\\) and \\(\\rho_{PSII}\\) depend on \\(\\theta_{sun}\\). \\(\\rho_{PSx,turbid}\\) and \\(\\rho_{PSx,facet}\\) are very close (see below).\\(\\rho_{scene,turbid}\\) and \\(\\rho_{scene,facet differ}\\). Differences decrease with smaller \\(A_{triangle}\\) (\\(\\implies\\) triangle cell \\(\\implies\\) turbid cell) and high spatial resolution DEM.</p> </li> <li> <p>7) DART-FT / Lux sequence (\\(\\theta_s=30\u00b0 / 60\u00b0; \\phi_s=225\u00b0)\\): save 'Tri' as 'Tri_no_DAO'. Then, remove the DAO scene and add a field of 3D objects created with: <code>Turbid_To_Triangles_Field.py Turb path_to_store_field.txt path_to_store_DSM.obj</code> <code>Field.txt</code> is such that you import 3 LAI objects, among 10 objects, per LAI value in folder \"cellules_triangle\", per LAI ascending order. Advice: in the LUT of DART-Lux, only store results for the nadir direction.</p> </li> </ul> <p><p>Total, PS1 and PS2 reflectance of the turbid scene and its associated triangle scene. \\(\\theta_s=30\u00b0\\) and 60\u00b0.</p></p> <p>Note</p> <p>DAO is being adapted to create scenes that are adapted to DART-Lux, in order to reduce computer time and RAM.</p>"},{"location":"Annexes/Annex2/annex2.html","title":"Annex 2: DART Albedo and Ortho images","text":"<p>DART has several albedo products per scene mode (Repetitive scene, Infinite slope, Isolated scene: here, see part 3 of this page). Their meanings differ:</p> <p></p> <ul> <li> <p>\\(A_{dart} = \\frac {\\sum_{2\\pi^{+}} \\bar{L}_{ij, \\Omega_v}.cos(\\theta_v).\\Delta \\Omega_v} {E_{BOA}} = \\frac {M_{BOA}} {E_{BOA}}\\); \\(\\overline{L}_{ij,\\Omega_v} = \\frac {\\bar{W}_{ij}(\\Omega_v, \\Delta \\Omega_v)} {S.cos(\\theta_v,\\Delta \\Omega_v)}\\), ij = sensor image coordinates, \\(\\overline{W}_{ij}(\\Omega_v, \\Delta \\Omega_v)=\\) spatial mean of DART source vectors, \\(S=S_{scene}\\) if \"Repetitive scene\"; else \\(S=S_{slope}.\\frac {|\\bar{\\Omega_p}.\\bar{\\Omega_v}|} {cos(\\theta_v)}. A_{dart}\\) is computed without ortho-projection procedure. It is stored in <code>dart.txt</code> and <code>simulation.properties.txt</code>.</p> </li> <li> <p>Radiance based albedo per DSM pixel: \\(A_{xy}^{proj} = \\frac {M_{\\Delta \\lambda}^{proj} = \\sum_v L_{xy,\\bar{\\Omega}_v}^{proj}.|\\bar{\\Omega}_p.\\bar{\\Omega}_v|.\\Delta \\Omega_v\\:with\\:\\bar{\\Omega}_p \\in 2\\pi^{+} (horizontal\\:sensor);\\:L_{xy,\\bar{\\Omega}_v}^{proj} = 0\\:if\\: \\bar{\\Omega}_p.\\bar{\\Omega}_v &lt; 0} {E_{top,hor}^{\\downarrow}:irradiance\\:of\\:top\\:scene\\:(downward\\:rays)}\\) Ortho radiance images \\(L_{xy,\\Omega_v}^{proj}\\) are interpolated \\(L_{ij,\\Omega_v}\\) sensor radiance images (stored or not) with projection method 'proj' : EC, IS (\\(L_{xy}^{IS} =L_{ij,\\Omega_v}.\\delta_{ij}\\)), RC; they greatly differ. IS represents actual ortho-rectification. Partial pixel filling of edges of images can impact \\(L_{ij,\\Omega_v}\\) images and therefore \\(L_{xy,\\Omega_v}^{proj}\\) and \\(A_{xy}^{proj}\\). Usually: \\(\\overline{A}_{xy}^{EC} &gt; A_{dart} &gt; \\overline{A}_{xy}^{IS}\\). For perfectly smooth slopes: \\(A_{dart} = \\overline{A}_{xy}^{IS}\\).</p> </li> <li> <p>RB-based \"albedo per scene column xy\": \\(A_{xy}^{RB1} = \\frac {\\sum_z \\:Absorbed\\:radiation(x,y)} {\\sum_z 1^{st}\\:order\\:intercepted\\:(x,y,z);\\:folder\\:RB\\:ILLUDIF\\:(sum+atm.)}\\) with rays \\(\\uparrow\\) and \\(\\downarrow\\). Only computed if user-RB components include 'Interception' and 'Absorption'.</p> </li> </ul> <p>Warning</p> <p>No coupling and radiation from (x',y').</p> <ul> <li>RB-based \"top scene albedo\": \\(A_{xy}^{RB2} = \\frac {M_{\\Delta \\lambda,xy}^{\\uparrow}\\:of\\:top\\:face\\:per\\:top\\:scene\\:cell} {E_{top,hor}^{\\downarrow}: top\\:scene\\:irradiance\\:(rays \\downarrow)}\\). Tool <code>3D RB Extractor</code> gives \\(E_{top,hor}^{\\downarrow}\\) and \\(M_{\\Delta \\lambda,xy}^{\\uparrow}\\).</li> </ul> <p>\\(A_{x,y}^{RB2}\\) is the actual scene albedo. Scattered rays are only upward in \\(A_{x,y}^{proj}\\) and \\(A_{x,y}^{RB2}\\), conversely to \\(A_{x,y}^{RB1}\\). For a pure infinite slope (no 3D element): \\(\\overline{A}_{x,y}^{RB2} = \\overline{A}_{x,y}^{IS} = A_{dart}\\), with \\(\\overline{A}_{x,y}^{RB2} \\neq \\overline{A}_{x,y}^{IS}\\) and \\(\\overline{A}_{x,y}^{IS} \\approx\\) local in-situ albedo (horizontal sensors).</p>"},{"location":"Annexes/Annex2/annex2.html#1-homogeneous-smooth-infinite-slope","title":"1) Homogeneous smooth infinite slope","text":"<p>\\((\\Omega_p, \\rho_p,\\Omega_s \\rightarrow \\Omega_v\\)) and direct sun (SKYL=0)</p> <p>Slope : Irradiance in \\(\\Delta \\Omega^{\\downarrow} = 2\\pi - \\theta_p (\\iff \\overline{\\Omega}_p.\\overline{\\Omega}' &lt; 0)\\). Exitance \\(M_{p,x',y'}^{\\uparrow}\\). Upward exitance \\(M_{p,x',y'}^{\\uparrow}\\) in \\(\\Delta \\Omega^{\\uparrow} = 2\\pi - \\theta_p (\\iff \\overline{\\Omega}_p.\\overline{\\Omega}' &gt; 0)\\).</p> <p>\\(E_p = E_s.|\\overline{\\Omega}_p.\\overline{\\Omega}_s| + \\int_{\\Delta \\Omega^{\\downarrow}} L_{atm,\\Omega}.|\\overline{\\Omega}_p.\\overline{\\Omega}|.d\\Omega\\) \\(\\implies L_{p,x',y',\\Omega_v} = \\int_{\\Delta \\Omega^{\\downarrow}} \\frac {\\rho_{p,x',y',\\Omega_s \\rightarrow \\Omega_v}} {\\pi}.E_p(\\Omega_s).d\\Omega_s\\)</p> <p>\\(M_{p,x',y'} = \\int_{2\\pi} L_{p,x',y',\\Omega_v}.|\\overline{\\Omega}_p.\\overline{\\Omega}_v|.d\\Omega_v &gt; M_{p,x',y'}^{\\uparrow} = \\int_{\\Delta \\Omega^{\\uparrow}} L_{p,x',y',\\Omega_v}.|\\overline{\\Omega}_p.\\overline{\\Omega}_v|.d\\Omega_v\\)</p> <p></p> <p>Sensor: Radiance \\(L_{i,j,\\Omega_v}^{dart} = L_{p,x',y',\\Omega_v}\\). Reflectance \\(\\rho_{i,j,\\Omega_v}^{dart}= \\frac {\\pi.L_{i,j,\\Omega_v}^{dart}} {E_{BOA}} = \\frac {\\int_{\\Delta \\Omega^{\\downarrow}} \\rho_{p,x',y'}(\\Omega',\\Omega_v).E_p(\\Omega').d\\Omega'} {E_{BOA}}\\)</p> <ul> <li>Lambertian slope + isotropic SKYL: <ul> <li>\\(\\rho = \\rho_p.[(1 - SKYL).\\xi_{ps} + SKYL.\\frac {1 + cos(\\theta_p)} {2}]\\), with \\(\\xi_{ps} = \\frac {|\\overline{\\Omega}_p.\\overline{\\Omega}_s|} {|\\overline{\\Omega}_n.\\overline{\\Omega}_s|} \\forall \\Omega_v\\)</li> <li>\\(A = \\rho_p.[(1 - SKYL).\\xi_{ps} + SKYL.\\frac {1 + cos(\\theta_p)} {2}].\\frac {1 + cos(\\theta_p)} {2}\\)</li> </ul> </li> </ul> <p>DART ortho-radiance \\(L_{xy,\\Omega_v}^{proj}\\), ortho-reflectance \\(\\rho_{xy,\\Omega_v}^{proj}\\), exitance \\(M_{xy}^{proj}\\) and albedo \\(A_{xy}^{proj}\\) images</p> <p>\\(M_{xy}^{proj} = \\int_{2\\pi^{+}} L_{xy,\\Omega_v}^{proj}.cos(\\theta_v).d\\Omega_v, A_{xy}^{proj} = \\frac {1} {\\pi}.\\int_{2\\pi^{+}} \\rho_{xy,\\Omega_v}^{proj}.cos(\\theta_v).d\\Omega_v\\)</p> <ul> <li> <p>EC: \\(L_{xy,\\Omega_v}^{EC}.\\Delta x.\\Delta y.cos(\\theta_v) = \\sum_z L_{xyz,\\Omega_v}^{EC}.\\Delta x.\\Delta y.cos(\\theta_v) = \\sum_{ij} L_{ij(xyz),\\Omega_v}^{dart}.\\frac {\\Delta x.\\Delta y} {cos(\\theta_p)}.|\\overline{\\Omega}_p.\\overline{\\Omega}_v| \\implies L_{xy,\\Omega_v}^{EC} = L_{ij,\\Omega_v}^{dart}.\\xi_{vp}\\) with \\(\\xi_{vp} = \\frac {|\\overline{\\Omega}_p.\\overline{\\Omega}_v|} {cos(\\theta_p).cos(\\theta_v)}\\) if \\(\\overline{\\Omega}_v \\in \\Delta \\Omega^{\\uparrow}\\); else: 0 \\(\\implies \\rho_{xy,\\Omega_v}^{EC} = \\rho_{ij,\\Omega_v}^{dart}.\\xi_{vp} = \\rho_{p,xy}.\\xi_{ps}.\\xi_{vp}\\).</p> </li> <li> <p>IS: \\(L_{xyz,\\Omega_v}^{IS} = L_{ij(xyz),\\Omega_v}^{dart} \\implies \\rho_{xyz,\\Omega_v}^{IS} = \\rho_{ij(xyz),\\Omega_v}^{dart} = \\rho_{p,xy}.\\xi_{ps}\\). It does not depend on \\(\\Omega_v\\).</p> </li> </ul> <p>Direct sun + Lambertian infinite slope \\(\\rho_p\\) (S: top scene horizontal surface):</p> <p>S upward exitance: \\(M_{S,x,y}^{\\uparrow} = \\int_{\\Delta \\Omega^{\\uparrow}} L_{S,xy,\\Omega_v} cos(\\theta_v).d\\Omega_v = L_{p,x,y}.\\frac {\\pi.(1 + cos(\\theta_p))} {2} \\implies A_s = \\rho_p.\\frac {|\\overline{\\Omega}_p.\\overline{\\Omega}_s|} {cos(\\theta_s)}.\\frac {1 + cos(\\theta_p)} {2}\\) since \\(L_{p,x,y} = \\frac {\\rho_p} {\\pi}.E_s.|\\overline{\\Omega}_p.\\overline{\\Omega}_s|\\)</p> <p>DART albedo:</p> <ul> <li>\\(A_{xy}^{EC} = \\frac {\\rho_p} {\\pi}.\\xi_{ps}.\\int_{\\Delta \\Omega^{\\uparrow}} \\xi_{vp}.cos(\\theta_v).d\\Omega_v = \\frac {\\rho_p} {\\pi}.\\xi_{ps}.\\int_{\\Delta \\Omega^{\\uparrow}} \\frac {|\\bar{\\Omega}_p.\\bar{\\Omega}_v|} {cos(\\theta_p)}.d\\Omega_v = \\frac {\\rho_p} {\\pi}.\\xi_{ps}.\\int_{\\Delta \\Omega^{\\uparrow}} \\frac {cos(\\theta_{vp})} {cos(\\theta_p)}.d\\Omega_{vp} = \\rho_p.\\frac {|\\bar{\\Omega}_p.\\bar{\\Omega}_s|} {cos(\\theta_s)}.\\frac {1 + cos(\\theta_p)} {2.cos(\\theta_p)} = \\frac {A_s} {cos(\\theta_p)}\\)</li> <li>\\(A_{xy}^{IS} = \\rho_p.\\xi_{ps}.\\frac {1} {\\pi}.\\int_{\\Delta \\Omega^{\\uparrow}} cos(\\theta_v).d\\Omega_v = \\rho_p \\frac {|\\bar{\\Omega}_p.\\bar{\\Omega}_s|} {cos(\\theta_s)}.\\frac {1 + cos(\\theta_p)} {2} = A_s\\).</li> </ul>"},{"location":"Annexes/Annex2/annex2.html#2-infinite-slope","title":"2) Infinite slope","text":"<p>(40mx40m, \\(\\rho_g =0.5\\)), 2 ground plots (\\(\\rho_{plot}=0.2\\)): \\(\\overline{\\rho}_p=0.449\\), direct sun \\(\\Omega\\)</p> <p>\\((\\theta_p =30\u00b0, \\phi_p=0\u00b0) \\implies \\Delta \\omega^{\\uparrow}=5.24sr\\) and \\(\\xi_{ps} =1.163\\).</p> <p>Simulation: <code>Slope_square_isolated_IS</code> + File: Albedos_DART.xlsx.</p> <p>Theory \\(\\implies \\rho_{i,j,\\Omega_v}^{dart} = \\xi_{ps}.\\rho_{p,xy} \\in [0.233;\\: 0.581], \\overline{\\rho}_{i,j,\\Omega_v}^{dart} =0.522.A_s(\\rho_p)=1.253.\\rho_p \\in [0.251;\\: 0.626]\\).</p> <p>\\(A_{xy}^{EC} \\in [0.249;\\: 0.623]\\); \\(\\overline{A}_{xy}^{EC} =0.559\\). \\(A_{xy}^{IS} \\in [0.217;\\: 0.542]\\); \\(\\overline{A}_{xy}^{IS} =0.487\\)</p> <p>The image below shows \\(\\rho_{ij,\\Omega_v}^{dart}(\\Omega_{v0} , \\Omega_{v1} , \\Omega_{v2} , \\Omega_{v3})\\), ortho images \\(\\rho_{xy,\\Omega_v}^{proj}(\\Omega_{v0} , \\Omega_{v1} , \\Omega_{v2})\\) and albedo images \\((A_{xy}^{proj} , A_{xy,z_{top}}^{RB1} , A_{xy,z_{top}}^{RB2})\\), with \"proj\" = EC and IS, for the 3 DART modes ('Infinite slope', 'Isolated scene', 'Repetitive scene' at order 1): \"Infinite slope\" is very close to theory: \\(A_{dart} =A_{xy}^{IS}=0.487 \\approx A_{z=24}^{RB2} \\neq A_{xy}^{EC} =0.559\\). Note that \\(A_{xy}^{IS}\\) can differ from \\(A_{z=24}^{RB2}\\) with other topography.</p> <p><p>DART albedo and ortho reflectance (3 viewing directions: nadir \\(\\Omega_{v0}, \\Omega_{v1} (\\theta_v=45\u00b0, \\phi_v=180\u00b0) and \\Omega_{v2}\\) \\((\\theta_v=45\u00b0, \\phi_v=0\u00b0)\\) of a 40m x 40m scene (i.e., Ox parallel slope \\(\\overline{\\Omega}_p (\\theta_p=40\u00b0,\\phi_p=0\u00b0)\\) + 2 plots). Direct sun \\(\\overline{\\Omega}_s(\\theta_s=40\u00b0, \\phi_s=45\u00b0). \\Delta x=\\Delta z=1m\\), except for \"Isolated scene\" where \\(\\Delta x=0.1m\\) to decrease border effects. a) Scene nadir and 3D views. b) Scene vertical profile with 3 viewing directions. c) Schema that explains that \\(A_{xy,z=24}^{RB2}\\) is maximum in the scene central part. d) DART sensor images \\(\\rho_{ij,\\Omega_v}^{dart}\\) for \\(\\Omega_{v0} , \\Omega_{v1} , \\Omega_{v2}\\) and \\(\\Omega_{v3} (\\theta_v=45\u00b0,\\phi_v=90\u00b0)\\), ortho-images \\(\\rho_{xy,\\Omega_v}^{proj}\\) for \\(\\Omega_{v1}\\) and \\(\\Omega_{v2}\\), and albedo images \\(A_{xy}^{ortho}, A_{xy}^{RB1}\\) and \\(A_{xy}^{RB2}\\).</p></p>"},{"location":"Annexes/Annex2/annex2.html#3-infinite-homogeneous-slope","title":"3) Infinite homogeneous slope","text":"<p>(\\(\\rho_p = 1, \\theta_p=\\phi_p=30\u00b0)\\): slope azimuth rotation is simulated with { : -30\u00b0, \\(\\phi_{p}=0\u00b0\\)}. \\(\\theta_{sun}=40\u00b0, \\phi_{sun}=45\u00b0\\). SKYL=0. Viewing directions \\(\\Omega_{vi}\\) of section 2). (see below, simulation: Slope_rectangle_IS)</p> <p>\\(\\frac {DART\\:Theory} {Theory} &lt; 10^{-3}.\\rho_{xy,\\Omega_v}^{IS} = \\rho_{xy,\\Omega_v} = 0\\) or \\(\\approx \\rho_p.\\frac {|\\bar{\\Omega}_p.\\bar{\\Omega}_s|} {cos(\\Theta_s)} = 1.271 \\:\\forall \\Omega_v.\\:\\rho_{xy,\\Omega_v}^{EC} \\in [0 (if E_p=0) \\:5.4]. \\rho_{xy,\\Omega_{v1}}^{EC} = 1.097, \\rho_{xy,\\Omega_{v2}}^{EC}=0.636\\), \\(\\rho_{xy,\\Omega_{v3}}^{EC} = 1.638. A_{x,y}^{EC} = 1.363\\) (theory: 1.369). \\(A_{x,y}^{RB,1}=1. A_{dart}^{EC}=A_{dart}^{IS} = A_{x,y}^{IS} = A_{x,y}^{RB,2}=1.185\\); it is &gt;1 because \\(E_p &gt; E_{horizontal\\:surface}\\).</p> <p>Slope + isotropic SKYL: \\(\\rho = \\rho_p.[(1 - SKYL).\\frac {|\\bar{\\Omega}_p.\\bar{\\Omega}_s|} {cos(\\Theta_s)} +  SKYL.\\frac {1 + cos(\\theta_p)} {2}], A=\\rho_p[(1 - SKYL).\\frac {|\\bar{\\Omega}_p.\\bar{\\Omega}_s|} {cos(\\theta_s)} + SKYL.\\frac {1 + cos(\\theta_p)} {2}].\\frac {1 + cos(\\theta_p)} {2}\\).</p> <p><p>Slope: reflectance and albedo images. \\(\\rho_p=1, \\Omega_{slope}(30\u00b0,30\u00b0). \\Omega_{sun}(40\u00b0,45\u00b0).\\) a) Infinite slope: radiance-derived albedo. b) Infinite slope: RB-derived albedo. c) Repetitive scene.</p></p> <p><p>Albedo: infinite slope mode, without air in the landscape.</p></p> <p>Simulation of field measured albedo \\(A_{field}\\). Apart \\(A_{xy}^{RB1}\\), DART albedos (i.e., \\(\\frac {exitance} {irradiance}\\)) are defined with the irradiance of the horizontal top scene surface. The exitance is that of an horizontal surface for the \"Repetitive scene\", and for \\(A_{x,y}^{RB2}\\). It is a variable horizontal surface for the \"Isolated scene\" and \"Infinite slope\". Therefore, an oblique surface, \\(A_{field}\\) should be simulated with 2 fish eye cameras (option: \"inside scene\") with given sensor dimensions and orientation: 1 camera gives local irradiance and 1 camera gives local exitance. (Wu et al., 2018, JGR-A). Less advised RB-based method: \\(A_{field} = \\frac {Interception\\: by\\: face\\: 1} {Interception\\: by \\:face\\:2}\\) for a \"double face\" facet with sensor dimensions and orientation.</p> <p><p>Simulation of in-situ measured albedo \\(A_{field}\\) with cameras.</p></p>"},{"location":"Annexes/Annex2/annex2.html#4-lambertian-slope","title":"4) Lambertian slope","text":"<p>\\((\\theta_p=40\u00b0,\\phi_p=0\u00b0, \\rho_g=0.5)\\) + Vegetation plot (LAI=0.5, h=0.2m, leaf size \\(0.003m^2\\), default leaf biochemistry). Atmosphere radiative transfer.</p> <p>DART-Lux and FT (<code>Infinite_slope_Vegetation_plot</code>): 2 sun directions. \\(\\Delta x=1m\\), Infinite slope.</p> <ul> <li>DART-FT: \\(\\Delta_{illu}=0.1m\\) (it is too large). \\(N_{dir}=100\\) and 400 directions: larger \\(N_{dir} \\implies\\) more accurate illumination, exitance. \\(N_{iterations}=10\\).</li> <li>DART-Lux: \\(N_{samples \\:per\\: pixel}=2000\\) and \\(\\Delta t=60\\)\".</li> </ul> <p></p> <p><p>DART-FT and DART-Lux albedo A and nadir reflectance \\(\\rho\\) for a slope (\\(\\rho_{ground}=0.5\\)) with grass (LAI=0.5). To reduce computer time: decrease \\(N_{iterations}\\) (DART-FT) and \\(N_{samples\\: per\\: pixel}\\) (DART-Lux). DART-FT becomes more accurate and closer to DART-Lux if its illumination grid is denser.</p></p>"},{"location":"Annexes/Annex3/annex3.html","title":"Annex 3: AERONET and ECMWF data","text":"<p>This section informs how to import AERONET and ECMWF data. The 2 provided python scripts are not up-to date.</p> <p>Atmosphere.py</p> <p>Usage: </p> <ul> <li> <p>to read AERONET and ECMWF atmosphere data.</p> </li> <li> <p>to create files of atmosphere data and to insert them in the DART SQL atmosphere database.</p> </li> </ul> <p>Functions: </p> <ul> <li> <p>ECMWFTemperatureToAtmosphereDatabase ()</p> </li> <li> <p>temperatureInterpolation()</p> </li> <li> <p>createHG_Parameters()</p> </li> <li> <p>createAerosols_Parameters()</p> </li> <li> <p>createGasModel()</p> </li> </ul> <p>SkinTemperature.py Usage: to interpolate ECMWF ground temperature over one day </p> <p>Function: skinTemperatureInterpolation()</p> <p>Function: ECMWFTemperatureToAtmosphereDatabase() in the script <code>Atmosphere.py</code></p> <p></p> <p>Function: temperatureInterpolation() </p> <p>Function: createHG_Parameters() in the script <code>atmosphere.py</code>. </p> <p>Function: createAerosols_AOD() in the script <code>atmosphere.py</code> </p> <p>Function: createGasTrans() in the script <code>atmosphere.py</code>. </p> <p>Function: skinTemperatureInterpolation() in the script <code>skinTemperature.py</code>. </p>"},{"location":"Annexes/Annex3/annex3.html#aeronet-download-and-adaptation-to-dart","title":"AERONET: download and adaptation to DART","text":"<p>AERONET https://aeronet.gsfc.nasa.gov provides the aerosol optical depth (AOD), inversion products, and precipitable water, including daily and monthly averages, derived from observations (CWL/BW: 340/2, 380/4, 440/10, 500/10, 675/10, 870/10, 937/10, 1020/10, 1640/25 nm) in hundreds world sites. AOD is computed for three data quality levels: 1.0 (unscreened), 1.5 (cloud-screened), and 2.0 (cloud screened and quality-assured). </p> <ul> <li> <p>Aerosol optical thickness/depth AOT depth (AOT_\u03bb)</p> </li> <li> <p>Gas optical depth: AOT_\u03bb-Rayleigh, AOT_\u03bb-O3,  AOT_\u03bb-NO2, AOT_\u03bb-CH4, AOT_\u03bb-CO2, AOT_\u03bb-Water</p> </li> <li> <p>Aerosol single scattering albedo SSA (SSA\u03bb_T)</p> </li> <li> <p>Asymmetry parameter g of the scattering phase function of aerosols (ASYM\u03bb-T).</p> </li> </ul>"},{"location":"Annexes/Annex3/annex3.html#i-download-of-aeronet-data-aerosol-optical-depth-and-aerosol-inversions-sections","title":"I. Download of AERONET data (Aerosol Optical Depth and Aerosol Inversions sections)","text":"<p>Download (text file in a zip file) can be per measuring station, per product: 'aerosol optical thickness', 'gas and aerosol optical thickness' and 'SSA + asymmetry parameter', with site coordinates and altitude in the file header. Daily and monthly averages (not for \"gas optical thickness\"). </p> <ul> <li>Aerosol Optical Depth for a given site <ul> <li>Click on \"Data Display\" and search for the site by clicking on the map. Click on the site name below the map.</li> <li>In the new page that shows data availability by level, choose a year and download data (Figure below).</li> </ul> </li> </ul> <p><p>Selection of AERONET measuring site.</p></p> <p>In the downloaded zip file, measurements, specified by a specific date and time, are per line, with each column standing for the data: AOT_440, AOT_675, 440-870Angstrom,... The separator is a commas \",\".</p> <p><p>Structure of the downloaded file. Separators are commas \",\".</p></p> <ul> <li>Daily and monthly averages for a given site<ul> <li>Click on \"Download Tool\", and then on the name of the desired site. Then, select the products for the level available over the entire period of availability of the measurements.</li> <li>Check the desired level for the line \"Aerosol Optical Depth with Precipitable Water and Angstrom Parameter\".</li> <li>Monthly averages: select \"Monthly Averages\" in Data Format to get a file (name ending with mon). Its columns store the averages derived from Daily averages, and the averages derived from daily averages weighted by the number of measurements in the day (Weighted Average). Each lines is a month of the year.</li> <li>Daily averages: select \"Daily Averages\" (name of the file ending with day).</li> </ul> </li> </ul> <p><p>Download AERONET daily and monthly averages.</p></p> <ul> <li>Gas and aerosol optical depth In the \"Aerosol Optical Depth\" section, select the site and desired level (line \"Total Optical Depth with components\"). The downloaded text file stores gas and aerosol optical thickness (no daily/monthly average).</li> </ul> <p><p>Structure of the downloaded file. Separators are commas \",\".</p></p> <ul> <li>SSA and Asymmetry parameter g for a site <ul> <li>In the \"Aerosol Inversion\" section, click on \"Data Display\" and select the site by clicking on the map.</li> <li>Once the desired site has been found, click on its name below the map.</li> <li>Select the desired product (SSA or g). Note data availability according to the level: 1.0, 1.5 and 2.0.</li> <li>Choose a year, and click on \u201cLevel 2.0\u201d (or another one) download link at the page bottom left.</li> </ul> </li> </ul> <p>SSA and g data are in the downloaded zip file: text file (ending in .ssa for SSA and .asy for asymmetry parameters). Each lie represents a measurement (specified by a specific date and time). Columns represent the data separated by commas \",\": SSA441-T, SSA_675-T, ASYM441-T,... </p> <p>If the name of the site is known and if we want daily / monthly values and /or SSA / ASYM in the same file:</p> <ul> <li> <p>Click on \"Download Tool\", and then on the name of the desired site.</p> </li> <li> <p>Select the products for the level available over the entire period of availability of the measurements.</p> </li> <li> <p>Select the lines \"Single Scattering Albedo\" for the albedo and \"Asymmetry Factor\" for the asymmetry parameter (or any other desired parameter).</p> </li> <li> <p>To download all the products, select \"Combined File (all products without phase functions)\".</p> </li> <li> <p>Monthly averages: select \"Monthly Averages\" in Data Format. There is one row per month and per type of average (monthly average calculated from daily averages: Daily Average, calculated from daily averages weighted by the number of daily measurements: Weighted Average).</p> </li> <li> <p>Daily averages: select \"Daily Averages\".</p> </li> </ul> <p><p>Menu for downloading SSA and Asymmetry parameter g for a site.</p></p> <p><p>Downloaded file. Separators are commas \",\". 1 type of data per text file (suffix .ssa for the albedo, and .asy for the asymmetry parameter), or data grouped in the same text file if you selected \"Combined File\".</p></p> <ul> <li>Data for all sites  A given type of data can be downloaded (tar.gz file) for all AERONET sites (except gas optical thickness).  a) Aerosol AODs: section \"Aerosol Optical Depth\" &gt; \"Download All Sites\" Select All Points (\\(\\implies\\) all measurements) or Daily Average or Monthly Average (\\(\\implies\\) daily or monthly averages). b) SSA and g: section \"Aerosol Inversions\" &gt; \"Download All Sites\"</li> </ul>"},{"location":"Annexes/Annex3/annex3.html#ii-adaptation-of-aeronet-data-to-dart","title":"II. Adaptation of AERONET data to DART","text":"<p>The gas and aerosol models in the DART atmosphere database result from MODTRAN simulations at [10 - 40015cm-1] ([0.25 - 1000\u00b5m]). Since they are for a few wavelengths (e.g., AOD at 440nm, 675nm, 870nm and 1020nm), AERONET data (Figure below) must be interpolated / extrapolated to any wavelength of DART database.</p> <p><p>AERONET data:</p></p> <p>Below, index A is for AERONET data, and index db is for DART database data. Some steps are identical for all parameters. For example, if AERONET \\(AOD_{A,z\u2019}(\\lambda_0)\\) known at altitude z\u2019, \\(AOD_{A,0}(\\lambda_0)\\) is extrapolated with given gas / aerosol model of DART database, and \\(AOD_{A,0}(\\lambda)\\) is extrapolated such that \\(AOD_{A,0}(\\lambda) = AOD_{A,0}(\\lambda_0) . f(\\lambda_0)\\).</p> <ul> <li>Asymmetry parameter g </li> </ul> <p>AERONET gives only 1 asymmetry parameter for the aerosol phase function. It is the \"forward scattering\" parameter \\(g_1\\) of the DART atmospheric database (table aHG per aerosol model). Therefore, the \u201csmall\u201d aerosol back-scatter peak is not considered: \\(g_2=0\\) and multiplicative factor \\(a=1\\). In short, the module <code>phase.exe</code> of DART makes a linear spectral interpolation on \\(g_A(440), g_A(675), g_A(870)\\) and \\(g_A(1020)\\), with constant values beyond the minimal and maximal wavelengths, with \\(g_1(\\lambda) = g_A(\\lambda), g_2(\\lambda)=0, a(\\lambda)=1\\).</p> <ul> <li> <p>Aerosol optical depth (AOD) AERONET gives \\(AOD_{A,z}\\) at 440nm, 675nm, 870nm, 1020nm, and possibly 1640nm and 340nm; z = site altitude.</p> <ul> <li>Angstr\u00f6m coefficient \\(AOD(\\lambda)=AOD(\\lambda_0).(\\frac{\\lambda_0}{\\lambda})^{\\beta_{\\lambda_1,\\lambda_2}}\\) for \\(\\lambda\\)  and \\(\\lambda_0 \\in [\\lambda_1 \\lambda_2]\\)  and \\(\\beta_{\\lambda_1,\\lambda_2}\\) the Angstr\u00f6m coefficient over \\([\\lambda_1 \\lambda_2]\\).The Angstr\u00f6m coefficients given by AERONET are not directly used. Actually, we recalculate them. For example, for the interval [440 nm; 675 nm], we have:  \\(AOD(675)=AOD(440)\\times (\\frac{440}{675})^{\\beta_{440\\ 675}}\\)  with  \\(\\beta_{440\\ 675}= \\frac{ln(\\frac{AOD(675)}{AOD(440)})}{ln(\\frac{440}{675})}\\)  It gives \\(\\beta_{440\\ 675}, \\beta_{675\\ 870}, \\beta_{870\\ 1020}\\) and also \\(\\beta_{340\\ 440}\\) and \\(\\beta_{1020\\ 1640}\\) if \\(AOD_A(1640)\\) and \\(AOD_A(340)\\) exist.</li> <li>Aerosol spectral optical depth at the site attitude z' </li> </ul> <p>If we have \\(AOD_A(340)\\), and consequently \\(\\beta_{340\\ 440}\\):</p> <ul> <li> <p>For \\(\u03bb \\in [0 - 440 nm]\\):  \\(AOD_{z'}(\\lambda)=AOD_A(340) \\times (\\frac{340}{\\lambda})^{\\beta_{340\\ 440}}\\)</p> </li> <li> <p>For \\(\u03bb \\in [440 - 675 nm]\\): \\(AOD_{z'}(\\lambda)=AOD_A(440) \\times (\\frac{440}{\\lambda})^{\\beta_{440\\ 675}}\\)</p> </li> </ul> <p>If we do not have \\(AOD_A(340)\\):</p> <ul> <li> <p>For \\(\u03bb \\in [0 - 675 nm]\\): \\(AOD_{z'}(\\lambda)=AOD_A(440) \\times (\\frac{440}{\\lambda})^{\\beta_{440\\ 675}}\\)</p> </li> <li> <p>For \\(\u03bb \\in [675 - 870 nm]\\): \\(AOD_{z'}(\\lambda)=AOD_A(675) \\times (\\frac{675}{\\lambda})^{\\beta_{675\\ 870}}\\)</p> </li> </ul> <p>If we do not have \\(AOD_A(1640)\\):</p> <ul> <li>For \\(\u03bb &gt; [ 870 nm]\\): \\(AOD_{z'}(\\lambda)=AOD_A(1020) \\times (\\frac{1020}{\\lambda})^{\\beta_{870\\ 1020}}\\)</li> </ul> <p>If we do have \\(AOD_A(1640)\\), and consequently  \\(\\beta_{1020\\ 1640}\\):</p> <ul> <li> <p>For \\(\u03bb \\in [870 - 1020 nm]\\): \\(AOD_{z'}(\\lambda)=AOD_A(870) \\times (\\frac{870}{\\lambda})^{\\beta_{870\\ 1020}}\\)</p> </li> <li> <p>For \\(\u03bb &gt; [ 1020 nm]\\): \\(AOD_{z'}(\\lambda)=AOD_A(1640) \\times (\\frac{1640}{\\lambda})^{\\beta_{1020\\ 1640}}\\)</p> </li> <li> <p>Aerosol spectral optical depth at z=0km</p> </li> </ul> <p>The optical thickness of AERONET is for the altitude of the measuring site z '. However, the optical thickness at the input of DART (table aAOD) must be for the altitude z = 0km. In order to get it, we use:  \\(AOD_{A,0}=AOD_{A,z'}.\\frac{\\int_0^\\infty N(z).dz}{\\int_0^{z'}f N(z).dz}=AOD_{A,z'}.\\frac{N_{0,db}}{N_{z',db}}\\) \\(N(z)\\) is the aerosol normalized vertical density profile (aECP table per aerosol model) for a finite number of altitudes (z integer in km) in the DART database. \\(N_{0,db}=N(z=0km)\\). $N_{z'}=N(z') is usually computed with an exponential law of scale factor Hi that links \\(N_i\\) at level \\(i\\), to \\(N_{i+1}\\) at level \\(i + 1\\).  \\(N_{i+1}=N_i \\times e^{\\frac{z_{i+1}-z_i}{H_i}} \\implies H_i= - \\frac{z_{i+1}-z_i}{ln\\frac{N_{i+1}}{N_i}}\\) Therefore, there is no need to know scale factors in order to compute \\(N_{z,db}\\) for \\(z'\\) between levels \\(i\\) and \\(i+1\\):  \\(N_{z'}=N_{i,db} \\times e^{- \\frac{-(z'-z_i)}{H_i}} = N_{i,db} \\times e^{\\frac{- \\frac{(z'-z_i)}{(z_{i+1}-z_i)}}{ln\\frac{N_{i+1,db}}{N_{idb}}}} = N_{i,db} \\times(\\frac{N_{i+1,db}}{N_{idb}})^{\\frac{-(z'-z_i)}{z_j-z_{i+1}}}\\)  Knowledge of \\(N_{z\u2019,db}\\)  leads to \\(AOD_{A,0}\\) at any wavelength: \\(AOD_{A,0}(\u03bb) = AOD_{A,z\u2019}(\u03bb) \\times \\frac{N_{0,db}}{N_z}\\).</p> <ul> <li> <p>Aerosol SSA SSA is computed for wavelengths of DART database with a linear interpolation between the AERONET SSA values (440nm, 675nm, 870nm, 1020nm), and as a constant value outside the interval [440.1020 nm].</p> <ul> <li>\\(\\lambda &lt; 440 nm\\): SSA(\u03bb) = SSAA(440)</li> <li>\\(\\lambda \\in [440 - 675nm]\\): linear interpolation between SSAA(440) and SSAA(675)</li> <li>\\(\\lambda \\in [675 \u2013 870nm]\\): linear interpolation between SSAA(675) and SSAA(870)</li> <li>\\(\\lambda \\in [870 - 1020nm]\\): linear interpolation between SSAA(870) and SSAA(1020)</li> <li>\\(\\lambda &gt; 1020 nm\\): SSA(\u03bb) = SSAA(1020)</li> </ul> </li> <li> <p>\\(0_3\\) transmittance \\(O_3\\) transmittance \\(T_{O_3} (\\lambda)\\) at \\(z=0km\\) is needed, whereas AERONET gives \\(O_3\\) optical depth \\(AOD_{O_3,A}(675)\\) at \\(675nm\\) for the altitude \\(z'\\) of the measuring site. \\(T_{O_3} (\\lambda)\\) is computed using \\(O_3\\) normalized vertical profile \\(N_{O_3,z}\\) (table gECP). As for the aerosols, between levels \\(i\\) and \\(i+1\\):  \\(N_{O_3,z'}=N_{O_3,i}\\times \\frac{N_{O_3,i+1}}{N_{O_3,i}}^{-\\frac{z'-z_i}{z_i-z_{i+1}}}\\) It leads to AODO3 at z=0km for \u03bb=675 nm: \\(AOD_{O_3,A,0}(675)=AOD_{O_3,A,z'}(675) \\times (\\frac{N_{O_3,0}}{N_{O_3,z'}})\\) With the assumption that AOD is proportional to the total quantity of \\(O_3\\):  \\(AOD_{O_3}(\\lambda)=AOD_{O_3,db}(\\lambda) \\times \\frac{AOD_{O_3,A,0}(675)}{AOD_{O_3,db}(675)}= AOD_{O_3,db}(\\lambda) \\times f_{O_3}(675)\\)  with \\(AOD_{O_3,db}(675) = - ln (T_{O_3,db} (675))\\) for a given gas model (table gTrans).  \\(f_{O_3}(675)=frac{AOD_{O_3,A,0}(675)}{AOD_{O_3,db}(675)}\\) is the relative O3 proportion in AERONET compared to DART database.  \\(\\implies T_{O_3} (\\lambda)= e^{-AOD_{O_3}(\\lambda)}=e^{AOD_{O_3,db}(\\lambda)}=T_{O_3,db}(\\lambda)^{f_{O_3}(675)}\\)</p> </li> <li> <p>H2O transmittance AERONET AODH2O,A(1020) is for the band 1015 - 1025nm] for altitude z' of the measuring site. In order to compute \\(AOD_{H_2O,A}(1020)\\) at \\(z=0\\), we use the H2O height scale H_H2Odb (cf. DART Handbook).  \\(AOD_{H_2O,A,0}(1020)=AOD_{H_2O,A,z'}(1020) \\times e^{-\\frac{z'}{H_{H_2O,db}}}\\) Due to the strong spectral variability of \\(AOD_{H_2O}\\), we use \\(f_{H_2O}(1020)=\\frac{AOD_{H_2O,A,0}(1020)\\times \\sum_i \\delta\\lambda_i}{\\sum_i AOD_{H_2O,db,i}\\times \\delta\\lambda_i}\\) with \\(i \\in [1015 - 1025]\\) and \\(\\delta\\lambda_i\\) = interval per \\(AOD_{H_2O,db,i}\\) in the DART data base and \\(AOD_{H_2O,db,i}=-ln[T_{H_2O,db}(\\lambda_i)]\\).   \\(\\implies AOD_{H_2O}(\\lambda)=AOD_{db}(\\lambda).f_{H_2O,db}(1020)\\).  \\(\\implies T_{H_2O}(\\lambda)=e^{-AOD_{H_2O}(\\lambda)}=e^{-AOD_{H_2O,db}(\\lambda) \\times f_{H_2O}(1020)}=T_{H_2O,db,}(\\lambda)^{f_{H_2O}(1020)}\\)</p> </li> <li> <p>Transmittance of scattering gasses \\(AOD\\) at \\(z=0\\) is computed with \\(AOD_{scat,A}(440), AOD_{scat,A}(675), AOD_{scat,A}(870), AOD_{scat,A}(1020)\\) at the site altitude z\u2019, using the height factor \\(H_{m,db}\\) of scattering gasses (cf. DART Handbook):  \\(AOD_{scat,A,0}(\\lambda_0)=AOD_{scat,A,z'}(\\lambda_0)\\times e^{-\\frac{z'}{H_{m,db}}}\\).  \\(f_{scat}(\\lambda_0)=\\frac{AOD_{scat,A,0}(\\lambda_0)}{AOD_{scat,db}(\\lambda_0)}\\), \\(AOD_{scat,db}(\\lambda_0)=-ln[T_{scat,db}(\\lambda_0)]\\) and \\(\\lambda_0 =440, 675, 870, 1020nm\\). \\(f_{scat}(\\lambda_0)=1\\) if \\(T_{scat,db}(\\lambda_0)=1\\). \\(T_{scat}(\\lambda)=e^{-AOD_{scat}(\\lambda)}=e^{-AOD_{scat,db}(\\lambda) \\times f_{scat}(\\lambda_0)}=T_{scat,db}(\\lambda)^{f_{scat}(\\lambda_0)}\\)</p> <ul> <li>\\(\\lambda &lt; 440 nm: T_{scat}(\u03bb) = T_{scat,db}(\\lambda)^{f_{scat}(440)}\\)</li> <li>\\(\\lambda \\in [440 - 675nm]: T_{scat}(\\lambda) = T_{scat,db}(\\lambda)^{f_{scat} [440,675](\\lambda)}\\)</li> <li>\\(\\lambda \\in  [675 \u2013 870nm]: T_{scat,db}(\\lambda)^{f_{scat} [675,870](\\lambda)}\\)</li> <li>\\(\\lambda \\in  [870 - 1020nm]: T_{scat,db}(\\lambda)^{f_{scat} [870,1020](\\lambda)}\\)</li> <li>\\(\\lambda &gt; 1020 nm: T_{scat}(\u03bb) = T_{scat,db}(\\lambda)^{f_{scat}(1020)}\\)  with \\(f_{scat} [\\lambda_1,\\lambda_2](\\lambda)\\) the factor \\(f_{scat}\\) linearly interpolated between \\(f_{scat}(\\lambda_1)\\) and \\(f_{scat}(\\lambda_2)\\) at \\(\\lambda\\).</li> </ul> </li> <li> <p>Transmittance of absorbing gasses (CO2, CH4, CO, N2O, O2, N2, other gases). AERONET gives the optical thickness of CO2 and CH4. We assume that the variation of quantity of these gases compared to these same gases in the gas model chosen in the DART database is equal to the corresponding variation of the scattering gases between the DART model and the AERONET values. This assumption is based on the fact that \\(CO2, CH4, CO, N2O, O2, N2,..\\) are well mixed with the scattering gases. Therefore, we use the same factors as for the scattering gasses:</p> <ul> <li>\\(\\lambda &lt; 440 nm: T_g(\\lambda) = T_{g,db}(\\lambda)^{f_{scat}(440)}\\)</li> <li>\\(\\lambda \\in [440 - 675nm]: T_g(\\lambda) = T_{g,db}(\\lambda)^{f_{scat} [440,675](\\lambda)}\\)</li> <li>\\(\\lambda \\in [675 \u2013 870nm]: TT_g(\\lambda) = T_{g,db}(\\lambda)^{f_{scat} [675,870](\\lambda)}\\)</li> <li>\\(\\lambda \\in [870 - 1020nm]: T_g(\\lambda) = T_{g,db}(\\lambda)^{f_{scat} [870,1020](\\lambda)}\\)</li> <li>\\(\\lambda &gt; 1020 nm: T_g(\\lambda) = T_{g,db}(\\lambda)^{f_{scat}(1020)}\\)</li> </ul> </li> <li> <p>Upward \u2013 Downward transmittance (Trans Eq.)Using the above transmittance values: \\(Trans\\ eq = (T_{CO_2} . T_{CH_4} . T_{CO} . T_{O_3} . T_{H_2O} . T_{N_2O} . T_{O_2} . T_{N_2} . T_{other gases} . T_{scat})^2\\).</p> </li> </ul> </li> </ul>"},{"location":"Annexes/Annex3/annex3.html#ecmwf-data-to-dart","title":"ECMWF data to DART","text":"<p>(http://apps.ecmwf.int/datasets/data/macc_reanalysis/, http://data-portal.ecmwf.int/data/d/macc_reanalysis/levtype=ml/)</p> <p>The ECMWF database stores climatological data at 3h time intervals in a day, on the whole globe (resolution 1.125\u00b0 x 1.125\u00b0). The data is in .grib or NetCDF format. Here, we consider the retrieval of:</p> <ul> <li> <p>Atmospheric temperature profiles, given by atmospheric level: 60 atmospheric layers, up to 0.1hPa or about 35.6 km altitude (model level: temperature)</p> </li> <li> <p>Soil temperatures (surface: skin temperature)</p> </li> </ul> <p></p> <p>Download method with \"Model levels\" (top left): </p> <ol> <li> <p>Select Date / Select a list of months</p> </li> <li> <p>Select time</p> </li> <li> <p>Select time step</p> </li> <li> <p>Select level and parameter. For profiles of atmosphere temperature, select the line \"Temperature\". </p> </li> <li> <p>Click on \"Retrieve GRIB\", and then on \"Retrieve Now\".</p> </li> </ol> <p>Read and extract an atmosphere temperature profile: </p> <ol> <li> <p>Open the free software \"Integrated Data Viewer\" (IDV) (www.unidata.ucar.edu/software/idv/#home), go the Dashboard and select \"Data Choosers\" to select the grib file downloaded from the database. </p> </li> <li> <p>Once the file open, go to \"Field Selector\", and for the field \"Temperature\" display General &gt; Grid Table. Select the expected date if the file has several dates, and then click on \"Create Display\".</p> </li> <li> <p>In \"Displays\", check \"Show native coordinates\". Data can be displayed per available date. They can be sorted per longitude (column \"lon\"), latitude (\"lat\"), atmosphere level (\"hybrid\"). The last column gives the corresponding temperature (K). </p> </li> <li> <p>A temperature profile of interest is copied (Ctrl + C) into a text file thatcan be converted by the function ECMWFTemperatureToAtmosphereDatabase() into a text file that the DART atmosphere database can import.</p> </li> </ol> <p>The procedure is identical for ground temperatures (skin temperature), except they are in the category \"Surface\". The function skinTemperatureInterpolation() uses the text files that store data extracted over 1 day (step of 3h).</p>"},{"location":"Annexes/Annex4/annex4.html","title":"Annex 4: Forest simulation with DART-Lux","text":"<p>Objective: to illustrate the use of DART-Lux to simulate images (here: nadir image) and BRF of forests, with a comparison with DART-FT where leaf elements are simulated as turbid volumes and \\(0.01m^2\\) facets.</p> <p>Scene: 155m x 205m plot of Howland forest, USA. 45.2N, 68.73W. 2003/07/06, 11h. \\(0.45\\mu m, 0.55\\mu m, 0.65_mu m, 0.78\\mu m\\); \\(\\Delta \\lambda=0.05\\mu m\\). <code>trees_Howland.txt</code>: 750 aspen trees (type 0), 7239 hemlock trees (type 1). Optical properties: aspen_low / aspen_low_bf for aspen leaf upper / bottom faces, hemlock_low for hemlock leaf, bark_howland for trunks, sandy_loam_brown for ground. Spatial resolution: 0.5m.</p> <p><p>Howland forest plot. DART-FT trees are simulated as turbid volumes (a) and \\(0.01m^2\\) facets (b).</p></p> <p>To optimize DART-Lux, trees must be clones of a limited number of basic 3D trees simulated with facets. Since, trees of the same type in trees_Howland.txt are proportional, any tree of each tree type (i.e., aspen, hemlock) can be a reference tree that can be used to create a basic 3D tree. Here, the larger tree of each tree type is the \"reference\": trunk height below crown = 12.81m for aspen and 11.57m for hemlock.</p> <p>Tree crowns are ellipsoids for aspen and cones for hemlock. The simulation Create_tree_ellipsoid creates a 3D object (default name: <code>dsm.obj</code>) using a <code>trees.txt</code> file that stores the dimensions of the reference aspen tree with a location (here: (5m, 5m)) in the center of a small square scene (here: 10m x 10m). This tree is also defined by the expected LAD (here: spherical) and a plausible LAI (here: \\(LAI_{init}=1\\)). Here, the resulting 3D object ((i.e., <code>tree_ellipsoid.obj</code>) contains 10018 triangles that make up the tree and ground scene facets. It is transformed into the basic <code>tree_ellipsoid.obj</code> by manually adding a comment mark (//) at the start of the 2 lines (\"f 1 2 3\" and \"f 4 5 6\") that define the 2 triangles of the ground scene. Similarly, the simulation <code>Create_tree_cone</code> creates a <code>dsm.obj</code> that is manually transformed as the <code>tree_cone.obj</code>. Then, the file <code>trees_Howland.txt</code> is manually transformed into the file <code>Field_3D_objects.txt</code> that stores the field (i.e., xyz location, scaling and rotation) of the two 3D objects (i.e., <code>tree_ellipsoid.obj</code>, <code>tree_cone.obj</code>); the scaling values of the 2 reference trees are equal to 1.</p> <p>Then, the maket module is run with the Howland scene and the optional product \"Triangle area products\" / \"By type / color\", after having set a specific color name per group (i.e., trunk, leaves) of the two 3D objects. The file <code>input / dart.typ</code> stores the code associated to each color name; here: 102 for aspen and 103 for hemlock. The file <code>simulation.properties.txt</code> gives the area of scene elements per code (i.e., color name). Here, \"Leaf (102) aspen area = \\(11434m^2\\)\", which implies \\(LAI_{aspen} = 0.3598\\) instead of 0.4. Similarly, \"Leaf (103) hemlock area = 115460m2\", which implies \\(LAI_{aspen} = 3.634\\) instead of 3.6. In order to get the correct aspen and hemlock LAI values, the two 3D objects are xyz scaled: 0.4/0.3598 instead of 1 for aspen, and 3.6/3.634 instead of 1 for hemlock, which allows the maket module to give the correct LAI values: \\(LAI_{aspen}=0.4\\) and \\(LAI_{hemlock}=3.6\\).</p> <p>The image below shows the evolution of DART-Lux scene reflectance \\(\\rho_{scene}\\) as a function of time. After 30s, the relative accuracy on \u03c1scene is already better than \\(10^{-3}\\). DART Lux and DART-FT do not give exactly the same \\(\\rho_{scene}\\). This is due to the fact that DART Lux does not yet simulate leaves with different optical properties on its 2 faces.</p> <p><p>DART-Lux scene reflectance with time, from 30s to 330s.</p></p> <p>Below, the table shows the DART-FT and DART-Lux RAM needs and computer times. As expected, DART-Lux is much faster and needs much less RAM than DART-FT. The RAM demand increases very little if the 3D models are more accurate (e.g., facets of \\(0.001m^2\\) instead of \\(0.01m^2\\)).</p> <p><p>DART-FT: a) \"turbid\" and b) \"0.01m2 triangles\". DART-Lux: c) 30s (left) and d) 230s.</p></p> <p><p>RAM and computer time (\u2206t) requirements of DART-FT and DART-Lux. Howland forest.</p></p>"},{"location":"Annexes/Annex5/annex5.html","title":"Annex 5: Field of trees that are the clones of a DART created 3D (facet) tree","text":"<p>Approach: create the 3D tree <code>3D_tree.obj</code> with Maket module, then the field of trees, then the scene.</p> <p>Target scene: 100m x 100m, \\(LAI_{scene} = 4\\), \\(N_{trees} = 500\\) \\(\\implies\\) mean \\(\\overline{Leaf\\:area}_{tree} = 80m^2\\) and \\(\\overline{LAI}_{tree} = 0.008\\)</p> <p>Step 1: DART 3D tree creation (simulation \"Create_3D_tree\")</p> <ul> <li> <p>Scene: horizontal bare ground scene with a tree (mean dimensions, \\(\\overline{Leaf\\:area}_{tree}\\) = 80m2) in its center. Here, the scene size is 100 x 100m in order to be adapted to any tree crown horizontal dimension, and the area of the facets of the tree crown is \\(0.003m^2\\) (smaller facet area and larger the computer volume of the 3D tree).</p> </li> <li> <p>Run Maket (adapted to DART-FT, and soon DART-Lux) after setting its only product \"3D object\". It gives the 3D object <code>dsm.obj</code> that stores all facets of the tree and the 2 facets of the ground.</p> </li> <li> <p><code>3D_tree.obj</code>: <code>dms.obj</code> whose you comment out the 2 ground faces (i.e., <code>// f 1 2 3</code> and <code>//f 4 5 6</code>).</p> </li> </ul> <p></p> <p>Step 2: Creation of the field of trees \"field_3D_trees.txt\" Any tool (e.g., <code>TreeReport.txt</code> of DART created trees) can give <code>field_3D_trees.txt</code>. Here, Excel <code>filecreate_field_tree.xlsx</code> is used with parameters for tree position (\\(N_{trees}\\), radius of tree presence) and dimensions. Notethe use of independent random numbers for tree dimensions with thresholds to avoid too large and too small trees.</p> <p>Step 3: Scene creation (simulation 3D_scene) 100m x 100m scene with 500 trees using <code>3D_tree.obj</code> and <code>field_3D_trees.txt</code>. The image below shows results. </p> <p>Here, in addition to the scene creation, the Maket module computes the area (\\(A_{leaf} = 40744.2 m^2\\), \\(A_{trunk} = 11167.8 \\:m^2\\), \\(A_{ground} = 10000 \\:m^2\\)) per scene element. As expected, \\(LAI_{scene} \\approx 4\\). In order to get exactly 4, a DART python code can scale the leaves; note that if \\(x_{scale} = y_{scale} = z_{scale}\\), \\(LAI = LAI_0.x.\\sqrt{x_{scale}}\\).</p> <p><p>DART 2D / 3D scene and RGB image. \\(\\rho_{ground}\\): loam_gravelly_brown. \\(\\rho_{leaf}\\): rass_rye. \\(\\rho_{bark}\\): bark_deciduous.</p></p>"},{"location":"Annexes/Annex6/annex6.html","title":"Annex 6: Optimal domain of leaf variables to get leaf optical properties","text":"<p>The domain of PROSPECT/FLUSPECT input parameters should be defined using prior information on the correlation between these parameters, and per parameter of interest. Feret et al. (2011) compute joint distribution, marginal distribution and correlations using 700-1200 leaf samples (\\(N_{samples}\\) depends on type of chemical constituent) from various sources (ANGERS, LOPEX, A. Gitelson, A. Richardson, \u2026). The first image below shows marginal distributions for Chl, Car, EWT and LMA, and the second shows co-distributions, including the Leaf structure parameter N. Samples are created by a multivariate normal random numbers function (e.g. \u2018mvnrnd\u2019 in Matlab) using the mean value of each variable and the covariance matrices.</p> <p><p>Marginal distribution for leaf chemical constituents.</p></p> <p><p>Pairwise co-distribution of leaf chemical and structural constituents.</p></p> <p>Leaf variables must verify PROSPECT constraints: leaf chemical constituent &gt; 0, and leaf structure \\(\\in [0\\:3]\\)</p> <p>If the dataset is aimed to estimate a variable x, the distribution of x may be converted from normal to uniform. Then, one gets a larger number of variable combinations, and one divides the range of variation of x into n equal intervals, with a same number of samples selected from the initial dataset.</p> <p>If canopy variables vary, these variables are generated using user\u2019s distribution merged to the leaf variables. Example: random selection of LAI using a uniform distribution, independent from leaf variables. However, correlations between LAI and Chlorophyll content may be considered.</p>"},{"location":"Annexes/Annex7/annex7.html","title":"Annex 7: List of abbreviations","text":"<p>\\(\\theta_{sun}\\): sun zenith angle (\u00b0 or rd)</p> <p>\\(\\phi_{sun}\\): sun azimuth angle (\u00b0 or rd)</p> <p>\\(\\rho_x\\): reflectance of scene element x</p> <p>\\(\\tau_x\\): transmittance of scene element x</p> <p>\\(\\Omega\\): solid angle (sr)</p> <p>ALA : Average Leaf Angle (\u00b0 or rd)</p> <p>BOA: Bottom of Atmosphere</p> <p>BRF: Bi-directional reflectance factor</p> <p>DART: Discrete Anisotropic Radiative Transfer</p> <p>\\(E_s\\): sun irradiance (usually for a surface perpendicular to sun direction) (\\(W/m^2\\) or \\(W/m^2/\\mu m\\))</p> <p>\\(E_{BOA}\\): sun + atmosphere irradiance of an horizontal surface at BOA altitude (W/\\(m^2\\) or \\(W/m^2/\\mu m\\))</p> <p>\\(E_{TOA}\\): sun irradiance of an horizontal surface at TOA altitude (\\(W/m^2\\) or \\(W/m^2/\\mu m\\))</p> <p>Hot spot: configuration such that the sun is in the back of the sensor.</p> <p>LAI: Leaf Area Index</p> <p>\\(u_l\\): leaf volume density (\\(m^2\\) leaves / \\(m^3\\))</p> <p>L: radiance (\\(W/m^2/sr\\) or \\(W/m^2/sr/\\mu m)\\)</p> <p>LAD: Leaf Angle Distribution</p> <p>LUT: Look Up Table. It stores values in a table.</p> <p>M: exitance (\\(W/m^2\\) or \\(W/m^2/\\mu m\\))</p> <p>Nadir image: image acquired at the vertical (i.e., view zenith angle is 0).</p> <p>NDVI: Normalized Difference Vegetation Index</p> <p>NIR: Near infrared</p> <p>RT: radiative transfer</p> <p>Simulation: set of input parameters that define a DART simulation.</p> <p>SIF: Sun Induced chlorophyll Fluorescence</p> <p>TIR: Thermal Infrared</p> <p>TOA: Top of Atmosphere</p> <p>UV: Ultraviolet</p> <p>VIS: Visible</p>"},{"location":"DART_functionalities_and_products/1-File_architecture/file_architecture.html","title":"File Architecture","text":"<p>DART installation: unzip the DART installation file, then install DART into a folder (e.g., D:\\DART) not directly created / managed by the Windows operating system (e.g., 'Users'). DART (see below) has 4 sub-folders: \"bin: code\", \"database: 3D objects, atmosphere,\u2026\", \"tools: scripts to run DART modules, with / without the GUI\", and \"user_data\". User_data has 3 sub-folders: \"database: user databases\", \"log_parameter: log data\", and \"simulations\" where all DART simulations can only be here). In addition, Each simulation has 2 sub-folders:</p> <ul> <li>Folder \"input\": input parameters to run a simulation: radiative mode (DART-FT, DART-RC, DART-Lux), spectral bands, Earth / Atmosphere scene: geometry and optical / temperature properties, products (images,\u2026) to simulate and store,\u2026 XML files store them: <code>directions.xml</code>, <code>maket.xml</code>, <code>object_3D.xml</code>, <code>phase.xml</code>, <code>atmosphere.xml</code>,\u2026</li> <li>Folder \"output\". It stores results (simulated landscape, DART images,\u2026) in different folders.</li> </ul> <p>Folders 'Dart', 'user_data' and 'simulation_name', and its associated sequence 'seq_LAI'.</p>"},{"location":"DART_functionalities_and_products/2-GUI/gui.html","title":"Graphical User Interface","text":"<p>Graphic User Interface of DART.</p> <p>The DART Graphic User Interface (GUI) allows one to create, edit and run DART simulations, and to process and view results (see above), using 7 sub-menus (several GUIs can be opened simultaneously):</p> <ul> <li>\"Simulations\". To create (i.e., to create files xml) and select (see below) a simulation.</li> </ul> <p></p> <ul> <li> <p>\"Parameters\":</p> <ul> <li>\"Editor properties\" (see below): to prevent / authorize the display of Earth scene elements: plots, trees, buildings,... Indeed, their display can be very time consuming if they are very numerous. <p>Editor Properties</p></li> <li>\"Validate\": Basic check of the consistency of DART input parameters.</li> <li>\"Editor\" Input of simulation parameters to create the Earth/Atmosphere scene, define products,...</li> </ul> </li> <li> <p>\"Run\" To run DART modules separately or all together.</p> </li> <li> <p>\"View\" To display the simulated 3D landscape and results (e.g., curves 1D/2D of BRF, images, etc.).</p> </li> <li> <p>\"Tools\" To process results (images, LUT,\u2026) of DART simulations to get new results (e.g., color composite).</p> </li> <li> <p>\"Language\" To select the language: English or French (not maintained).</p> </li> <li> <p>\"Console\" To display useful information during the DART run. Several display options are available.</p> </li> </ul>"},{"location":"DART_functionalities_and_products/3-Editor_of_simulation/editor_of_simulation.html","title":"Editor of Simulation","text":"<p>The menu \"Editor of simulation\" (See above) has 4 panels:</p> <ul> <li> <p>Left panel. Its tree structure is that in the xml files that store DART parameters, with a node per group of parameters. Right click on a node or sub-node to create or duplicate it; a number between brackets is the number of sub nodes.</p> </li> <li> <p>Central panel. It displays the scene that is currently created. Coordinates of the mouse are in the bottom page.</p> </li> <li> <p>Right panel. To edit the parameters of the functionality selected on the left panel.</p> </li> <li> <p>Bottom panel. It shows error and warning messages. A click leads to the place of the GUI where the issue occurs.</p> </li> </ul> <p>DART has 3 operating modes and 2 operating sub-modes that can be selected on the right panel:</p> <ul> <li>3 operating modes : 'LiDAR', 'Monte Carlo' and 'Passive RS &amp; RB' (RS: Remote sensing, RB: Radiative budget),</li> <li>2 operating sub-modes : 'Forward', 'Bi-directional' light propagation. 'Bi-directional' is idle in 'Monte Carlo'.</li> </ul> <p></p> <p></p> <p><p>DART GUI. a) Menu of mode 'Passive RS &amp; RB' and sub-mode \"Bi-directional\". b)  DART 3 modes (Passive RS &amp; RB, LiDAR, Monte Carlo) and 2 sub-modes  (Forward, Bi-directional). c) Spectral band.</p></p> <p>Spectral interval (\\(\\bar{\\lambda}\\), \\(\\Delta \\lambda\\), M). Central wavelength \\(\\bar{\\lambda}\\) . Bandwidth \\(\\Delta \\lambda\\). Spectral mode M = R (source =sun or LiDAR), T (source = Earth / atm. thermal emission) or \\(R+T\\). </p> <p>2 options for T: Planck (default; \\(W/m^2/\u00b5m/sr\\)) or Boltzmann (\\(W/m^2\\)). Optical properties are computed over \\(\\Delta \\lambda\\), possibly with \\(E_{BOA}(\\lambda)\\) weight. A right click adds intervals:</p> <ul> <li> <p>Add, remove or duplicate 1 band at a time.</p> </li> <li> <p>Add / delete N bands:</p> <ul> <li>\\([\\lambda_{min};\\:\\lambda_{max}] \\mu m\\). If \\(\\Delta \\lambda\\) is not specified, bands are adjacent: \\(\\Delta \\lambda=\\frac {\\lambda_{max} - \\lambda_{min}} {N}\\)</li> <li>\\([\\nu_{min};\\:\\nu_{max}]cm^{-1}\\). If \\(\\Delta \\nu\\) is not specified \\(\\implies \\bar{\\lambda_{i}}=\\frac {10000} {\\nu_{min} + (2i+1).\\frac {\\nu_{max}-\\nu_{min}} {2.N}}\\), \\(\\Delta \\lambda=\\frac {10000} {\\nu_{min} + (2i+1).\\frac {\\nu_{max}-\\nu_{min}} {2.N} - \\frac {\\Delta \\nu} {2}} - \\frac {10000} {\\nu_{min} + (2i+1).\\frac {\\nu_{max}-\\nu_{min}} {2.N} + \\frac {\\Delta \\nu} {2}}\\)</li> <li>\\(\\Delta \\nu\\) specified \\(\\implies\\) equally spaced \\(\\nu_{mean,i}\\) and \\(\\Delta \\nu=\\frac {\\nu_{min} - \\nu_{max}} {N}\\). \\(\\bar{\\lambda_{i}}=\\frac {\\frac {10000} {\\nu_{min}+(i+1).\\Delta\\nu} + \\frac {10000} {\\nu_{min}+i.\\Delta\\nu}} {2}\\), \\(\\Delta \\lambda = \\frac {10000} {\\nu_{min}+i.\\Delta\\nu} - \\frac {10000} {\\nu_{min}+(i+1).\\Delta\\nu}\\)</li> </ul> </li> </ul> <p> Transition TOA \\(\\Leftrightarrow\\) BOA (see below). There exists 3 atmosphere RT modes:</p> <p>BOA / TOA illumination. Input parameters are in bold red. \\(E_{TOA,\\lambda,\\Omega s} = E_{TOA,\\lambda}^{cst}.cos(\\theta s)\\). CIE model is being introduced.</p> <ul> <li>No atmosphere RT (\\(E_{BOA} = E_{TOA}\\)): the atmosphere is an interface with illumination (\\(E_{BOA}\\), SKYL) or \\(L(\\Omega^{\\downarrow})\\).</li> <li>Analytic model \\(f_{analytic}\\) (more detailed at the end of the page): it derives \\(E_{BOA}\\) from \\(E_{TOA}\\) in 'Passive RS &amp; RB', and in 'LiDAR + Solar noise'.</li> <li>Radiative transfer simulation \\(f_{RT}\\) derives \\(E_{BOA}\\) from \\(E_{TOA}\\) in 'Passive RS &amp; RB', and in 'LiDAR + Solar noise'.</li> </ul> <p> \\(E_{BOA}\\), SKYL. They can be specified only if option  is set. In the 'LiDAR mode, it is activate only if the option appears \"solar noise\" is simulated.</p> <p> 'Number of threads. Simulation time is divided by up to the number of cores of the calculator.</p> <p>'Direction input parameters'. \"Passive &amp; RB + Forward sub mode (i.e., DART-FT)\": to set viewing directions and discrete directions for tracking rays. \"Bi-directional mode (i.e., DART-LUX): to set viewing directions.</p> <p> 'Optical and temperatures properties'. To set optical and temperature properties to be assigned to scene elements.</p> <p> \"Earth Scene\". Global parameters (size, ground optical properties). Spatial resolution is only for DART-FT.</p> <p> 'Earth Scene: Plots', 'Trees', 'Urban elements' (house, small wall), 'Water surfaces' (lake, river).</p> <p> \"Earth Scene: 3D Imported Object\". To import and manage 3D objects (facets).</p> <p> 'Atmosphere':  gas and aerosol models, atmospheric geometry,...</p> <p>The analytic model \\(f_{analytic}\\) \\(E_{s,BOA,diffuse} = SKYL_{\\Delta \\lambda}.E_{BOA,\\Delta \\lambda}. E_{s,BOA,direct} = (1 \u2013 SKYL_{\\Delta \\lambda}) E_{BOA,\\Delta \\lambda}\\). DART-FT and Lux.</p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.1/radiative_parameters.html","title":"4.1 Radiative parameters identical in 'Passive RS & RB' and 'LiDAR'","text":"<p>DART parameters and products depend on the DART mode (See the chapter before). Compared to DART-FT and DART-RC, DART-Lux is often more accurate with less computer time (CT) and memory for RS products (VIS/NIR/TIR camera spectrometer, LiDAR, SIF, RB) of large and complex landscapes here, but usually needs larger CT for schematic scenes (e.g., horizontal bare ground). For RB products,it is advised only for simulating the RB of parts of the scene.</p> <p>The image at the end of the page shows radiative parameters that are identical in the 'Forward' and 'Bi-directional' sub-modes of 'Passive RS &amp; RB', and also in 'LiDAR' if solar noise is simulated. </p> <p>TOA or BOA solar illumination modes (See the chapter before):</p> <ul> <li> <p>\\(\\bar{E}_{s,TOA,\\lambda}\\) or \\(\\bar{E}_{s,BOA,\\lambda}\\): spectral solar constant from an irradiance table of a SQL database <code>Solar_constant.db</code> .</p> </li> <li> <p>\\(\\bar{E}_{TOA,\\Delta \\lambda}\\) or {\\(\\bar{E}_{BOA,\\Delta \\lambda}, SKYL_{\\Delta \\lambda}\\)}: per band \\(\\Delta \\lambda\\) (defined in GUI) (\"Solar constant\" or \"irradiance of horizontal surface\").</p> </li> <li> <p>\\(\\bar{E}_{TOA,\\lambda}\\) or {\\(\\bar{E}_{BOA,\\lambda}, SKYL_{\\lambda}\\)}: per wavelength \\(\\lambda\\) (defined by a text file) (\"Solar constant\" or \"irradiance of horizontal surface\").</p> </li> <li> <p>Radiance \\(L_{BOA, \\lambda}(\\Omega)\\). It can be pre-computed by DART.</p> </li> </ul> <p>Possibility to weight atmosphere parameters (e.g., transmittance) with \\(E_{TOA}(\\lambda)\\) and reflectance with \\(E_{BOA}(\\lambda)\\).</p> <p>Scene mean temperature. It is used to determine the equivalent wavelength in mode T (i.e., \\(L_{B}(\\lambda_{eq},T) =\\frac {\\int_{\\Delta \\lambda}L_B(\\lambda,T).d\\lambda} {\\Delta \\lambda}\\))</p> <p>Atmosphere brightness temperature \\(T_{atm}\\). Only for \"modes T and R+T without atmosphere RT\".</p> <p>Scene 3D temperature (modes T &amp; R+T). 4 methods can set scene elements temperature.</p> <p>a) Illumination.</p> <ul> <li> <p>'Forward' tracking: a preliminary simulation with an user-defined illumination (grid  + SKYL ) computes the irradiance \\(E_j\\) of any element j (facet, turbid), with temperature property \\((T_i , \\Delta T_i)\\). Then, \\(T_j\\) is derived from \\(E_j\\) with Boltzmann's law and an histogram threshold () on {\\(E_j\\)}.</p> </li> <li> <p>'Bi-directional': during the ray tracking stage, the temperature of each interacting point is derived from its irradiance and its temperature property.</p> </li> </ul> <p>b) 3D temperature profile. A 3D matrix T(x,y,z) (per cell, from top to bottom) is imported.</p> <p>c) 1D temperature vertical profile. A 1D T(z) temperature file (per layer, from top to bottom) is imported.</p> <p>d) Extrapolation of the atmosphere temperature vertical profile.</p> <p><p>Identical illumination parameters for 'Passive RS &amp; RT' and 'LiDAR'.</p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.10/earth_scene.html","title":"4.10 The Earth scene","text":""},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.10/earth_scene.html#a-ground-surface","title":"a) Ground surface","text":"<p>Three types of scenes with a top empty layer (see below):</p> <ul> <li>Repetitive scene: (default): the DEM last line and row are replaced by its 1st line and row. The repetition of a slope is not a slope!<ul> <li>DART-FT: infinite repetition of the Earth scene, including its DEM. A ray that exits a scene through a vertical side re-renters it through its opposite vertical side. </li> <li>DART-Lux: rays propagate in a scene that is (\\(2.N_{scene \\:repetition} + 1\\)) times the user-defined scene. </li> </ul> </li> <li>Infinite slope: repetitive + continuous DEM: the last n lines and rows are modified so that last line and row altitudes are those of the scene 1st line and row to a vertical shift \\(\\Delta h_{row}\\) or \\(\\Delta h_{line}\\). The repetition of a slope is an infinite slope: simple slopes are perfectly simulated. <ul> <li>DART-FT: rays that the scene by a vertical side re-renter by its opposite vertical side with \\(\\frac{\\Delta h_{row}}{\\Delta h_{line}}\\) shift. </li> <li>DART-Lux: rays propagate in a scene that is (\\(2.N_{scene \\:repetition} + 1\\)) times the user-defined scene.</li> </ul> </li> <li>Isolated scene: there is nothing around the scene. The DEM is not modified. Rays that exit the scene through a vertical side do not re-renter it (\\(\\implies\\) no surrounding elements to induce neighboring effects). In DART-Lux, it corresponds to \\(N_{scene \\:repetition}\\) = 0.</li> </ul> <p>Note</p> <p>The \"Infinite slope\" and \"Repetitive scene\" options lead to identical scenes if there is no topography. </p> <p><p>a) Repetitive scene. b) Isolated scene. c) Infinite slope.</p></p> <p>The simulated \"ground\" scene (see below) is also characterized by:</p> <ul> <li> <p>Sub scene or scene : 3D zone where radiation is tracked. If a sub-scene is simulated, its coordinates are input.</p> </li> <li> <p>Scene horizontal dimension : \\(\\Delta X, \\Delta Y\\).</p> </li> </ul> <p>Note</p> <p>DART-FT is voxelized with user-defined cell dimensions \\(\\Delta x = \\Delta y, \\Delta z\\).</p> <ul> <li> <p>Optical and Temperature properties .</p> </li> <li> <p>DEM (Digital Elevation Model) : imported 3D object or raster image (with scene dimensions). DART vectorizes the DEM raster image with a few diagonal connection strategies ( \"Lowest difference\", \"Random\",\u2026). The DEMGenerator module () creates DEM raster images from the scene simulation menu () or menu.</p> </li> <li> <p>Coordinates : altitude, latitude, longitude; they are only to compute sun direction angles with the option \"date\".</p> </li> </ul> <p><p>Earth scene creation. The Editor's 2D display, with its x and y axes, is shown.</p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.10/earth_scene.html#b-plots","title":"b) Plots","text":"<p>Plots are surfaces or volumes with a quadrilateral (4 points) horizontal section. \"Volume\" plots have a height and a bottom side altitude. There are 5 types of plots:</p> <ul> <li>Ground: a surface (optical properties 2D_...) replaces the local ground zone of the DART scene.</li> <li>Vegetation: volume optical property + plot LAI (\\(m^2\\) leaf / \\(m^2\\) plot) or leaf volume density \\(u_f\\) (\\(m^2\\) leaf / \\(m^3\\) cell). It is a turbid medium or set of triangles with optical properties automatically derived from the volume optical property.</li> <li>Ground + Vegetation: combination of the 2 above options.</li> <li>Fluid: volume with particle optical property (3D_Flu...) + particle density (/\\(m^3\\)).</li> <li>Water: fluid + surface above it. Option not finalized. It can be created manually with Fluid option.</li> </ul> <p><p>Plot creation: options \"4 corners\" (a) and \"rectangle\" (b). \"Ground+ Vegetation\" (c) and \"Fluid\" (d) plots.</p></p> <p>Three methods to create plots:</p> <ul> <li>Input in the GUI of plot coordinates and properties (see above): mouse right click on </li> <li>Import a CoverMap (VII.5):  raster image (pixel value = index of land/fluid unit) +  text file (here, see below) that gives properties (e.g., optical properties,\u2026) per CoverMap unit. Plots are stored either in the <code>plots.xml</code> file or in a <code>plots.txt</code> file , which is usually more convenient if there are many plots.</li> <li>Import a plots.txt file (, IV.17), see below), that can have been created by the \"CoverMapImportation\" tool.</li> </ul> <p><p>Plots. a) DART editor: 2 vegetation plots.</p></p> <p><p>b) Menu for importing the CoverMap CoverMapExample.mp#</p></p> <p><p>c), stored in DART database (here). d, e) Nadir and oblique view of the 3D scene.</p></p> <p><p>Plot simulations with N layers (a: LAI =1, b: LAI=7) and 5 leaf dimensions (c). \\(\\theta_s = 30\u00b0\\)</p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.10/earth_scene.html#c-trees","title":"c) Trees","text":"<p>A DART created tree is characterized by{Tree species, Trunk + Crown: turbid cells or isocele triangles}:</p> <ul> <li>Tree species: trees of species \\(s\\in[1\\:S]\\) share properties (e.g., branches in DART created tree, optical properties, C(s) crown layers (\\(c\\in [0\\:C-1]\\)): see below, leaf / twig area density \\(u_l\\) (s), crown shape and dimensions).</li> <li>Trunk: 8 trapezoids (i.e., horizontal section = octagon), below and within the crown.</li> <li>Crown: volume (ellipsoid: 0, ellipsoid composed: 1, truncated cone: 3, trapezoid: 4, conique composed: 5).<ul> <li>Crown level c(s): relative height %h(c(s)) (level height = %h x crown height), relative \\(u_l\\) (%\\(u_l(c(s))\\), relative trunk diameter, leaf and trunk optical properties OP(c(s)), and horizontal profiles of clumping (hole volume proportion h(%r)) and \\(u_l\\) (%\\(u_l(c(s),%r)\\)): \\(u_l(c(s),%r)=%u_l(c(s),%r).u_l)\\), with %r the relative distance \"trunk - crown local radius\" (see below) \\(\\implies\\) LAI &amp; clumping vertical/horizontal profiles can be simulated.</li> </ul> </li> </ul> <p>Note</p> <p>The use of relative values is adapted to simulate trees of the same tree species with different dimensions.</p> <ul> <li> <ul> <li>Turbid crown: turbid + empty / hole cells. A turbid cell is created only if leaves occupy &gt; 50% cell volume. It can contain several leaf / twig species with specific LAI / \\(u_f\\) (\\(m^2\\) leaves / \\(m^3\\)), TAI (Twig Area Index), LAD,... Then, the leaf occupation of the cell cannot exceed 100%: leaf elements that exceed 100% are stored in other cells.</li> <li>Triangle crown: isosceles triangles (heigth =2 .base) that are defined by their area A or number. No twigs.</li> </ul> </li> </ul> <p><p>Crown. Level 0 (bottom): \\(height = 0.5 x H_{crown}\\), vertical relative \\(u_l = 0.33\\), trunk diameter = 0.75 x Diameter of Trunk below crown, horizontal profile of holes and \\(u_l\\).</p></p> <p>How to specify \\(u_l\\): www.fs.fed.us/psw/topics/urban_forestry/products/cufr_94_PP01_39.pdf. For example: \\(u_l \\approx 0.5m^{-1}\\) (no dense tree) if tree DBH=0.4m, crown heigh = 8m, crown diameter \\(\\approx 12m\\), leaf area \\(\\approx 300m^2\\).</p> <p>Three methods allow one to specify the spatial distribution, dimensions and tree species of trees:</p> <ol> <li> <p>Exact location + Exact dimensions. Text file (e.g., trees.txt in DART database) with labelled columns: Species_ID for tree species, POS_X &amp; POS_Y for location, lai for tree leaf area or leaf area density per tree, rotation per tree (see below),\u2026 Option 2) can use it. <p>Tree menu: mode. Tree presence , Mode \"Exact position + Random dimensions\"  with file that stores tree location  and zone where LAI is known , Tree crown content .</p></p> </li> <li> <p>Exact location + Random dimensions. Only labels \"Species_ID, POS_X, POS_Y\" of file 1) are used. The GUI sets other parameters (mean, \\(\\sigma\\): see below). <p>Tree trunk and crown rotations (nutation, precession, intrinsic).</p></p> </li> <li> <p>Random location + Random dimensions. Per species, trees are randomy set in disks (radius r), with probability of presence, centred on the nodes of a \\(\\Delta x/\\Delta y\\) grid over the scene (grid option), quadrilateral (zone option) or ellipse (fctdistribution option) (see below).</p> </li> </ol> <p><p>Tree menu: option \"Random position + Random dimensions. Trees are located inside disks (5m radius) centred at the nodes of a grid defined by \\(\\Delta x=\\Delta y=5m\\).</p></p> <p><p>Tree crown shapes. a) Ellipsoidal.</p></p> <p><p>Tree crown shapes b) Ellipsoid composed.</p></p> <p><p>Tree crown shapes c)Truncated cone.</p></p> <p><p>Tree crown shapes d) Trapezoid. e) Conique composed (cylinder + truncated cone).</p></p> <p><p>Tree crown shapes f) Tree crowns with 2 levels and LAI / hole vertical profiles.</p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.10/earth_scene.html#d-urban","title":"d) Urban","text":"<p>Urban surfaces (roof,...) can be \"Single face\" or \"Double faces\" (surface = 2 triangles with opposite normal vectors and specific optical properties). Houses in the same building can have the same properties (see below).</p> <p><p>Optical properties of a building with 1 house.</p></p> <p>House = 4 walls (4 top corners (x, y, z); 2 corners can be identical) + 1 roof with 4 predefined types (see below):</p> <p><p>House geometric parameters. a) Walls: 4 points (x,y,z). b) Roof type. c) \"No roof\": roof with null thickness (2 triangles). c) \"Plate roof\": roof with a depth. d) \"Classic roof\" (2 points): 2 slopes. e) \"Complex roof\" (4 points).</p></p> <ul> <li>\"No\": there is a roof with a null depth. It is defined by the wall top corners.</li> <li>\"Plate\": the roof is defined by 4 points at a height \\(\\Delta z\\) above the 4 wall top corners</li> <li>\"Classic\": the roof is defined by 2 points (x, y, z).</li> <li>\"Complex\": the roof is defined by 4 points (x, y, z).</li> </ul> <p>Elements other than houses can be created: roads (see below) and small walls.</p> <p><p>Road: juxtaposition of segments that are defined by their width and extremities.</p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.10/earth_scene.html#e-water-surfaces","title":"e) Water surfaces","text":"<p>Water volumes can be simulated (e.g., fluid plot + top specular/refractive surface). Water surfaces are opaque (see below) with possible priority on trees and vegetation plots (e.g., mangrove forests).Their horizontal projection is:</p> <ul> <li>Lake: ellipse defined by its center and its two axes along the Ox and Oy axes.</li> <li>River: specific width + segments between successive points (x,y).</li> </ul> <p>Note</p> <p>To simulate within water RT, define water plots.</p> <p><p>Water surfaces.</p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.10/earth_scene.html#f-3d-imported-object","title":"f) 3D imported object","text":"<p>DART imports 3D objects (set of groups of triangles) in obj format; cf examples in DART database (see below). It cannot edit it, but can manage its geometry (location, scale, rotation) and OP per group of triangles. Blender can edit them (export option for DART: Apply, modifiers, Write materials, Triangulate faces, Material groups, Z forward, Yup).</p> <p><p>Examples of 3D trees.</p></p> <p>1) Example of importation: cherry tree (<code>Merisier_adulte.obj</code>; in DART database)</p> <p>A 3D object can be defined as a \"DEM\", \"on top of a DEM\" or \"Independent of DEM\", with options per group :</p> <ul> <li>Scene symmetry: a 3D object that exits partly the scene can appear on the scene opposite side ().</li> <li>Ignore/Hide the 3D object when creating the scene. Option available per group of 3D object ().</li> <li>Color of the disk that represents the 3D object in the editor ().</li> <li>Transformation of all triangles of the 3D object into turbid medium (); it can be performed per group. The resulting LAI can be directly computed or specified by the user.</li> <li>Assign the same optical properties to all triangles of the 3D object ().</li> <li>\"Mono face\" or \"Double face\" (surface = 2 equal triangles with opposite normal, and possibly different OPs .</li> </ul> <p><p>Import and display of a 3D object.</p></p> <p>2) Colors: they qare very useful for setting the material of facets in the same group of the 3D object (cf. input/dart.typ), and also to get nice 3D views (e.g., color 'Bark' for group 'Trunk' see below) </p> <p><p>Management of colors for displaying the 3D objects in the main GUI.</p></p> <p>3) Geometry: 3D object position (x, y, z), scale factor (x, y, z) and rotation (3 angles) can be specified.</p> <p><p>Management of the geometry of 3D objects.</p></p> <p>Rotations are relative to the point (0,0,0). Hence, results can differ a lot depending on the 3D object coordinates. The maket module must be run after setting thegeometry of 3D objects.</p> <p>4) Group properties Facet properties (e.g., facets with single or double face option) are identical for all groups of the 3D object or defined per group of the object. The \"display\" option shows the 3D object. A click on the group (e.g., \"Foliage \" and \"Trunk\" in see below) displays only the triangles of that group. It allows one to verify that one treats the correct group. The transformation \"Triangles \u2192 Turbid medium\" can be done for the whole 3D object or part of its groups.</p> <p><p>Management of the geometry of 3D objects. a) Menu. b) Display per user selected group.</p></p> <p>5) Transformation of triangles into turbid medium It can be useful to convert a 3D object with many facets as a volume of cells filled with turbid medium, each with:</p> <ul> <li>\\(A_{cell}\\) : automatically computed value per cell that is the area \\(A_{f,cell}\\) of facets per cell with a multiplicative factor (default value is 1), or a user-defined LAI value for the derived turbid vegetation, or a user-defined leaf area (m\u00b2).</li> <li> <p>\\(LAD_{cell}\\): \\(LAD\\) (e.g., spherical) for all cells or \\(LAD\\) per cell {\\(N\\) areas \\(A_{cell}^n\\) (SimulationProperties: \\(\\sum_{n=1}^N A_{cell}^n = A_{f,cell}\\)) + \\(N\\) elliptical \\(LADs\\) \\(g_n(\u03b8_1)=\\frac {f(\\epsilon,ALA_n)} {\\sqrt{1-\\epsilon\u00b2.cos(\u03b8_1-ALA_n)}}\\), Average Leaf Angle \\(ALA_n \\approx \\frac {(2n-1).\\pi} {4.N}\\), eccentricity \\(\\epsilon_n = 1-e^{1-N}\\).</p> </li> <li> <p>Optical property (3D_Veg_...): it is user-specified as a volume optical property (i.e., turbid medium). </p> </li> </ul> <p><p>Transforming a group of triangles into turbid medium with 1m and 0.2m resolutions.</p></p> <p>6) Fields of 3D objects DART creates fields of 3D objects (see below) using a text file that gives each object location (here) and possibly each object specific geometric transformation (here).</p> <p><p>Specification of a field of 3D objects.</p></p> <p><p>Example of transformation \"Triangle to Turbid\"</p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.10/earth_scene.html#g-dao","title":"g) DAO","text":"<p>The document <code>DAO_documentation.pdf</code> (<code>\u2026\\DART\\bin\\python_script\\DAO</code>) presents the Python API that allows one to modify or create from scratch a DART scene. In order to run it with DART, one is advised to create all other information (i.e., discrete directions, optical properties, atmosphere) with DART.</p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.11/atmosphere.html","title":"4.11 Atmosphere","text":""},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.11/atmosphere.html#1-atmosphere-geometric-and-optical-properties","title":"1) Atmosphere geometric and optical properties","text":"<p>The phase module computes gas, aerosol and cloud scattering transfer functions T({\\(\\Omega_i ,\\Delta \\Omega_i\\)}\u2192{\\(\\Omega_j ,\\Delta \\Omega_j\\)}), as integrals on \\(\\Delta \\Omega_i\\) and \\(\\Delta \\Omega_j\\). The Earth scene can contain air as plots of fluid or extrapolation of all or part of atmosphere gases. The atmosphere can be simulated without or with an atmosphere database.</p> <ul> <li>Atmosphere without database: single band</li> </ul> <p>Parameters: gas/aerosol geometry (exponential scale height \\(H_{gas}, H_{aerosol}\\)), OPs (optical depth, scattering phase function).</p> <ul> <li>Atmosphere with database (cf. IV.12):spectral<ul> <li>Gases: spectral transmittance (TRANS) of absorbing and scattering gases and gas density profile (DENS). 6 models: 'Mid-latitude summer + winter', 'Sub-Arctic summer + winter', 'Tropical', 'US standard 1976'. \\(H_2O\\) transmittance \\(T_{H_2O}\\) (table gas_model_g\\(H_2O\\)): for N \\(H_2O\\) contents (default value x 0.1 n; \\(n \\in [1\\:;\\:N]\\)).</li> <li>Aerosols: extinction coefficient vertical profile (ECP), spectral optical depth \\(\\Delta \\tau(\\lambda)\\) &amp; single scattering albedo \\(\\omega(\\lambda)\\) (gas_model_AOD) and coefficients (g1, g2, a) of 2 Henyey Greenstein scattering phase functions (HG). The term \u201cgas_model\u201d indicates 1 of the 6 gas models.</li> </ul> </li> </ul> <p>ECP: 8 aerosol models - <code>Rural V=23km &amp; V=5km</code>, <code>Maritime V=23km</code>, <code>Urban V=5km</code>, <code>Troposphere V=50km</code>, <code>Fog radiation V=0.5km</code>, <code>Fog advective V=0.2km</code>, <code>Desert V=76km</code>; V = visibility. gas_model_AOD: 48 models (i.e., the above 8 aerosol models for each of the 6 gas models). HG: 26 models - <code>Rural</code>, <code>Maritime</code>, <code>Urban</code>, <code>Ocean</code> and <code>Troposphere V=50km</code> for 4 relative humidities (RH: 0, 70, 80, 99%) + 6 models independent of humidity: <code>Fog radiation V=0.5km</code>, <code>Fog advective V=0.2km</code>, <code>Desert V=76km</code>, <code>STRT H2SO4</code>, <code>Aged Volcanic</code> and <code>MET_Dust</code>. </p> <p>There is also a \"Cloud\" model with spectrally constant ECP and scattering albedo.</p> <p>Two approaches allow one to simulate actual atmosphere conditions, for any \\(\\Delta \\lambda_{user}\\):</p> <ol> <li> <p>Import new data (Aeronet: aeronet.gsfc.nasa.gov/, ECMWF: www.ecmwf.int/,...) into atmosphere database.</p> </li> <li> <p>Automatic weighting / interpolation of the atmosphere database, using options that directly modify:</p> <ul> <li>Gas (scattering, absorbing other than \\(H_2O\\) / \\(CO_2\\)) amount: multiplicative factor on default gas profile.</li> <li>\\(H_2O\\) content, defined either as total amount, density or multiplicative factor on default \\(H_2O\\) profile. Atmosphere transmittance \\(T_{H_2O}\\:\\forall\\: \\Delta \\lambda_{use}\\) is derived from interpolation on tables of gas_model_g\\(H_2O\\).</li> <li>CO2 concentration: mixing rate (ppm).</li> <li>Aerosol optical depth: factor \\(K_{aer} \\implies \\Delta \\tau_{aer}(\\lambda) = K_{aer}.\\Delta \\tau_{aer,database}(\\lambda)\\) (\\(\\Delta \\tau_{rural,V10}=0.301, \\Delta \\tau_{rural,V23}=0.554\\))</li> <li>Temperature profile up to 10km: one sets \\(T_0\\) for \\(z' \\implies T_{atm}(z) \\rightarrow T_{atm}(z) + (T_0 - T_{atm}(z'))\\),  \\(\\forall z &lt; 10km\\).</li> </ul> </li> </ol> <p>Band model correction. Since Beer law is inaccurate in gas absorption bands \\(\\Delta \\lambda\\), we use \\(T_{atm}^{\\uparrow}(\\lambda, \\Delta \\lambda) = \\frac {T_{atm}^{\\downarrow \\uparrow}(\\lambda, \\Delta \\lambda)} {T_{atm}^{\\downarrow}(\\lambda, \\Delta \\lambda)}\\) in modes R and R+T if \\(\\lambda &gt; 3 \\mu m\\), \\(T_{atm}^{\\downarrow \\uparrow}(\\lambda, \\Delta \\lambda) = [T_{atm}^{\\downarrow}(\\lambda, \\Delta \\lambda)]^2\\).</p> <p>\\(T_{atm}^{\\downarrow \\uparrow}(\\lambda, \\Delta \\lambda)\\) is corrected if water vapor load differs from its default value in the atmosphere database:</p> <p>\\(T_{gas,abs}^{\\uparrow \\downarrow} = T_{gas,abs, database}^{\\uparrow \\downarrow}.\\frac {T_{H_20}^2} {T_{H_20,database}^2}\\) and \\(T_{H_20}=\\) linear interpolation on \\(T_{H_20,database}\\) in database <code>*_gH20</code>.</p> <p><p>The Atmosphere menu \"without database\"; only with user-defined parameters.</p></p> <p><p>The Atmosphere menu with the database.</p></p> <p><p>Selection of components of DART products (reflectance \\(\\rho\\), radiance L, irradiance E, exitance M, albedo A images) at Sensor level for 3 illumination configurations.</p> <ul> <li>a) Upward products \"j\": None (\\(L_{TOA}^{\\uparrow}\\)), pure atmosphere, Direct (d), Diffuse (h), Total (t).</li> <li>b) 3 illumination configurations: Direct (d), Diffuse (h) and Total (t).</li> <li> <p>c) Menu for selecting the different products and illumination configurations.</p> </li> <li> <p> Pre-computation of atmosphere optical properties </p> </li> </ul> <p>\\(\\rho_{TOA}(\\Omega_v)\\) and radiance \\(L_{TOA}(\\Omega_v)\\) of Earth surfaces depend on their reflectance \\(\\rho_{BOA,Earth}(\\Omega_i,\\Omega_j)\\), with \\((\\Omega_i\\in 2\\pi^{-}, \\Omega_j \\in 2\\pi^{+})\\), direct sun irradiance \\(E_{BOA,sun}(\\Omega_s)\\) and atmosphere directional radiance \\(L_{atm}^{\\downarrow}(\\Omega_i)\\) that depend on wavelength and atmosphere conditions. \\(L_{atm}^{\\downarrow}(\\Omega_i)\\) is often assumed to be isotropic and quantified by \\(SKYL(\\lambda) = \\frac {Atmosphere\\:irradiance} {Total\\:irradiance}\\).</p> <p>Atmosphere RT is computer intensive, especially with many bands. Therefore, if many simulations are run with the same atmosphere and sun direction, DART should pre-compute \\(L_{BOA}^{\\downarrow}(\\Omega_i)\\) and transfer functions (TF) that represent radiation transfer \"\\(BOA \\rightarrow MA\\)\" (i.e., \\(TF_{BOA \\rightarrow XXX}, TF_{MA \\rightarrow XXX}\\)) to a few levels xxx, in order to later simulate \\(L_{TOA}(\\Omega_v)\\) from \\(L_{BOA}(\\Omega_j)\\), with \\(\\Omega_j \\in 2\\pi^{+}\\). TFs depend only on {atmosphere, spectral bands}, and not on sun direction and Earth surface properties, conversely to \\(L_{BOA}^{\\downarrow}(\\Omega_i)\\) and \\(L_a(\\Omega_v)\\). They must be computed for the scene dimensions, spectral bands and discrete directions (within canopy cameras can be any) of the DART simulation of interest. Cell dimensions must be identical if MA layers have several cells. TFs cannot be used by DART atmosphere Monte Carlo RT.</p> <p>DART pre-computes \\(L_{BOA}^{\\downarrow}(\\Omega_i)\\) and TFs with {atmosphere RT + options , , : see below}. It stores them as 4 files:</p> <ul> <li>\\(L_{BOA,after\\:coupling}^{\\downarrow}(\\Omega_i)\\) : function of {atmosphere, \\(\\Omega_{sun}\\), N bands}. It can be simulated with {1 ground cell scene, \\(\\rho_{ground} \\approx &lt;\\rho_{scene}&gt;_{xy}\\)} to reduce computer time. DART will use it to get BOA products without atmosphere RT simulation.</li> <li>\\(L_{BOA,before\\:coupling}^{\\downarrow}(\\Omega_i)\\) : function of {atmosphere, \\(\\Omega_{sun}\\), N bands}. DART will use it with atmosphere RT simulation.}</li> <li>TFs : 2 files (\\(TF_{BOA \\rightarrow XX}, TF_{MA \\rightarrow XX}\\)): they do not depend on sun direction. They can be simulated with {flat scene, \\(\\rho_{ground} = 0\\)}. DART will use them with atmosphere RT.</li> </ul> <p><p>Pre-computation of:</p> <ul> <li> \\(L_{BOA,after\\:coupling}^{\\downarrow}(\\Omega_i)\\),</li> <li> \\(L_{BOA,before\\:coupling}^{\\downarrow}(\\Omega_i)\\),</li> <li> TFs</li> </ul> <p>a) Use of the pre-computed atmosphere radiance  \\(L_{BOA}^{\\downarrow}(\\Omega_i)= L_{BOA,after\\:coupling}(\\Omega_i)\\) Step 1: Pre-compute M radiance files {\\(L_{BOA}^{\\downarrow}(\\Omega_i)\\)}\\(_m\\) for the M configurations {atmosphere, \\(\\Omega_{sun}\\), N bands} of interest.</p> <p>Step 2: Run DART with {No atmosphere RT, \\(L_{BOA}^{\\downarrow}(\\Omega_i)\\)}. \\(L_{BOA, backscattered}^{\\downarrow}(\\Omega)\\). Being a ratio, \\(\\rho_{BOA}(\\Omega)=\\frac {\\pi.L_{BOA}^{\\uparrow}(\\Omega)} {\\int_{2\\pi^{-}} L_{BOA}^{\\downarrow}(\\Omega).cos(\\theta_i).d\\Omega_i}\\) is more accurate than \\(L_{BOA}^{\\uparrow}(\\Omega)\\) because \\(L_{BOA,backscattered}^{\\downarrow}(\\Omega)\\) can be inaccurate if \\(L_{BOA}^{\\downarrow}(\\Omega_i)\\) is not pre-computed with a the studied scene.</p> <p><p>Use of \\(L_{BOA,after\\:coupling}^{\\downarrow}(\\Omega_i).\\) \\(TF_{MA \\rightarrow XX}\\) and \\(TF_{BOA \\rightarrow XX}\\) are not used</p></p> <p>b) Use of the pre-computed atmosphere transfer functions and radiance \\(L_{BOA}^{\\downarrow}(\\Omega)= L_{BOA,before\\:coupling}^{\\downarrow}(\\Omega)\\)</p> <p>Step 1: Pre-compute \\(L_{BOA,before\\:coupling}^{\\downarrow}(\\Omega_i)\\) and TFs (\\(TF_{BOA \\rightarrow XXX}, TF_{MA \\rightarrow XXX}\\)). A 1x1 scene can be used. <p>Step 2: Run DART with {atmosphere RT, pre-computed TFs and \\(L_{BOA,before\\:coupling}^{\\downarrow}(\\Omega_i)\\)} and any surface parameters. Results are those of DART simulations with full atmosphere RT, with much shorter computer time. Slight  differences can appear if mean reflectance values are computed after being weighted by sun irradiance.</p> <p><p>Use of \\(L_{BOA,before\\:coupling}^{\\downarrow}(\\Omega_i)\\), \\(TF_{MA \\rightarrow XX}\\) and \\(TF_{BOA \\rightarrow XX}\\)</p></p> <p><p>Step 1: pre-computation of atmosphere radiance \\(L_{BOA}^{\\downarrow}(\\Omega)\\) and transfer functions TFs.</p></p> <ul> <li>Atmosphere geometry</li> </ul> <p>It has 3 levels: Earth scene (BOA), mid atmosphere MA (cell array with \\(N_{layer,MA}\\) levels) \\(\\subset [BOA\\:altitude\\:h_{MA,HA}]\\) and high atmosphere HA (\\(N_{layer,HA}\\) layers) above MA. Its parameters \\(N_{layer,MA}, N_{layer,HA}\\) and \\(h_{MA,HA}\\) are input or automatically computed. They can greatly affect the accuracy of DART products at BOA, TOA and any sensor height \\(h_{sensor}\\).</p> <ul> <li>Automatic: \\(h_{MA,HA} \\Leftrightarrow\\) Backscattered BOA irradiance = x% . Backscattered atmosphere irradiance. (\\(N_{layer,HA},N_{layer,MA}\\)) \\(\\Leftrightarrow\\) relative error on \\(1^{st}\\) order TOA upward and BOA downward irradiance \\(&lt; \\epsilon\\) for the band with larger \\(\\Delta \\tau_{atm}\\). One sets: \\(x, \\epsilon\\) and MA cell size \\((\\Delta x, \\Delta y)\\). On-going upgrade to consider temperature and extinction coefficient profiles.</li> <li>Fast: automatic mode with {x = 0.95, \\(\\epsilon\\) = 0.02, (\\(\\Delta x, \\Delta y\\)) = scene dimensions}. Usually, it is faster.</li> <li>Manual: one sets \\(h_{MA,HA}\\), \\((\\Delta x, \\Delta y, \\Delta z\\)) in MA and \\(\\Delta z\\) in HA. In a sequence, manual mode is advised if atmosphere geometry (e.g., number of atmosphere layers) must be constant.</li> </ul> <p><p>The atmosphere menu 'Geometry'.</p></p> <p>Sun TOA and BOA irradiance can be used to get band atmosphere transmittance and material optical properties:</p> <ul> <li>Atmosphere unit conversion (Shunlin Liang, Quantitative Remote Sensing of Land Surfaces p. 225, etc)</li> </ul> <p>Note</p> <p>Gas cst R = 8.3144621 J/K/Mol, \\(k = \\frac {R} {N_A}=1.38 10^{-23}\\) J/K, Avogadro number \\(N_A= 6.022*10^{23} mol./Mole\\). STP (standard T: 0\u00b0C, P:1atm)</p> <p>Uncondensed gas: 1 atm cm \\(\\equiv \\frac {Molar\\:mass\\:M} {Volume_{Mole}:22.4\\: 10^3\\:cm^3}\\:g/cm^2 \\equiv \\frac {N_A} {22.4\\: 10^3\\:cm^3}=2.69 \\:10^{19}\\:mol./cm^2\\).</p> <p>Water vapor (\\(M_{H_2O} \\approx 18g\\)): 1 cm \\(H_2O\\) precipitable = 1 \\(g/cm^2\\) liquid \\(H_2O=\\frac {N_A} {M_{H_20}} mol/cm^2 = 3.34\\:10^{22}\\:mol/cm^2\\).</p> <p>At STP: 1 atm cm \\(\\equiv \\frac {M_{H_2O}} {22.4\\: 10^3 cm^3} \\approx 0.804g/cm^2 \\Leftrightarrow 1g\\:H_2O/cm^2 \\equiv 1.244\\:10^3\\:atm\\:cm\\).</p> <p>\\(P_{saturation}P_{H_2O}^{*} \\approx 611.2e^{\\frac {17.62(T-273.15)} {T-29.97}}\\:Pa\\). Relative humidity \\(RH=\\frac {P_{H_2O}} {P_{H_2O}^{*}} \\in [0\\:1]\\). \\(T_{dew\\:point} = \\frac {c.[ln(\\frac {RH} {100}) + \\frac {b.T} {c + T}]} {b - [ln(\\frac {RH} {100}) + \\frac {b.T} {c + T}]}\\), b=18.678, c=257.14 \u00b0C</p> <p>Ideal gas law \\(\\implies\\) Vapor density: \\(\\frac {P_{H_2O}} {R.T}\\) Mole/\\(m^3\\) = \\(\\frac {P_{H_2O}} {k.T}\\) mol/\\(m^3\\)=\\(\\frac {216.67.P_{H_2O}} {T}\\:g/m^3.\\int_{\\Delta z} g/cm^3 \\implies X\\:g_{H_2O}/cm^2 \\implies 1.244\\:10^3X\\:atm\\:cm\\).</p> <p>Note</p> <p>Gas profile unit in DART file <code>atmosphere.txt</code>: atm cm/km (\\(N_2\\): \\(g/cm^2km\\)).</p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.12/inversion.html","title":"4.12 Inversion (being removed)","text":"<p>It gets maps of DART parameters (\\(\\rho_{ground}\\), LAI,\u2026) from a set of remote sensing spectral images using pre-computer LUT where M DART parameters vary (cf Module_User_Manual). These M parameters are set to:</p> <ul> <li>Fixed with the same value for all images: the parameter value is specified.</li> <li>Free: the inversion computes the parameter value.</li> <li>Not fixed - Spectral - 1, 2 or 3 parameters. It allows one to define a spectral quantity that is a linear combination of 1, 2 or 3 spectra. For example, ground reflectance can be defined a linear combination of spectra \\(\\rho_i(\\lambda)\\) with I free parameters \\(a_{\\lambda}: \\rho_{ground}(l)=\\sum_{i=1}^I a_{\\lambda}.\\rho_i(\\lambda)\\) with \\(I \\in [1\\:;\\:3]\\)</li> </ul>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.2/passive_rs_rb_dart_ft.html","title":"4.2 Passive RS & RB: Forward mode (DART-FT)","text":"<p>DART-FT (flux tracking) iteratively tracks rays on N discrete directions in a voxelized scene. (see below)  <p>Major steps of DART-FT</p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.2/passive_rs_rb_dart_ft.html#a-parameters-of-the-forward-light-mode","title":"a) Parameters of the Forward light mode","text":"<ul> <li> <p>Expert parameters <p>Advanced parameters of the 'Forward' light mode of 'Passive RS &amp; RB' (DART-FT).</p></p> <ul> <li>Number of threads: computation time is divided by up to the number of cores of the calculator.</li> <li>\\(Threshold_{propagation}\\) k: ray \\(W(\\Omega_n, \\Delta \\Omega_n)\\) with energy \\(&lt; k.\\Delta \\Omega\\) . Mean intensity (W/sr) at iteration 1 &amp; 2 is stopped.</li> <li>\\(Threshold_{Albedo\\: /\\: Thermal\\:exitance}\\): test on 2 last iterations for stopping the simulation.</li> <li>Maximum number that a ray can cross the scene. Default value is 1000.</li> <li>BOA illumination smaller mesh size \\(D \\implies \\eta= \\frac {\\Delta x.\\Delta y} {D^2.(N_{sun}+N_{atm})}\\) incident rays per BOA cell (\\(N_{atm}=0\\) if  SKLY = 0, \\(N_{sun} =0\\), if SKYL=1). \\(D_{sun} =Max(D,\\frac {D} {\\sqrt{1 - SKYL}})\\), \\(D_{atm}=Max(D,\\sqrt{\\frac {N_{horiz}^{atm\\downarrow}} {SKYL}})\\). SKYL=\\(\\frac {E_{atm}} {E_{total}}\\) with \\(N_{horiz}^{atm\\downarrow}\\) downward DART directions (\\(\\Delta \\Omega_{in}=2\\pi^{-}\\)). \\(\\eta\\) must be \\(\\geq 10^2\\) for avoiding stripes and mis-calculation of temperature in the Earth scene. Vertical side of scene 'isolated / infinite slope': \\(E_{sun,vert} = E_{sun,boa}.tan(\\theta_s)\\), with \\(N_{vert}^{atm\\downarrow}\\) directions (\\(\\Delta \\Omega_{in}=\\pi^{-}) \\implies D_{sun,vert}=Max(D,\\frac {D} {(1-SKYL).tan(\\theta_s)}\\)), \\(E_{atm, vert} = E_{atm}.\\frac {\\sum_{N_{vert}^{atm\\downarrow}}cos(\\theta .\\Delta \\Omega)} {\\pi} \\approx \\frac {E_{atm}} {2} \\implies D_{atm, vert} = D_{atm}.\\sqrt{\\frac {\\pi.N_{vert}^{atm\\downarrow}} {N_{horiz}^{atm\\downarrow}.\\sum_{N_{vert}^{atm\\downarrow}}cos(\\theta .\\Delta \\Omega)}} \\approx D_{atm}\\)</li> <li>Illumination sources spatial distribution. Default distribution is 'semi random'.</li> <li>Factor \\(N \\implies N^3\\) sub-cells (\\(\\implies\\) barycenters of scattering points per sub-cell) and \\(6N^2\\) sub-faces (\\(\\implies\\) barycenters of exit points per sub-face) per cell. N is divided per 2 at each iteration down to 1.</li> <li>Factor \\(M \\implies N^2\\) . \\(M^2\\) sub-faces per cell face (\\(\\implies\\) barycenter per sub-face)</li> <li>Surfacic sub-division S for thermal emission: at least 1 thermal emission per grid element.</li> <li>\\(K^2\\) integration points per sub-face for pre-computing thermal emission.</li> <li>Store intercepted power per direction: set for computing polarization on surfaces</li> <li>Use of barycenters on intercepting surface and sub-face: their use greatly decreases simulation time.</li> <li>Use sparse voxel acceleration: rays are not tracked through empty voxels.</li> <li>Number of triangles for acceleration in a voxel: Embree is used only in voxels with larger number of triangles</li> <li>Triangle storage method: facet 3D objects in the scene can be a clone of a reference 3D facet object.</li> <li>Use sparse voxel acceleration: acceleration technique in \"empty\" volumes.</li> <li>Minimum number of triangles inside a voxel in order to use the Embree acceleration technique.</li> </ul> </li> <li> <p>Maximal scattering order \\(N_{max}\\) (See below): maximal \\(N_{iteration}\\) for scenes only made of facets. Any scene radiative term Y (i.e., RB, \\(L(\\Omega)\\),\u2026) is extrapolated to \\(Y_{\\infty}\\) with last iteration \\(Y_{n}\\) (cf. DART Handbook): \\(Y_{\\infty} = Y_n+\\alpha_n.\\frac {e^{-\\beta_n.(n+1)}} {1-e^{-\\beta_n}}\\), assuming \\(\\Delta Y_n = Y_n - Y_{n-1} \\approx \\alpha_n.e^{-\\beta_n.n}\\) <p>DART-FT: maximal scattering order</p></p> </li> </ul> <p>Note</p> <p>Advised \\(N_{max}\\) for vegetation: 3-4 in VIS, &gt;5 in NIR, 2 in TIR (Cao et al., 2018, TGRS; Guo, Cao et al., 2019, GRSL)</p> <ul> <li>Cell dimensions (See below): They set the pixel size of DART-FT images and the voxel size of RB products of DART-FT and DART-Lux. <p>Cell dimensions</p></li> </ul>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.2/passive_rs_rb_dart_ft.html#b-radiative-budget-rb","title":"b) Radiative budget (RB)","text":"<p>RB products (; see the image below) are fluxes (i.e., thermal emission, intercepted, scattered, absorbed, exitance, SIF) in/out actual or fictive surfaces / volumes (e.g.,cell side). They are 3D RB per facet (+ derived 2D / 1D / scalar data), total and per type u of scene element. For DART created facet and turbid elements, u is predefined Here(e.g., \\(u_{ground}=2\\)). For imported 3D objects, \\(u_{facet} = 100 + material\\) (i.e., color assigneed to the group of the 3D object)and is  stored in the file <code>input/dart.typ</code>. The RB products are stored in text / binary files or NetCDF (on-going) files in \"output\\BANDn\\RADIATIVE_BUDGET\". The option \"View / Report\" reads binary RB files.</p> <p>Note</p> <p>DART-FT: RB can be per stage. Illudir: direct sun; Illudif: direct sun + sky; Iter1,..., IterX (infinite extrapolation of mean 3D/1D RB data of last stages) and Coupl if atmosphere RT. Intermediate Iter_n are present if requested. Power intercepted at iteration n-1 is scattered and absorbed at iteration n:  \\(Int^{Iter n-1} = Abs^{Iter n} + Scat^{Iter n}\\). Therefore: \\(\\xi_{cell,scat,u}^{ijk}=\\xi_{cell,abs,u}^{ijk}=\\xi_{cell,scat}^{ijk}=\\xi_{cell,abs}^{ijk}\\) =0 at Illudir and Illudif, and \\(Int^{IterX}\\) is slightly larger than \\(Abs^{IterX}+ Scat^{IterX}\\).</p> <p>Note</p> <p>The terms \"Intercepted\" and \"Scattered\" can be difficult to interpretate, conversely to \"Absorbed\". For example, \"Intercepted\" can be larger than scene irradiance if a facet intercepts several times the same photons.</p> <ul> <li> <p>3D RB:</p> <ul> <li> <p>\\(RB_{cell}: RB_{all elements in cell ijk}\\). File RadiativeBudget3D . Up to 18 terms {\\(\\xi_{cell, \\alpha}^{ijk} :\\alpha\\)=in, out, int, abs, scat, emit;\\(\\xi_{face,\\beta}^{ijk} = \\sum_{face} \\xi_{face,\\beta}^{ijk} : \\beta=in,out\\)}: \\(\\xi =\\) power \\(W\\) density or \\(\\frac {W_{cell,\\alpha} or W_{face,\\alpha}} {scene \\: irradiance}\\) that enters/ exits a cell or cell face.</p> </li> <li> <p>\\(RB_{cell,u}\\): \\(RB_{elements-of-type-u-in-cell}\\). File RadiativeBudget_3D_ Turbid for 'turbid', RadiativeBudget_3D_ Ground for 'ground' and RadiativeBudget_3D_typeNum=u for other types. Up to 4 terms: \\(\\xi_{cell,\\alpha,u}^{ijk} (\\alpha\\): int, abs, scat, emit)</p> </li> </ul> </li> </ul> <p>Warning</p> <p>With option 'Use sparse voxel acceleration': empty cells are ignored  \\(\\implies\\) in / out fluxes on their faces are null.</p> <ul> <li>Power intercepted at iteration n-1 is scattered and absorbed at iteration n:</li> </ul> <p>Note</p> <p>RB unit: % of BOA irradiance, \\(W/m^2/\\mu m\\) or \\(W/\\mu m\\). It is \\(W/m^2\\) or W only for {mode T (i.e., sources are only \"thermal\") + \"Boltzmann\" option (i.e., thermal radiation = integral over the spectrum)}. A Radiative budget tool can convert the unit of RB products. RB expressions vary with their 3D/2D/1D/scalar nature and unit:</p> <ul> <li> <p>\\(W/m^2/\\mu m\\) (\\(W/m^2\\): mode T + Boltzmann): \\(\\xi_{cell, \\alpha}^{ijk} = \\frac {W_{cell,\\alpha}} {\\Delta x.\\Delta y}\\), \\(\\xi_{cell,\\alpha,u}=\\frac {W_{cell,\\alpha,u}} {\\Delta x.\\Delta y}\\), \\(\\xi_{face,\\beta}=\\frac {W_{face,\\beta}} {\\Delta x.\\Delta y}\\). This is per scene \\(m^2\\).</p> </li> <li> <p>%:\\(\\xi_{cell, \\alpha}^{ijk} = \\frac {W_{cell, \\alpha}} {W_{\\Delta x.\\Delta y}^{BOA}}\\), \\(\\xi_{cell, \\alpha, u}^{ijk} = \\frac {W_{cell, \\alpha, u}} {W_{\\Delta x.\\Delta y}^{BOA}}\\), \\(\\xi_{face, \\beta}^{ijk} = \\frac {W_{face, \\beta}} {W_{\\Delta x.\\Delta y}^{BOA}}\\), \\(W_{\\Delta x.\\Delta y}^{BOA} = BOA\\) incident power (\\(W_{\\Delta x.\\Delta y}^{BOA, coupl}\\) if atmosphere RT) on \\(\\Delta x.\\Delta y\\).</p> </li> <li>If {Unit = %, No atm. coupling, 'Repetitive scene' mode}: \\(\\xi_{face,in}^{ijk_{max}}\\) (+Z) = 1-SKYL in Illudir and later.</li> </ul> <p>Note</p> <p>The tool \"3D radiative budget extractor\" it used \\(RB_{cell}\\) 2D (i.e., scene xy, xz, yz section) and x,y,z 1D RBs from \\(\\forall x,y,z\\).</p> <p>Warning</p> <p>\"Infinite slope\" mode: \\(\\frac {\\sum_{i,j} \\xi_{face, out}^{ijk_{max}}(+z)} {\\sum_{i,j} \\xi_{face, in}^{ijk_{max}}(+z)} \\neq\\) Albedo, conversely to \"Repetitive scene\" mode, since scene exitance  involves upward rays  that exit the scene through its vertical sides.</p> <p> RS &amp; RB products:      - Remote sensing (RS) products: BRF (reflectance) / BTF (temperature).     - Radiative budget (RB) products with indication of the folders and files that store them.     - RB and RS options: '1st scattering order (DART-FT only)' used with 'Images only' is very fast because DART only simulates \"1st order scattering for the user specified viewing directions\".</p> <ul> <li> <p>2D: \\(RB_{image} \\xi_{\\alpha}^{ij} = \\sum_k \\xi_{cell,\\alpha}^{ijk}\\) and \\(\\xi_{u,\\alpha}^{ij} = \\sum_k \\xi_{cell,u,\\alpha}\\). File <code>simulation.properties.txt</code> stores \\(\\bar{\\xi}_{\\alpha}^{ij}\\) and \\(\\bar{\\xi}_{u,\\alpha}^{ij}\\) . \\(Albedo^{ij} =1 - \\frac {\\xi_{abs}^{ij}} {W_{\\Delta x \\Delta y}^{BOA}}\\)</p> </li> <li> <p>1D:</p> <ul> <li>RadiativeBudget_profile: \\(\\bar{\\xi}_{\\alpha}(k)=\\frac {\\sum_{ij}\\xi_{cell,\\alpha}^{ijk} \\: \\forall\\:cells\\:of\\:scene\\:layer\\:k} {Number\\:of\\:cells\\:per\\:scene\\:layer}\\)</li> <li>RadiativeBudget_profile = u: \\(\\bar{\\xi}_{\\alpha,u}(k)=\\frac {\\sum_{ij}\\xi_{cell,u, \\alpha}^{ijk} \\: \\forall\\:cells\\:of\\:scene\\:layer\\:k} {Number\\:of\\:cells\\:per\\:scene\\:layer}\\) If unit is %: \\(\\sum_u \\sum_k \\bar{\\xi}_{int,u}(k)=\\sum_k \\bar{\\xi}_{int}(k)=1\\)</li> </ul> </li> <li> <p>\\(RB_u\\) per type u (RadiativeBudget Triangle): unit %: \\(\\frac {power\\:density\\:for\\:u\\:relative} {BOA\\:irradiance}=\\frac {\\sum_{ij}\\xi_{u,\\alpha}^{ij}} {\\sum_{ijk}A_{u}^{ijk}}.\\frac {\\Delta x.\\Delta y} {W_{\\Delta x.\\Delta y}^{BOA}}\\) with area \\(A_u^{ijk}\\) of element of type u in cell ijk. Unit \\(W/(m^2\\) of u): \\(\\frac {\\sum_{ij}\\xi_{u,\\alpha}^{ij}} {\\sum_{ijk}A_{u}^{ijk}}\\) (if vegetation cover: \\(\\frac {\\sum_{ij}\\xi_{u,\\alpha}^{ij}} {\\sum_{ijk}A_{u}^{ijk}}\\). LAI \\(W/m^2\\) of scene area). Unit W: \\(\\sum_f W_{f,u,\\alpha}\\).</p> </li> <li> <p>\\(RB_{facet,f}\\) per facet f (RadiativeBudget Figures): 1 line{objectName (DART-LUX), \\(\\frac {W_{f,u,\\alpha}} {A_f}.\\frac {\\Delta x.\\Delta y} {W_{\\Delta x.\\Delta y}^{BOA}}\\) % \\(\\:(\\frac {W/m^2 of facet} {W/m^2 of scene}),\\:\\:\\frac {W_{f,u,\\alpha}} {A_f}\\:W/m^2\\) of facet, or \\(W_{f,u,\\alpha}\\) in \\(W\\) per face 1 and face 2 of facet, facet area \\(A_f\\)} per facet f. DART-FT order of facets as in the binary file <code>triangles.txt</code>.DART-LUX: results grouped per scene element. Multiply by \\(\\frac{A_f}{\\Delta x \\Delta y}\\) to get the unit W/m\u00b2 of scene.</p> </li> </ul> <p>Here, the table below shows that a vegetation plot simulated as turbid medium or facets have very close RB if facets are very small. From Illudif to IterX, \\(E_{scene}\\) (cell \\(4^{top face}\\)) = constant and \\(E_{ground} (cell 0^{top face})\\) increases. \\(RB_{cell} = RB_{cell,ground} + RB_{cell,plot}\\). Note: \\(Int^{Iter n-1} = Abs^{Iter n} + Scat^{Iter n}\\) lead to \\(Int^{IterX} \\approx Abs^{IterX}+ Scat^{IterX}\\).</p> <p>WP4 illustrates also vegetation 3D RB. </p> <p><p>\\(RB_{0.56\\mu m}\\) (unit: %) of a 1 x 1 x 1m vegetation plot 25cm above ground, simulated as turbid medium (left) and facets (right). \\(Grid_{illumination}\\) \\(D=10-3m\\). \\(\\Delta x_{cell}=\\Delta y_{cell}=1m, \u2206=\\Delta z_{cell}=25cm \\implies\\) 6 layers. \\(\\theta_{sun}=30\u00b0, \\phi_{sun}=180\u00b0. \\rho_{ground}=0.38. \\rho_{leaf}=\\tau_{leaf}=0.2.\\) LAI=2. LAD: spherical. {TOA \u2192 BOA analytic model, gas: USSTD76, aerosol: Rural 23km} \\(\\implies\\) \\(E_{TOA}=1594 W/m^2/\\mu m, E_{BOA}=1347 W/m^2/\\mu m,\\) SKYL=0.294. 6 iterations.</p></p> <p>Note</p> <p>% \\(E_{ground}\\) = direct + diffuse transmitance of vegetation. Here, 3D RB =1D RB since any mock-up layer is a single cell. </p> <p><p>a) Mock-up: turbid cells. b) Direction oversampled around sun direction to simulate sun upward looking sensors</p> <p>c) Nadir image.</p> <p>d) Mock-up layer 15. Crown cell (7,37,15) \" 3D \\(RB_{\\Delta \\lambda}\\) file\" shows \\(RB_{cell}\\). Ground \\(\\xi_{int}\\)</p> <p>e) Illudir, f) Illudif.</p></p> <p>The images below show the 3D \\(RB_{0.56\\mu m}\\) of a schematic building (2 superimposed <code>buildingWindowBlock.obj</code>: 4 walls, 2 windows per wall, rooftop swimming pool). \\(E_{BOA}=1347W/m^2/\\mu m\\), SKYL=0.294, \\(\\theta_{sun}=30\u00b0, \\phi_{sun}=225\u00b0, grid_{illumination}\\) = 2mm, cell size = 5cm. Surfaces are lambertian (\\(\\rho_{roof}=\\rho_{ground}=5.77\\), \\(\\rho_{wall}=26.24\\)), apart the swimming pool that has a specular component. Below, the b) image shows RS images for 3 viewing directions (\\(\\theta_v,\\phi_v\\)): nadir (\\(\\theta_v=0\u00b0\\)), oblique (30\u00b0,135\u00b0) and sat specular (30\u00b0,45\u00b0). \\(\\rho_{pool}^{sat}\\) is maximal for the specular direction. \\(\u03c1_{surface}^{sat}\\) has a noise due to discrete cell size and llumination: e.g., \\(\\rho_{roof,nadir} \\in [5.77 5.83]\\) with \u03c1\u0304{roof,nadir}=5.77. The c) and d) images show 3D \\(RB_{facet}\\) and \\(RB_{cell}\\) for interception at direct sun illumination (i.e., Illudir), total illumination (i.e., Illudif), and infinite scattering order IterX. \\(RB_{facet}\\) is extreme for infinitesimal facets that are over / under irradiated: e.g., \\(%f_{int,IterX}^{roof}\\) reaches 1.6, but $%\\bar{f}^{roof}. \\(RB_{cell}\\) no such extreme values since cells have the same size. Windows have the same irradiance as walls, but scatter less.</p> <p>DART-FT radiative budget and remote sensing (RS) images of a schematic building. <p>a) Mock-up.</p> <p>b) RS images. 3 viewing directions \\((\\theta_v,\\phi_v)\\): nadir \\((\\theta_v=0\u00b0)\\), (30\u00b0,135\u00b0), \"specular\" (30\u00b0,45\u00b0). 3D \\(RB_{facet}\\)</p> <p>c) and \\(RB_{cell}\\) d): interception at Illudir, Illudif and IterX, and absorption and scattering at IterX.</p> <p>e) Mean radiation per bar (% triangle area). f) Ground and roof absorption images. g) Vertical sections of \\(RB_{abs}\\) with sunlit and shadowed wall</p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.2/passive_rs_rb_dart_ft.html#c-remote-sensing-rs","title":"c) Remote sensing (RS)","text":"<ul> <li>Parallel projection </li> </ul> <p>The products are images per viewing direction \\(\\Omega_V\\)  and their averages (i.e., files 'brf: reflectance', 'tapp: brightness temperature', 'radiance \\((W/m2/\u00b5m)\\)'. Image names are 'imax_VZ=yyVA=zz', with x = index, yy = zenith angle and zz = azimuth angle of \\(\\Omega_V\\) . DART-FT BOA data are in folder Bandm/Y/Itern/Image_Dart with Bandm =  folder that stores products of spectral band m, Y = BRF, Tapp or Radiance, and Itern = folder for products of iteration n. In DART-Lux, the term iteration refers to the storage of data by time or sample step. A better storage is being devised.</p> <ul> <li>Maximal zenith angle \\((\\theta_v)\\) of images: storage of images with \\(\\theta_v &lt; \\theta_{max}\\). to reduce computer memory.</li> <li>Keep non projected images: images on BOA horizontal plane.</li> <li>Sensor plane:horizontal plane images  projected in the sensor plane (see next image).</li> <li>Image per type of Earth scene element (for any satellite / sensor).</li> <li>Horizontal and Sensor plane image oversampling.</li> <li>Number of repetitive scenes: N x N duplication (only to ease image interpretation).</li> <li> <p>OrthoImages \\(L_{xy,\\Omega}^{ortho}\\) and \\(\\rho_{xy,\\Omega}^{ortho}\\) per viewing direction \\(\\Omega\\). They are derived from DART sensor images \\(L_{ij,\\Omega}^{sensor}\\) \\(\u03c1_{ijy,\\Omega}^{sensor}\\) using one of three possible projection methods (see next image):</p> <ul> <li>Energy conservation (EC). Upward orthopower \\(W_{xy,\\Omega}^{ortho} = \\sum_z W_{xyz,\\Omega}^{*}\\) with \\(W_{xyz,\\Omega}^{*} =\\)power that exits the scene column xy along \\(\\Omega\\) and reaches the sensor: \\(L_{xy,\\Omega} = \\sum_z L_{xyz,\\Omega}.\\frac {Area\\:of\\:projected\\:cells\\:xyz\\:on\\:sensor\\:plane} {Cell\\:horizontal\\:area\\:\\Delta x.\\Delta y.x.cos(\\theta)}\\); it can be very large at xy with a wall. It is only theoretical since \\(L_{xyz,\\Omega}\\) is unknown in actual configurations. Wu et al., 2019, RSE.</li> <li>Industry standard (IS), also called radiance conservation. Back tracing \"Sensor pixel (i,j) \\(\\rightarrow\\) Scene\" gives \\(M_{xyz}\\); then, \\(L_{xy,\\Omega}^{ortho}=L_{ij,\\Omega}^{sensor}.\\delta_{ij}^{nadir}\\) with \\(\\delta_{ij}^{nadir} = 1\\) if nadir transmittance \"\\(M_{xyz} \\rightarrow\\) top scene\"=1; else \\(\\delta_{ij}^{nadir}=0\\). IS images \\(\\bar{L}_{xy, \\Omega}^{ortho}\\) are equal to standard orthorectified RS images \\(\\bar{L}_{xy,\\Omega}^{standard ortho}\\) if back tracing uses enough rays per pixel.</li> <li>Reflectance conservation. \\(\\rho_{xy, \\Omega}^{ortho}= \\rho_{ij}^{sensor}\\) with the same projection method as the IS projection method.</li> </ul> </li> <li> <p>Fluid transmittance images (\\(\\frac {L_{sensor}} {L_{target}}\\)): BOA satellite and sensor inside the scene.</p> </li> <li>Spreading of rays: spread area in DART images depends on the cross area of elements from which rays come.</li> <li>Exitance \\(M_{xy}^{ortho} = \\int_{2\\pi^{+}} L_{xy, \\Omega}^{ortho}.cos(\\theta).d\\Omega\\) and albedo \\(A_{xy}^{ortho} = \\frac {M_{xy}^{ortho}} {E_{top\\:scene}}\\) ortho-images.</li> </ul> <p><p>Ortho images: a) IS: a downward vertical ray starts from the top scene until it reaches a scene element from which a ray is sent to the sensor image to get the the radiance \\(L_{xy, \\Omega}^{IS}\\) b) EC: sum of all radiance values from the column (x,y) to \\(\\Omega\\) gives \\(L_{xy, \\Omega}^{EC}\\)</p></p> <ul> <li>Non parallel projection (see below, Work Package VII.9)<ul> <li>1) Above scene, downward looking sensor. In the \"Forward\" sub-mode, the sensor must be at the 'Atmosphere-Sensor' level if atmospheric RT is simulated. A blue frame in the GUI delimits the viewed zone at the scene lower altitude. A \"Multiple-frame-camera sensor\" text file can set Satellite / airborne parameters {camera position (x,y,z), intrinsic rotation, nutation (zenith), precession (azimuth), image size (length, width)}.<ul> <li>Pushbroom (not yet in DART-Lux): one sets the flight direction (azimuth angle) and platform azimuth.</li> <li>Frame (pinhole) &amp; spherical camera: (orientation, position) + FOV or viewed zone. Camera axis orientation is defined with the \"Intrinsic ZYZ\" option (Intrinsic rotation (anti-clockwise) along camera axis, Zenith and Azimuth angles of the camera axis; https://en.wikipedia.org/wiki/Euler_angles) or \"Tait-Bryan angles\" option. If it is not defined, default camera orientation is the scene center (Dx/2, Dy/2, 0) at ground level.</li> </ul> </li> <li>2) Inside scene upward/downward camera. A ray \\(\\Omega_{BOA\\rightarrow sensor}\\) (atmosphere + direct sun; not a discrete direction) is sent per illumination grid sub-center to the sensor focal point. To get direct sun in upward images, simulate penumbra \\((\\Delta \\theta_{sun} \\approx 0.5\u00b0, \\Delta \\Omega_sun \\approx 6.8 10-5 sr\\)); then, \\(\\Omega_{BOA \\rightarrow sensor}\\) intersects the sun surface. Interpolation on discrete directions  ,... gives the atmosphere rays. Image Camera VZ=0: downward camera.</li> </ul> </li> </ul> <p><p>a) Sensor menu. Above Earth scene: b) Pushbroom menu, c) Frame camera menu and images. Inside Earth scene:</p> <p>d) Pinhole camera &amp; images</p> <p>e) Penumbra modeling</p> <p>f) Spherical camera: sphere (center O, radius OS), with an image plane tangent to it in S (here: downward looking \\((\\theta_v =0\u00b0)\\) camera with \\(\\theta_{max}\\) =180\u00b0) with Lambert azimuthal projection: point (X,Y,Z) on the sphere (except the antipode) is projected along a circular arc centered at S to a point (x,y,-1) in the plane tangent in S: https://en.wikipedia.org/wiki/Lambert_azimuthal_equal-area_projection.</p></p> <ul> <li>\\(\\theta=acos(Z), \\Phi=acos(\\frac {X} {\\sqrt{X^2 + Z^2}})\\). Case Y=0: if \\(X &gt; 0, \\Phi=0, else \\Phi=\\pi.\\) Case X=0: if Y&gt;0, \\(\\Phi=\\frac {\\pi} {2} else \\Phi=\\frac {3.\\pi} {2}\\)</li> <li>X=\\(\\frac {X} {I}.\\sqrt{1 - \\frac {u^2 + v^2} {4}}, Y=\\frac {y} {J}.\\sqrt{1 - \\frac {u^2 + v^2} {4}}, Z=\\frac {u^2+v^2} {2}-1\\), with \\(u=\\frac{\\frac {2.x} {I} -1} {\\eta}\\), \\(v=\\frac{\\frac {2.x} {J} -1} {\\eta}\\), \\(\\eta = \\frac {|sin(\\pi-\\theta_{max})|} {\\sqrt{\\frac {2} {1-cos(\\pi-\\theta_{max})}}}\\); the image has (I,J) pixels.</li> </ul>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.2/passive_rs_rb_dart_ft.html#d-sun-induced-fluorescence-sif","title":"d) Sun induced fluorescence (SIF)","text":"<p>DART, as the SCOPE model, has an imbedded Fluspect model to simulate the SIF of vegetation.</p> <p>Fluspect. It gives \\(n_{mat}\\) matrices \\(\\overline{\\overline{M}}_{ij}\\) for forward and backward SIF emission, per photosystem (PS), for excitation flux i in [400 750nm] and SIF flux j in [640 850nm] with \\(\\Delta \\lambda_i=\\Delta \\lambda_j=1nm\\) and fluxes in \\(\\mu mol\\) \\(photons/m^2/s\\). \\(Fluspect_{2017}\\) considers 2 PS (\\(\\implies\\) \\(n_{mat}\\) = 4). \\(Fluspect_{2021}\\) considers 1 combined PS (\\(\\implies\\) \\(n_{mat}\\) = 2). </p> <p>\\(\\mathcal{N}_{mol,i} \\mu mol\\) photons \\(/ m^2 / s / nm\\) (i.e., \\(N_{mol,i} =10^3 N_{mol,i} \\mu mol\\) photons / \\(m^2 / s / \\mu m\\)) in band \\(\\Delta \\lambda_i=1nm\\) incident of a leaf ceate \\(\\mathcal{N}_{mol,j}^{SIF}\\) SIF \\(\\mu mol\\) photons / \\(m^2\\) / s / nm (i.e., \\(N_{mol,j}^{SIF} =10^3 \\mathcal{N}_{mol,j}^{SIF} \\mu mol\\) photons / \\(m^2\\) / s /\\(\\mu m\\)) in band \\(\\Delta \\lambda_j = 1\\) nm: \\(\\mathcal{N}_{mol,j}^{SIF}.\\Delta \\lambda_j = \\mathcal{M}_{ij}.\\mathcal{N}_{mol,i}.\\Delta \\lambda_i\\). It implies \\(N_{mol,j}^{SIF} = \\mathcal{M}_{ij}.N_{mol,i}\\). Since leaf irradiance \\(E_i = N_{mol,i}.N_A.\\frac {h.c} {\\lambda_i}\\) and exitance \\(F_ij = N_{mol,j}^{SIF}.N_A.\\frac {h.c} {\\lambda_j}\\) in \\(W/m^2/\\mu m\\), we have: \\(F_j = M_{ij}.E_i\\) with \\(M_{ij}=\\mathcal{M}_{ij}.\\frac {\\lambda_i} {\\lambda_j}\\).</p> <p>DART. it has any number of U excitation bands \\((\\lambda_u , \\Delta \\lambda_u)\\) and V SIF bands \\((\\lambda_v , \\Delta \\lambda_v)\\) that are treated as combinations of Fluspect 1nm bands: \\(\\Delta \\lambda_v = \\sum_j \\beta_{vj}.\\Delta \\lambda_j, \\Delta \\lambda_u = \\sum_i \\alpha_{ui}.\\Delta \\lambda_i\\). The Phase module gives \\(n_{mat}\\) \"leaf\" matrices \\(\\overline{\\overline{M}}_{uv}\\) by spectral resampling the \\(n_{mat} M_{ij}\\). DART leaf SIF exitance is per PS for turbid-and facet-vegetation, for given PS fluorescence quantum yield. Spectral exitance at band v due to spectral irradiance \\(E_u (W/m^2/\\mu m)\\) at band u is: \\(\\overline{F}_v = \\overline{\\overline{M}}_{uv}.\\overline{E}_u\\). It is accurate only if the U bands cover all the SIF excitation domain, with no band overlap.</p> <p>The spectral resampling that creates \\(\\overline{\\overline{M}}_{uv}\\) from \\(\\overline{\\overline{M}}_{ij}\\) is a two successive weighted arithmetic averaging:</p> <ul> <li>Step 1: at Fluspect band \\((\\lambda_j ,\\Delta \\lambda_j)\\), irradiance \\(E_u (\\lambda_u ,\\Delta \\lambda_u : \\mu m)\\) gives: \\(F_{uj} = M_{uj}.E_u.\\Delta \\lambda_u (W/m^2/\\mu m)\\) with \\(M_{uj} = \\frac {\\sum_i \\alpha_{ui}.\\Delta \\lambda_i.M_{ij}} {\\sum_i \\alpha_{ui}.\\Delta \\lambda_i}\\)</li> <li>Step 2: at band \\((\\lambda_v , \\Delta \\lambda_v)\\), DART fluorescent exitance is \\(F_v = M_{uv}.E_u.\\Delta \\lambda_u (W/m^2/\\mu m)\\) with \\(M_{uv} = \\frac {\\sum_j \\beta_{uj}.\\Delta \\lambda_j.M_{uj}} {\\sum_j \\beta_{uj}.\\Delta \\lambda_j}\\)</li> </ul> <p>Note</p> <p>\\(M_{uv} = \\frac {\\sum_{j=1}^{n} \\sum_{i=1}^{m} M_{ij}} {m.n}\\) if bands \\(\\Delta \\lambda_u\\) and \\(\\Delta \\lambda_v\\) are integer numbers in nanometers (i.e., integer numbers of Fluspect bands).</p> <p>Warning</p> <p>Leaf irradiance \\(E_{leaf}\\) in Fluspect matrices is in \\(\\mu mol photons/m^2/s\\). Because DART fluxes are in \\(W/m^2/\\mu m\\), they are weighted by \\(\\frac {\\lambda_i} {\\lambda_j}\\). Up to DART V 1201, as up to SCOPE V 2, this factor \\(\\frac {\\lambda_i} {\\lambda_j}\\) was not used.</p> <p>DART works with:</p> <ul> <li>1 combined photosystem: use of Optipar2021 ProspectPro (see the table below). \\(E_{leaf}\\) is in \\(\\mu mol .photons/m^2/s/\\mu m\\). It is consistent with SCOPE V2.0 and later. This is the default and advised mode.</li> <li>2 photosystems: use of Optipar2017_ProspectD or Optipar2021 ProspectPro_2PS. \\(E_{leaf}\\) is in \\(W/m^2/\\mu m\\). It is consistent with SCOPE up to V2.0.</li> </ul> <p><p>Values of Optipar2021 at \\(0.4\\mu m\\) and \\(0.76\\mu m\\). K: specific absorption coefficient \\((nm^{-1})\\).</p></p> <p>Menu \"Optical and \u2026 properties\" (see below, a.): it sets if SIF is simulated and if leaf SIF yield is per triangle (file 'yieldsPerTriangle' in menu \"Optical ... properties\") or per optical property (see below, b.). Because bioclimatology (e.g., temperature) affects leaf SIF efficiency and SCOPE model considers that, SCOPE was modified to export its simulated leaf SIF efficiency relative to leaf Fluspect SIF as 2 arrays: etau\\((n, \\theta, \\phi)\\) for sun leaves and etah(n) for shade leaves, with canopy layer index n, leaf zenith angle \\(\\theta\\) and leaf azimuth angle \\(\\phi\\). DART can import etau and etah (menu \"Bio-climatic profile\": see below .c) and distributes them per optical property in \\(N_{layer}\\) layers between the minimal and maximal altitudes of the facets of S that have this optical property, whatever the presence of topography, urban elements, etc. This method can be inaccurate for large facets because the altitude of a facet is that of its centroid. The SIF optical properties of 2 sets \\(S_1\\) and \\(S_2\\) can be linked (e.g., sun / shade leaves of a same tree). Then, the \\(N_{layer}\\) layers are between the smaller and larger altitudes of the whole set {\\({S_1 , S_2}\\)}.</p> <p> Fluorescence menus and eta matrices (below)</p> <p>\\(etau = \\begin{pmatrix} a_{1,1,1} &amp; ... &amp; a_{1,1,N_{\\phi}} \\\\ ... &amp; ... &amp; ... \\\\ a_{1,N_{\\theta},1} &amp; ... &amp; a_{1,N_{theta},N_{\\phi}} \\\\ a_{n,1,1} &amp; ... &amp; a_{n,1,N_{\\phi}} \\\\ ... &amp; ... &amp; ... \\\\ a_{N_{layer},N_{\\theta},1} &amp; ... &amp; a_{N_{layer},N_{theta},N_{\\phi}} \\\\ \\end{pmatrix}\\) and  \\(etah = \\begin{pmatrix} a1 \\\\ . \\\\ . \\\\ . \\\\ a_{N_{layer}} \\\\ \\end{pmatrix}\\)</p> <p>\\(\\rightarrow\\) Photosynthesis: modeling this quantum process needs \\(E_{APAR}^{Chl}\\) in PPFD (Photosynthetic Photon Flux Density: \\(\\mu mol/m^2/s)\\): flux of moles of PAR (Photosynthetically Active Radiation: 400-700 nm) photons absorbed by Chl. Conversion factors \\(\\eta_{in} and \\eta_{abs}^{Chl}\\) \"Watt \\(\\rightarrow \\mu mole/s\\)\" for incident and Chl absorbed radiation depend on light spectral composition and hence on atmosphere and \\(\\Omega_{sun}\\) . For DART spectral bands \\(\\Delta \\lambda_i\\) with \\(PAR= \\sum_{i=1}^{I} \\Delta \\lambda_i\\) and \\(k_{abs}^{Chl}(\\lambda) = \\frac {E_{abs}^{Chl}(\\lambda)} {E_{abs}^{total}(\\lambda)}\\) (PROSPECT/FLUSPECT product):</p> <p>\\(\\eta_{in, \\Delta \\lambda_i} = \\frac {10^6} {h.c.N_A}.\\frac {\\int_{\\Delta \\lambda_i}L_B(\\lambda,T).\\lambda.d\\lambda} {\\int_{\\Delta \\lambda_i}L_B(\\lambda,T).d\\lambda}\\) (\\(\\lambda\\) in m) with \\(\\eta_{in, PAR} \\approx 4.56\\) if \\(T=5800K\\)</p> <p>\\(\\eta_{abs,\\Delta \\lambda_i}^{Chl} = \\frac {10^6} {h.c.N_A}.\\frac {\\int_{\\Delta \\lambda_i}k_{abs}^{Chl}(\\lambda).L_B(\\lambda,T).\\lambda.[1 - \\omega_{l}(\\lambda)].d\\lambda} {\\int_{\\Delta \\lambda_i}L_B(\\lambda,T).[1 - \\omega_l(\\lambda)].d\\lambda} = \\frac {N_{\\Delta \\lambda_i}(\\mu mol/m^2/s)} {E_{abs,\\Delta \\lambda_i} (W/m^2)} \\implies N_{APAR}\\:(\\mu mol/m^2/s)=\\sum_{i=1}^{I} \\eta_{abs, \\Delta \\lambda_i}^{Chl}.E_{abs, \\Delta \\lambda_i}^{total} (W/m^2)\\)</p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.3/passive_rs_rb_dart_lux.html","title":"4.3 Passive RS & RB: Bi-directionnal sub-mode (DART-Lux)","text":""},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.3/passive_rs_rb_dart_lux.html#a-bi-directional-parameters-see-next-image","title":"a) Bi-directional parameters (see next image)","text":"<ul> <li>Numbers of scattering events  and scene repetitions \\(N_{scene \\:repetitions}\\) .</li> <li>Periodic save method . Simulation result can be save every \\(\\Delta t\\) or \\(\\Delta N_{sample}\\)  Then, the term \"Itern\" indicates that the result is the \\(n^{th}\\) save storage. Setting \\(CT_{max}=0\\) or \\(N_{sample,max}=0\\) makes the save option idle.</li> <li>Target pixel size (m) .</li> <li>Maximal rending time per image and / or BRF/BTF \\(CT_{max}\\) .</li> <li>Target sample density \\(N_{samples}\\): per pixel for images . \\(N_{samples}\\) reaches \\(N_{sample,max}\\) if \\(CT_{max}\\) is large enough.</li> <li>Atmosphere RT  is \"Hybrid\" (DART-FT atmosphere RT) or \"Monte Carlo\" (atmosphere: rectangle parallelepiped with horizontal square dimension, surrounded by horizontal plane) user-defined optical and temperature properties. Its accuracy depends on the accuracyof the simulated BOA exitance  , which depends on the angular resolution and number of samples per direction of the BRF map.</li> <li>The sampler : Pure random, Sobol or Metropolis.</li> <li>The Russian roulette acceleration  and associated parameters (cut-off depth and Surviving probability).</li> <li>Radiative budget (cf.III.4.3.b): sampling grid (m), number of incident direction, ray density per point xyz.</li> </ul> <p><p>Bi-directional 'Passive RS &amp; RB', for \"Hybrid\" and \"Monte Carlo\" modeling of atmosphere RT.</p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.3/passive_rs_rb_dart_lux.html#b-remote-sensing-products","title":"b)  Remote Sensing products","text":"<p>Several major differences between DART-FT and DART-Lux are indicated below.</p> <ul> <li>The format of 3D objects is \"ply\", whereas it is \"obj\" for DART-FT.</li> <li>DART-Lux CT is proportional to the number of images to simulate, conversely to DART-FT.</li> <li>Spatial resolution. Conversely to DART-Lux, DART-FT uses a same voxel array to simulate landscapes, images and RB. Therefore, DART-Lux spatial resolution is the voxel horizontal dimension of the scene, whereas the pixel size of DART-Lux images is independent of the landscape simulation. Therefore, there is no need to re-run Maket to simulate images if we simulate DART-Lux images with different pixel sizes.</li> <li>\\(N_{discrete}\\) discrete directions. DART-FT uses them to simulate the radiative transfer, and possibly to simulate images. DART-Lux does not use discrete directions to track radiation. It onlys uses them to specify the images to simulate.</li> <li>Scene BRF. DART-FT simulates simultaneously the scene reflectance \\(\\rho_{scene}(\\Omega_v)\\) for the \\(N_{discrete}\\) directions \\(\\Omega_v\\) and derives the scene BRF (i.e., brf file) from these \\(\\rho_{scene}(\\Omega_v)\\). DART-Lux works differently: it computes sequentially each requested \\(\\rho_{scene}(\\Omega_v)\\), with computation time increasing with the number of \\(\\Omega_v\\). Therefore, if the LUT default option or the \"BRF\" product are set, a dome sensor (e.g., 90x360 orthographical detectors with \\(\\Delta \\Omega=1\u00b0\\) x \\(1\u00b0 &lt; 2.10^{-4}\\) sr), with infinite radius to capture all upward radiance from the Earth scene, simulates the scene BRF as a 90x360 map with steps \\(\\Delta \\theta=\\Delta \\phi=1\u00b0\\), and user-defined \\(N_{sample/pixel}\\) . Radiance is supposed to be isotropic within each \\(\\Delta \\Omega\\). Each pixel i of the BRF map stores a mean reflectance \\(\\rho(\\Omega_i)\\) such that \\(Albedo = E_{scene}.\\sum_i \\rho(\\Omega_i).cos(\\theta_i).\\Delta \\Omega_i\\). The DART-Lux brf file stores the \\(\\rho_{scene}(\\Omega_j)\\) of the simulated images, and the \\(\\rho_{scene}(\\Omega_k)\\) of all DART discrete and added directions \\((\\Omega_k, \\Delta \\Omega_k)\\), with \\(\\rho_{scene}(\\Omega_k)\\) being computed by resamplings the BRF map.</li> </ul> <p>BRF algorithm. In backward mode (i.e., random walk from the sensor), a direction \\(\\omega_0\\) is sampled with {directional PDF \\(p(\\omega_0)=\\frac {p(\\theta, \\phi)} {sin(\\theta)}=\\frac {p(\\theta).p(\\phi |\\theta)} {sin(\\theta)}\\) with \\(p(\\theta)=\\frac {1} {\\pi /2},\\:p(\\phi |\\theta)=\\frac {1} {2.\\pi}\\)} and a start vertex \\(q_0\\) is uniformly sampled on the scene ortho-projected surface \\(A_{ortho}(\\omega_0)\\) along \\(\\omega_0\\) with area PDF \\(p(q_0)=\\frac {1} {A_{ortho}(\\omega_0)}\\). In forward mode, a local direction is sampled according to PDF \\(p(\\omega_0)\\) at each vertex in the scene towards the hemispheric sensor. All directions sampled in \\((\\omega_0 ,\\Delta \\Omega)\\) contribute to the pixel \\(\\omega_0\\) of the BRF map.</p> <p>Note</p> <p>The simulation of additional BRF maps for added angular region and oversampled planes is being added.</p> <p><p>BRF/BTF products</p></p> <p>The image a) below illustrates image creation in the sensor plane. The image b) below illustrates the creation of the BRF map (i.e., 90 x 360 pixels) that stores directional values over 90\u00b0 x 360\u00b0. This BRF map is used to compute and store directional values in the get the brf, radiance and \\(t_{app}\\) files, according to the user-selected discrete and added directions.   a) Radiation from the scene along direction \\(\\omega_0\\) reaches the camera lens and is projected along \\(\\omega_0\\) on a virtual orthographical plane Aortho (\\(\\omega_0\\)). b) Each sensor / pixel on the regular dome sensor (constant \\((\\Delta \\theta, \\Delta \\phi)\\) per solid angle \\(\\Delta \\Omega\\), infinite radius) captures all radiation along \\((\\omega_0 ,\\Delta \\Omega)\\). c) DART discrete directions \\(\\Delta \\Omega_n(\\Delta \\theta_n ,\\Delta \\phi_n)\\).</p> <p>The last image shows the DART-Lux nadir image and BRF map of a schematic house. The default DART-Lux number of samples per pixel (i.e., 50) can be increased or decreased depending on the expected accuracy. It also shows a 2D BRF plot that results of the interpolation of data in the brf file, and a 2D BRF plot that is the projection of the BRF map. The later one is noisier.</p> <p><p>DART-Lux: nadir image, histogram and BRF. a) 20 x 20m scene. \\(\\rho_{ground}=\\rho_{house}=0.5.\\) \\(\\theta_s=30\u00b0,\\phi_{sun}=225\u00b0\\). b) BRF map: 90 rows x 60 columns. c) Image and its histogram. d) 2D BRF plots of the brf file derived from the BRF map using 500 upward diections. e) 2D BRF plot of the BRF file directly derived from the BRF map.</p></p> <p>The BRF map can be defined for any angular range \\({\\Delta\\theta, \\Delta\\phi}\\), which needs smaller computation time than for the standard range \\({\\Delta\\theta=90\u00b0 \\Delta\\phi=360\u00b0}\\). It can be also computed for sensors on a plane or and an hemispherical dome that observe a plane surface (i.e., target) defined by its dimensions (xy in meter), center (xyz in meter), normal (xyz in meter) and distance to the plane or hemispherical dome.</p> <p><p>The three modes of the BRF camera (menu: Sensor): radiance from a user-defined surface \\(\\sum\\) at altitude H, for any angular resolution and range L. Mode 1: radiance of \\(\\sum\\). Mode 2: radiance at a given distance L to the centre of \\(\\sum\\). Mode 3: radiance at any user-defined altitude L. </p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.3/passive_rs_rb_dart_lux.html#c-radiative-budget","title":"c) Radiative budget","text":"<p>Compared to DART-FT, DART-Lux has the same RB products with same file format except for RBfacet, without extrapolation and intermediate stages (Illudir, Iter_n,\u2026). The accuracy and CT of \\(RB_{scene}\\) depend on 3 parameters:</p> <ul> <li>Spatial sampling grid \\(\\Delta s\\) : 1 sample  per grid volume for volumes and 1 sample  per centroid of sub-facet (i.e., segmented facet per grid volume).  </li> <li>Number of incident directions  in addition to sun direction.   </li> <li>Ray density per direction per point xyz . It decreases Monte Carlo noise.</li> </ul> <p>Note</p> <p>DART-Lux gives RB for 1 stage (e.g., \\(RB_{illudir}\\) if \\(N_{scat} = 1\\) and no atmosphere), whereas DART-FT gives RB at all stages.This situation will be improved.</p> <p>It is more computer intensive. Its computer time CT is reduced by computing RB (Figure 24) for parallelepiped sub-zones  and/or selected elements (DART elements : house,... and/or objects  or groups of 3D objects).</p> <p><p>DART-Lux RB. a) Parameters. b) Selected zone. c) Selected DART element, 3D object or group of 3D object.</p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.4/monte_carlo.html","title":"4.4 Monte Carlo (DART-MC)","text":"<p>It is pure MC, much simpler than DART-Lux, designed to assess DART-FT accuracy. It only tracks photons in the Earth scene in mode R with few options: no atmosphere, no thermal emission,... The image below shows its specific parameters. DART-RC uses it.</p> <p><p>Monte Carlo mode.</p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.5/lidar_forward_dart_rc.html","title":"4.5 LiDAR: Forward mode (DART-RC)","text":"<p>DART-RC mode extends DART-MC mode to simulate single- and multi-pulse waveforms of urban/ natural scenes, possibly with solar signal/noise, using a unique pulse definition. It tracks so-called DART photons that have a weight (i.e., float number) to simulate the LiDAR signal with reasonable computer time with a forward MC method. DART-RC (RC = RayCarlo) \"tracking method\" combines Ray Tracking and MC methods. MC methods compute the location of the intercepted photon in turbid / fluid cells and its scattering direction. The ray tracking method gives the fraction of intercepted photons in atmosphere layers and turbid/ fluid cells, the scattered and absorbed fractions per photon interception and the photon fraction that heads to the LiDAR.</p> <p>Atmosphere: extinction coefficients are horizontally homogeneous and vertically continuous (except for treating atmosphere sphericity) with a formalism (i.e., degree 3 polynomial per atmosphere layer) that reduces computer time for deriving the location of the interaction point from the MC computed ray path optical depth.</p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.5/lidar_forward_dart_rc.html#a-single-pulse","title":"a) Single pulse","text":"<ul> <li>Pulse duration \\(\\Delta t_{pulse}\\): DART photons are emitted simultaneously. A post processing convolves them assuming that the emitted pulse is a centered Gauss function \\(A.e^{[-t^2/2.\\sigma_t^2]}\\) (see below) with half pulse duration \\(n_{\\sigma}.\\sigma_t\\). One sets \\(n_{\\sigma}\\) (), and \\(\\sigma_t\\) is defined by setting a pulse relative power x () and time \\(\\Delta t_x\\) () such that pulse amplitude equals x.A. If x = 0.5, 2\\(\\Delta t_x\\) is the \"full width at half maximum (FWHM)\" of emitted pulse.</li> </ul> <p>Note</p> <p>Any 1D distribution can be imported as the LiDAR temporal pulse using the option 'Import a pulse time file'.</p> <p><p>LiDAR Gauss pulse. Amplitude A. Standard deviation \\(\\sigma_t\\). is derived from x and \\(t_x\\).</p></p> <ul> <li> <p>Pulse energy \\(W_{pulse}\\)  (see below): \\(N_{photons,LiDAR}=\\frac {W_{pulse}} {h.\\nu}\\) monochromatic photons; Planck's constant h, frequency \\(\\nu\\).</p> </li> <li> <p>Illumination (see below):  \\(N_{photons, LiDAR}\\) being too large, \\(N_{photons,DART}\\) DART photons \\(\\approx N_{photons,input}\\) are launched to the footprint from sub-centers (i,j). Default footprint 2D energy is \\(P_l(\\beta)=\\hat{P}_{l,\\beta}.e^{\\frac {-\\beta^2} {2.s_{\\beta}^2}}\\) with \\(\\beta\\) the angular offset from the pulse central  direction. Standard deviation \\(s_{\\beta}\\) defines the cone half beam divergence \\(\\theta_{fp}\\) (i.e., within footprint angular divergence). Parameter \"Fraction of photons at LiDAR radius\" \\(\\eta=\\frac {pulse\\:energy\\:at\\:footprint\\:edge} {pulse\\:energy\\:at\\:footprint\\:center}\\). It is used to calculate the standard deviation \\(s_{\\beta}\\). Its default value is 0.368 (\\(e^{-1}\\)).</p> </li> </ul> <p>Note</p> <ul> <li>2D distributions w(i,j) can be imported as a LiDAR pulse energy image with option 'Import a pulse spatial file'.</li> <li>The ratio \\(\\frac {N_{photons,lidar}} {N_{photons,dart}}\\) is used to get results in terms of actual photons instead of dart photons.</li> <li>Results converge and become more accurate if \\(N_{photons,DART}\\) increases. The optimal value of \\(N_{photons,DART}\\) depends on the footprint size and scene complexity. For example, it can be 70~200 for TLS simulation, 1000~5000 for ALS simulation, and 100.000~1.000.000 for satellite LiDAR simulation.</li> </ul> <ul> <li> <p>Acquisition (see below): rate (1ns \\(\\implies\\) distance resolution = 15cm); higher scattering order; larger RAM for MC (box method); Filter: data stored from \\(1^{st}\\) to last non zero bins; no MC variability: same result for successive simulations.</p> </li> <li> <p>LiDAR geometry (see below):</p> <ul> <li>Lidar altitude H.</li> <li>Telescope area \\(A_t =\\pi r_t^2\\) (\\(r_t\\) = radius): used to compute solid angle from any location (x,y,z) to LiDAR.</li> <li>Zenith and azimuth angles: the LiDAR direction \\(\\overrightarrow{\\Omega}_L (\\theta_L, \\phi_L)\\). Viewing and illumination directions are equal.</li> <li>Lidar footprint position (x,y): center of footprint and ground FOV at BOA level.</li> <li>Footprint and FOV sizes: angles or radii at BOA level. The beam width at the laser generator 'exit gate' is \\(d_l\\). 2D energy distribution is kept along the cone path while the footprint radius \\(r_{fp}\\) increases; \\(r_{fp} =R.tan(\\theta_{fp}) + \\frac {d_l} {2}\\) with R the sensor-to-target range. \\(d_l\\) is usually negligible for airborne and space LiDAR, conversely to TLS. The FOV radius is \\(r_{FOV} =R.tan(\\theta_{FOV} + \\frac {r_t} {2}\\) with R the sensor-to-target range, rt the radii of LiDAR telescope.</li> <li>Height above / below scene minimal altitude: photons are stored for the interval \\([z_0 - H_1 , z_0 + H_2]\\).</li> </ul> </li> </ul> <p><p>Single pulse menu. a) LiDAR mode. b) Energy time distribution. c) Energy spatial distribution. d) Acquisition. e) LiDAR geometry. f) Footprint and FOV ellipses: \\(r_{\\parallel,fp}=H.\\frac {tan(\\theta_{fp})} {cos^2(\\theta_L)}\\), \\(r_{\\perp,fp}=H.\\frac {tan(\\theta_{fp})} {cos(\\theta_L)}\\); \\(r_{\\parallel,FOV}=\\frac {H.\\frac {tan(\\theta_{fp})} {cos(\\theta_L)} + r_t} {cos(\\theta_L)}\\), \\(r_{\\perp,FOV}=H.\\frac {tan(\\theta_{FOV})} {cos(\\theta_L)} + r_t\\)</p></p> <ul> <li> <p>Single-pulse waveform products (see below) images and text files</p> <ul> <li>Photons images: ground image (2D distribution of photons intercepted by the ground), BOA incident pulse, BOA LiDAR image in the plane perpendicular to the viewing direction, and reflectance image. <p>Lidar single-pulse products.</p></li> <li>Convolved waveform:<ul> <li><code>pulse.txt</code> (here): time pulse function \\(A.e^{-t^2/2.\\sigma_t^2}\\) used to convolve the LiDAR DART waveform.</li> <li>LIDAR_DART_wave.txt (<code>LIDAR_DART_wave_1stOrder.txt</code>) (here): (1st-order) not convolved waveform. 4 columns: bin, time, length, number of photons.</li> <li>LIDAR_CONVOLVED_wave.txt (LIDAR_CONVOLVED_wave_1stOrder.txt) (here): (1st-order) convolved waveform. 2 columns (time, number of photons).</li> </ul> </li> <li>Photon Information (here): \\((x_{lidar}, y_{lidar}), R_f, R_{FOV}, q_{lidar}, f_{lidar}\\), ground path length and bin number, bin duration, \\(s_t\\), number of \\(s_t\\) in the pulse, pulse length, number of bins in the pulse, pulse itself. Allow a 3D view of photon interactions in \u201cView \\(\\rightarrow\\) LiDAR \\(\\rightarrow\\) mono pulse\u201d.</li> <li><code>stat_illumination_MC0.txt</code> (here): statistics of illumination per spectral band.</li> </ul> </li> </ul>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.5/lidar_forward_dart_rc.html#b-multiple-pulse","title":"b) Multiple pulse","text":"<p>Three modes are possible: Waveform, Photon counting and Discrete Return (see below).</p> <p><p>DART \"multiple pulse\" mode.</p></p> <p>The acquisition grid (see below) is an irregular grid defined by an imported file (<code>Lidar_files/Swath_ALS.txt</code>) that sets the characteristics of each pulse, or a regular grid with the following input of parameters:</p> <ol> <li>Start point and end point of the central axis of the swath region,</li> <li>Position of the ground control point and LiDAR viewing direction for that point,</li> <li>Grid mesh along the azimuth and range directions.</li> </ol> <p>A waveform is simulated per grid node with a viewing direction defined by the telescope and pushbroom scan line (i.e., same azimuth view direction for all nodes on a same line). This energy per bin can be converted into discrete return and photon counting data through specific approaches.</p> <ul> <li>Lidar parameters (see below): as \"Single pulse\" option, except that \"Lidar direction\" changes per swath node.</li> </ul> <p><p>a) Lidar \"multiple pulse+ ALS mode\" swath menu. b) Scan grid.</p></p> <ul> <li>Multiple-pulse waveform products (See below): images and text files<ul> <li>Images that show all pulses.</li> <li><code>LIDAR_IMAGE_panel.txt</code> (here): multi-pulse geometry information, which is used as ancillary file for DART LiDAR viewer (view \\(\\rightarrow\\) LiDAR \\(\\rightarrow\\) multi pulse).</li> <li><code>LIDAR_IMAGE_FILE.binary</code> (here): the simulated multi-pulse waveforms.</li> <li><code>LIDAR_IMAGE_STATUS.txt</code> (here): positions of key bytes in <code>LIDAR_IMAGE_FILE.binary</code> file. It is updated simultaneously with the binary file.</li> </ul> </li> </ul> <p><p>Menu of lidar multi-pulse waveform products</p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.5/lidar_forward_dart_rc.html#c-discrete-points-point-cloud","title":"c) Discrete points: point cloud","text":"<p>Two methods (See below) can derive a point cloud (industrial format), with 5 intensity products, from DART waveform binary files using Gaussian Decomposition (GD).</p> <p><p>DART calculation of LiDAR point cloud and export in LAS format.</p></p> <ol> <li> <p>DART external process (script <code>DART2LAS.py</code> based on laspy library): it converts a DART LiDAR multi-pulse output file to a LAS File:</p> <ul> <li>inputFile: <code>LiDAR_IMAGE_FILE.binary</code>.</li> <li>outputFile: output LAS file with format LAS1.3 point cloud point type 1 or 4. If type 4 waveform is selected, a <code>*wdp</code> file is also generated to store the waveform. The reading of type 4 is supported by the latest version of Cloudcompare (www.danielgm.net/cc/; Girardeau-Montaut, 2011) in Windows system.</li> <li>g: type: float: set a fixed digital gain for the amplitude \\(\\rightarrow\\) volts conversion. If this option is not set, the python file will read through <code>LiDAR_IMAGE_FILE.binary</code> and find the maximum amplitude of all the waveforms and normalize it to integer range 0-127.</li> <li>t: type: int: output intensity format type. 1: Peak amplitude of gaussian profile. 2: Integration of decomposed gaussian profile (default). 3: Sigma of gaussian profile (integer value of s (unit: number of acquisition bins)).</li> <li>w: if \u201c-w\u201d is set, LAS1.3 type 4 (waveform format) will be generated. Otherwise, the script only stores the decomposed points in a simple format (LAS1.3 type 4)</li> </ul> </li> <li> <p>DART internal processing: it is advised if the storage of the waveforms used to get the cloud point needs too much computer volume, which may be the case for TLS simulation. It uses 3 parameters:</p> <ul> <li>Minimum apparent reflectance \\(\\rho_{min}\\) : a point is not be recorded if its apparent reflectance \\(\\rho &lt; \\rho_{min}\\) .</li> <li>Number of points per pulse.</li> <li>Output intensity value type: 1 or all of 5 intensity products (cf. below).</li> </ul> </li> </ol> <p>Points are stored in the file <code>DetectedPoints.txt</code> (here). Its header (1st row) gives the data format. It eases its reading in Excel and CloudCompare (use option 'skip lines 1' and 'extract scalar field names from 1st line').</p> <p>Theoretical Background of Gaussian Decomposition (GD)</p> <p>GD derives N points from waveforms. The received power is: \\(P_r(t)=\\sum_{i=1}^N \\hat{P}_i.e^{- \\frac {(t-t_i)^2} {2s_{p,i}^2}}\\) (1) with \\(s_{p,i} = \\sqrt{s_s^2+s_i^2}\\) (2) the standard deviation per Gaussian echo at time \\(t_i\\), with the time-gated peak amplitude: \\(\\hat{P}_i = \\frac {\\sigma_i} {C_{cal}.R_i^4.s_{p,i}}\\) (2) \\(\\sigma_i\\) is the total cross section of a Gaussian cluster of scatterers at distance \\(R_i\\).</p> <p>\\(s_i\\) represents signal broadening due to the observed medium (e.g., cluster of leaves or surface that is oblique relative to the LiDAR direction), and \\(s_s\\) represents signal broadening due to the pulse duration. \\(s_s\\) is an instrument-specific constant unless each transmitted pulse temporal profile is known (Mallet and Bretar, 2009). \\(s_{p,i} \\approx s_s\\) if \\(s_s \\gg s_i\\) (very small footprint compared to the corresponding distance of the pulse duration). Hence, GD distinction of different targets depends on target size, surface angle, gap size, and acquisition frequency.</p> <p>\\(C_{cal} = \\frac {4.\\pi .\\beta_t^2} {\\eta .D_r^2.\\hat{S}.s_s}\\) (3) is a calibration constant, with \\(\\eta\\) the product of system and atmospheric transmission factors. Wagner et al. (2006) consider that the backscatter cross section of scatterers with an effective cross section \\(A_s\\) and a bi-conical reflectance factor \\(\\rho\\) for the LiDAR direction is: \\(\\sigma = \\frac {4.\\pi} {\\Omega}.\\rho .A_s\\) (4) with \\(\\Omega\\) the solid angle of the cone where scattered intensity (W/sr) is assumed to be uniiform. For echo i, we have: \\(\\sigma_i = \\frac {4\\pi}.\\rho_i.A_{s,i}\\) (5).</p> <p>An apparent bi-conical reflectance factor \\(\\rho_{a,i}\\) of the cluster of scatterers at distance \\(R_i\\) is defined for a theoretical surface \\(A_{foot,i}=\\frac {\\pi R_i^2 \\beta_t^2} {4}\\) (neglecting \\(d_l\\)) equal to the footprint area at a distance \\(R_i\\) along the pulse direction: \\(\\sigma_i = \\frac {4\\pi} {\\Omega}.\\rho_{a,i}.A_{foot,i}\\) (6). Conversely to Wagner et al. (2006), scattered radiance, and not intensity, is assumed to be isotropic. Hence, for a backscattered power \\(P_{r,i}\\), the power entering a receiver of area \\(A_t\\) is \\(\\frac {P_{r,i}} {\\pi}.\\frac {A_t} {R_i^2}\\) and not \\(\\frac {P_{r,i}} {\\Omega}.\\frac {A_t} {R_i^2}\\). Hence, the expression of \\(\\sigma_i\\) in Eq. 7 is modified: \\(\\sigma_i =4.\\rho_{a,i}.A_{s,i} =\\pi .\\rho_{a,i}.R_i^2.\\beta_t^2\\) (7)</p> <ul> <li> <p>The 5 tyes of \"intensity\" products</p> <ul> <li> <p>1) Peak Amplitude \\(\\hat{P}_i\\) (without GD). It is determined using a fast method (i.e., zero-crossing).</p> </li> <li> <p>2) Fitted Peak Amplitude \\(\\hat{P}_i\\) (with GD). ti , \\(\\hat{P}_i\\) and \\(s_{p,i}\\) are computed with non-linear least-square minimization and curve-fitting (Newville et al., 2016).</p> </li> <li>3) Standard Deviation \\(s_{p,i}\\) (with GD) (unit: number of bins).</li> <li>4) Total return power \\(P_i\\) (with GD): \\(P_i = \\int \\hat{P}_i.e^{- \\frac {(t-t_i)^2} {2s_{p,i}^2}}dt = \\sqrt{2\\pi}.\\hat{P}_i.s_{p,i}\\) (8) (Milenkovi\u0107 et al., 2017).</li> <li>5) Apparent reflectance \\(\\rho_{a,i}\\) (with GD). The combination of Eq. (3) and Eq. (9) gives \\(\\sigma_i\\) as a function of \\(P_i\\): \\(\\sigma_i = \\frac {P_i.C_{cal}.R_i^4} {\\sqrt{2\\pi}}\\) (9). Eq. (8) and Eq. (10) lead to \\(\\rho_{a,i}=\\frac {P_i.C_{cal}.R_i^2} {\\pi \\sqrt{2\\pi}.\\beta_t^2}\\) (10). Using Eq. (4). \\(\\rho_{a,i}\\) can be written as a ratio of transmitted and received powers: \\(\\rho_{a,i}=\\frac {\\pi} {\\Delta \\Omega_i.\\eta}.\\frac {P_i} {P_t}\\) (11) with \\(P_t=\\sqrt{2\\pi}.\\hat{S}.s_s\\) the total pulse power, and \\(\\Delta \\Omega_i=\\frac {D_r^2.\\pi} {4.R_i^2}\\) the solid angle from target i to receiver of diameter \\(D_r\\) at distance \\(R_i\\).</li> </ul> </li> </ul> <p>Computation of \\(P_i =\\sqrt{2\\pi}.\\hat{P}_i.s_{p,i}\\) i \u22c5sp,i requires \\(\\hat{P}_i\\) and \\(s_{p,i}\\), except if \\(s_s \\gg s_i\\) . Present LiDAR devices do not give \\(\\hat{P}_i\\) and \\(s_{p,i}\\). They only give quantities often called \"intensity\" with various definitions. Hence, an accurate calculation of \\(\\rho_{a,i}\\) requires to record (Brown et al., 2005) or process (Wagner, 2010) the complete waveform with GD. Some discrete-return LiDAR devices give a \"reflectance\" product by fitting an \"intensity\" output with reference targets with different reflectance values (10%, 20%,\u2026) at various distances. The online waveform processing of Riegl devices (Pfennigbauer et al., 2009, 2010) may provide the complete information without recording the waveforms, but the details of the method remain unpublished.</p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.5/lidar_forward_dart_rc.html#d-photon-counting","title":"d) Photon counting","text":"<p>The method (Yin et al, 2016) implemented in DART internal processing is used to derive a photon counting data. It uses 3 parameters of single-photon detector:</p> <ul> <li>Quantum efficiency \\(P_Q\\): the probability to detect a photon that reaches the detector.</li> <li>Detector dead time \\(t_{dead}\\) : the period needed by the detector to recover from a detection event, before another photon can be detected.</li> <li>Dark count rate \\(f_{dark}\\): the detector\u2019s thermal noise count rate without any light source. The file DetectedPoints.txt (here) stores photon counts. Its header (1st row) gives the data format. It eases its reading in Excel and CloudCompare (use option 'skip lines 1' and 'extract scalar field names from 1st line').</li> </ul>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.5/lidar_forward_dart_rc.html#e-tls","title":"e) TLS","text":"<p>A TLS single-pulse simulation is defined by TLS location (see below, a.). The waveform storage range is defined by the reference point location and range around it (see below b.).</p> <p>For TLS multi-pulse simulation, apart from the above parameters, TLS swath (see below c.) is defined the viewing direction (target \\(\\rightarrow\\) LiDAR), angular (zenith and azimuth) range and resolution.</p> <p> <p>TLS mode. a) LiDAR position; b) measured range; c) swath.</p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.5/lidar_forward_dart_rc.html#f-solar-noise","title":"f) Solar noise","text":"<p>3 options: \"Only Lidar\", \"Only solar noise\" and \"Lidar with Solar noise\". Solar noise is a constant, simulated with DART flux tracking method, including several iterations, in the Earth scene.</p> <p>In single-pulse mode, the solar noise is defaulted simulated by pinhole camera configuration that mimics the lidar sensor. In multi-pulse mode, airborne configuration should select the pushbroom camera. If solar noise is simulated, we get:</p> <ul> <li>Scene reflectance / radiance images (i.e., \"flux tracking mode) due to sun flux only.</li> <li>1 image / node of the swath grid \"ima_camera_lidar_SN_i_j_VZ=000_1_VA=270_0\". Index i is grid line (i.e., azimuth) number of the swath region, from the start point to end point. Index j is grid column number (i.e., range) of the swath region, from the left to right view.</li> <li><code>Solar_noise.txt</code> (here): i, j, average sun radiance \\((W/m^2/sr/\\mu m)\\), Solar power received by LiDAR (W), Solar energy per bin (J), Number of sun photons per bin.</li> <li><code>rad0.txt</code> (here): average sun radiances of nodes.</li> </ul>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.6/lidar_bidirectional_dart_lux.html","title":"4.6 LiDAR: Bi-directional sub-mode (DART-Lux LiDAR)","text":"<p>DART-Lux LiDAR uses DART-RC input parameters and not DART-Lux input parameters. It gives most DART-RC products (waveform/discrete return/photon counting) for any instrumental (terrestrial / satellite / airborne,...) and environmental (vegetation/urban/mountain/atmosphere/3D object/turbid/facet) configurations.</p> <ul> <li> <p>Single-pulse waveform products</p> <ul> <li>Waveform (same as DART-RC): <code>pulse.txt</code> (here), <code>LIDAR_DART_wave.txt</code> (<code>LIDAR_DART_wave_1stOrder.txt</code>) (here), <code>LIDAR_CONVOLVED_wave.txt</code> (<code>LIDAR_CONVOLVED_wave_1stOrder.txt</code>) (here).</li> <li>Photons image:<ul> <li>ima_camera_lidar_i_j.mp#: number of returned photons projected at LiDAR location; i and j the grid line (i.e., azimuth) and column (i.e., range) of lidar pulses (i = j = 0 for single pulse).</li> <li>ima_camera_lidar_i_j_bin=k.mp#: the number of returned laser photons at k bin.</li> </ul> </li> </ul> </li> <li> <p>Multi-pulse waveform products (same as DART-RC) <code>LIDAR_IMAGE_panel.txt</code> (here), <code>LIDAR_IMAGE_FILE.binary</code> (here), <code>LIDAR_IMAGE_STATUS.txt</code> (here).</p> </li> <li>Multi-pulse discrete return / photon counting products (same as DART-RC): <code>DetectedPoints.txt</code> (here, here)</li> <li>Solar noise products<ul> <li><code>Solar_noise.txt</code> (same as DART-RC) (here): i, j, average sun radiance \\((W/m^2/sr/\\mu m)\\), LiDAR signal due to sun only (W), LiDAR signal per bin (J), Number of sun photons per bin.</li> <li><code>rad0.txt</code> (same as DART-RC) (here): average sun radiances of nodes.</li> <li>Solar image: ima_camera_SN_i_j.mp#: the number of returned solar photons projected at the LiDAR position.</li> </ul> </li> </ul>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.7/earth_scene_products.html","title":"4.7 Earth scene products","text":"<p>DART simulates several scene products (i.e., non radiometric products) (Figure 35): </p> <ul> <li>\"Triangle area products\" : triangle area (total and per type of triangle), per cell in the Earth scene. </li> <li>\"LAI (leaf a rea index)\" : 1D profile and 3D distribution (x,y,z) in the Earth scene.</li> <li>\"Triangle ground cover products\" : ground cover (total and per triangle type), per Earth scene cell.</li> <li>\"3D object (obj file) : it cconsists of all fates in the DART simulated scene.</li> <li>\"DSM\" : xy distribution of scene local maximal altitude, as raster image and/or 3D object (*.obj).</li> </ul> <p><p>Earth scene (i.e., Market) optional products of DART-FT and DART-LUX.</p></p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.8/directions_of_rays.html","title":"4.8 Direction of rays","text":"<p>DART-FT and DART-RC track radiation along discrete that sub-divide the \\(4\\pi\\) space and contribute to RT modeling, and virtual directions only to give scene with a very low computer cost. Each direction \\((\\Omega, \\Delta \\Omega)\\) crosses the center of gravity of its solid angle \\(\\Delta \\Omega\\). The 'Direction' module (see the menu image below) creates these directions. It does not create sun direction; \\(\\Delta \\Omega_{sun}=0\\) (incident radiance files use: \\(cos(\\theta_{sun}).\\Delta \\Omega_{sun}=0.1\\)), except if \"Sun penumbra\" is simulated (\\(\\Delta \\Omega_{sun} \\approx7 10^{-5}\\) sr). DART-Lux uses these directions only to set the viewing directions of the simulated images and of the terms of the brf/btf file that is derived from the 90\u00b0x360\u00b0 BRF/BTF map. The 'Direction' module has a number of options:</p> <p><p>Menu Direction. Convention: 'Viewing angle': \\(\\theta_s \\in [0\u00b0 90\u00b0[\\). 'Downward angle': \\(\\theta_s \\in ]90\u00b0 180\u00b0]\\).</p></p> <ul> <li>Number of directions \\((\\Omega, \\Delta \\Omega)\\) that sample the \\(4\\pi\\) space with \\(\\Delta \\Omega \\approx cst\\) except the vertical up and down direction</li> <li>Sun angles or date: sun angles \\((\\theta_{sun}, \\phi_{sun})\\) are input or derived from time (date, time zone,...) and scene location, with NOAA sun calculator (www.esrl.noaa.gov/gmd/grad/solcalc).</li> </ul> <p></p> <ul> <li> <p>Automatic addition of sun related directions (cf. DART Handbook for \"VIS/TIR hot spot\" theory):</p> <ul> <li>\"Upward sun region (hot spot)\": adds \\(N_{up}\\) directions in a region \\(\\Delta \\Omega_{region}\\) around the hot spot.</li> <li>\"Downward sun region\": adds \\(N_{down}\\) directions in a region \\(\\Delta \\Omega_{region}\\) around the sun direction.</li> <li>\"Sun (hot spot) and Perpendicular sun plane\": adds virtual directions that sample these planes with a step \\(\\Delta \\theta\\).</li> <li>\"Perpendicular sun plane\": adds directions along the perpendicular sun plane with a step \\(\\Delta \\theta\\).</li> </ul> </li> <li> <p>Mode expert: number of angular sectors to store \\(W_{int}(\\Omega)\\) used to simulate scattering in next DART_FT iteration.</p> </li> <li>Add user defined directions (<code>right click</code> on \"Direction input parameters\": see below). Images are created or not.<ol> <li>Single direction (virtual in DART-FT): directions defined by {zenith \\(\\theta\\), azimuth \\(\\phi\\)} or {satellite coordinates (lat, lon, altitude) + solid angle with rectangle \\((\\Delta \\theta, \\Delta \\phi)\\) or square \\((\\Delta \\Omega or (\\Delta \\theta, \\Delta \\phi)\\)) shape.</li> <li>Oversampled plane (virtual in DART-FT): adds directions in a vertical plane \\(\\Phi\\). Step \\(\\Delta \\theta\\) and solid angle \\(\\Delta \\omega\\).</li> <li>Region: non virtual directions sample an angular region (e.g., hot spot). It is defined by:<ul> <li>Central direction: {zenith / azimuth angles} or {satellite + scene locations (latitude, longitude, altitude)</li> <li>Angular shape: it can be rectangle \\((\\Delta \\theta, \\Delta \\phi)\\) or square \\((\\Delta \\Omega or \\Delta \\theta or \\Delta \\phi)\\)</li> </ul> </li> <li>Secondary source of distant illumination: to simulate an additional source of illumination.</li> </ol> </li> </ul> <p><p>Menu Direction. Convention: 'Viewing angle': \\(\\theta_s\\) \\(\\epsilon\\) [0\u00b0 90\u00b0[. 'Downward angle': \\(\\theta_s\\) \\(\\epsilon\\)  ]90\u00b0 180\u00b0]</p> <p></p> <p><p>Addition of direction. a) Single direction. b) Oversampled plane. c) Angular region. d) 3D plot of directions. e) 2D and 3D plots of \\(\\rho_{scene}(\\Omega)\\) with hot spot \\((\\theta_s=30\u00b0, \\phi_s=45\u00b0)\\). Crosses show DART discrete directions. d) \\(\\rho(\\Omega)\\) on top of a).</p></p> <p><p>DART-FT automatic approximation with discrete directions.</p></p> <p>A target (area \\(A_t\\), normal \\(\\overline{\\Omega}\\), radiance \\(L_t(\\overline{\\Omega}_v)\\)) gives radiance \\(L_p(\\overline{\\Omega}_v)\\) at DART pixel (area \\(A_p\\)). Its projection on pixel is \\(A_{p,t}\\). Its cross section along \\(\\overline{\\Omega}\\) is \\(A_t.|\\overline{\\Omega}_t.\\overline{\\Omega}_v|=A_{p,t}.cos(\\theta_v)\\). Then: \\(L_p(\\overline{\\Omega}_v) = L_t(\\overline{\\Omega}_v).\\frac {A_t.\\overline{\\Omega}_t.\\overline{\\Omega}_v.\\Delta \\Omega_v} {A_p.\\int_{\\Delta \\Omega}cos(\\theta_v).d\\Omega_v}=L_t(\\overline{\\Omega}_v).\\frac {A_{p,t}.cos(\\theta_v).\\Delta \\Omega_v} {A_p.\\int_{\\Delta \\Omega}cos(\\theta_v).d\\Omega_v}\\). If \\(A_{pt}=A_p:L_p(\\overline{\\Omega}_v) = L_t(\\overline{\\Omega}_v)\\). It is inexact for non horizontal surfaces since: \\(\\int_{\\Delta \\Omega} cos(\\theta_v).d\\Omega_v \\neq cos(\\theta_v).\\Delta \\Omega_v\\). However, energy conservation needs: \\(\\sum_{2\\pi} cos(\\theta_v).\\Delta \\Omega_v = \\pi\\). Hence, a normalization is applied to the non virtual downward directions the solid angla of which crosses the target plane.</p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.9/optical_and_temperature_properties.html","title":"4.9 Optical and Temperatures properties","text":"<p>Any surface (i.e., adjacent facets) and volume (i.e., material inside a closed surface made of facets) has an optical property (OP) and a temperature property. There are 2 types of facets:</p> <ul> <li>\"double face\" option: each face of the facet has a specific OP and temperature property, or</li> <li>\"single face\" option: the facet upper face (i.e., positive normal) has an optical property and the other face is opaque (i.e., lost energy) except in DEM facets where it is transparent (see below).</li> </ul> <p>Several options are possible for managing OPs and temperature properties.</p> <p> On-line OP creation without importing it in OP database, by multiplying OP's terms (reflectance \\(\\rho\\),\u2026) by factors.</p> <p>Example: lambertian \\(\\rho=0.3\\) is set in the GUI by multiplying the table <code>reflect_equal_1_transm_equal_1.txt</code> by 0.3.</p> <p>To mimic part of the diffuse transmittance \\(t_{dif}\\) of DART-FT lambertian facets as a direct transmittance \\(t_{dir}\\). It reduces computer time to transmit radiation through the lambertian facets that simulate the scene.</p> <p> 3D variability of OP and temperature property: it can be mimicked using 3D temperature and / or OP multiplicative factors stored in a text file (separator: ';'. ' ', 'new line', 'tab',...) that starts from cell (0,0,0), increases y, then x, then z. The header \"Subzone\" must be used for subzones.</p> <p><p>Single (a) / Double face (b) options. Facet with normal \\(\\overrightarrow{\\Omega}_{facet}\\). Incident ray \\(\\overrightarrow{\\Omega}_{ray}\\). Rays interact with a facet only if \\(\\overline{\\Omega}_{facet}.\\overline{\\Omega}_{ray} &lt; 0 \\implies\\) the faces of the same facet never interact</p></p> <p>In addition, band OP \\((\\rho_{\\Delta \\lambda},t_{\\Delta \\lambda})\\) is a spectral integral of \\((\\rho_{\\lambda},t_{\\lambda})\\) weighted or not by BOA spectral irradiance \\(E_{BOA,\\lambda}\\):</p> <ul> <li>Mode R: \\(\\rho_{\\Delta \\lambda} = \\frac {\\int_{\\Delta \\lambda} \\rho_{\\lambda}.E_{BOA,\\lambda}.d\\lambda} {\\int_{\\Delta \\lambda} E_{BOA,\\lambda}.d\\lambda}\\), \\(t_{\\Delta \\lambda}= \\frac {\\int_{\\Delta \\lambda} t_{\\lambda}.E_{BOA,\\lambda}.d\\lambda} {\\int_{\\Delta \\lambda} E_{BOA,\\lambda}.d\\lambda}.(\\rho_{\\lambda},t_{\\lambda})\\) from SQL database <code>*.db</code> or from Prospect/Fluspect model.</li> <li>Mode T: \\(\\rho_{\\Delta \\lambda} = \\frac {\\int_{\\Delta \\lambda} \\rho_{\\lambda}.L_{B,\\lambda}.d\\lambda} {\\int_{\\Delta \\lambda} L_{B,\\lambda}.d\\lambda}\\), \\(t_{\\Delta \\lambda}= \\frac {\\int_{\\Delta \\lambda} t_{\\lambda}.L_{B,\\lambda}.d\\lambda} {\\int_{\\Delta \\lambda} L_{B,\\lambda}.d\\lambda}\\) with Planck radiance computed at mean scene temperature \\(T_{scene}\\).</li> <li>Mode T+R: \\(\\rho_{\\Delta \\lambda} = \\frac {\\int_{\\Delta \\lambda} \\rho_{\\lambda}.(\\pi.L_{B,\\lambda} + E_{BOA,\\lambda}).d\\lambda} {\\int_{\\Delta \\lambda} (\\pi.L_{B,\\lambda} + E_{BOA,\\lambda}).d\\lambda}\\), \\(t_{\\Delta \\lambda}= \\frac {\\int_{\\Delta \\lambda} t_{\\lambda}.(\\pi.L_{B,\\lambda} + E_{BOA,\\lambda}).d\\lambda} {\\int_{\\Delta \\lambda} (\\pi.L_{B,\\lambda} + E_{BOA,\\lambda}).d\\lambda}\\)</li> </ul>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.9/optical_and_temperature_properties.html#a-spectral-optical-properties-op","title":"a) Spectral optical properties (OP)","text":"<p>SQL databases (cf. 3) store OPs (e.g., <code>Lambertian_*.db</code> for surfaces). Their appear as indices (see below) in xml files.</p> <p><p>Optical properties</p></p> <p>Surface.</p> <p>A facet has a direct transmittance tdir along its normal \\(\\Omega_t\\), an isotropic transmittance \\(t_{diff}\\) and  reflectance \\(\\rho\\) isotropic or not. A flux \\(W_{in}(\\Omega_i)\\) intercepted by a facet gives: </p> <ol> <li>directly transmitted flux \\([t_{dir}]^{\\frac {1} {|\\Omega_s.\\Omega_t|}}.W_{in}\\) </li> <li>scattered flux \\((1 - [t_{dir}]^{\\frac {1} {|\\Omega_s.\\Omega_t|}}).\\rho.W_{in}\\) , and (3) transmitted diffuse flux \\((1 - [t_{dir}]^{\\frac {1} {|\\Omega_s.\\Omega_t|}}).t_{dif}.W_{in}\\). Several \"types\" of surface OP are available:</li> </ol> <p></p> <ul> <li>Lambertian: isotropic \\(\\rho_{\\lambda},t_{dif,\\lambda}\\) and \\(t_{dir,\\lambda}\\) from a database (e.g., <code>lambertian_vegetation.db</code>, <code>lambertian_mineral.db</code>), isotropic \\(\\rho_{soil,\\lambda} = f(soil,moisture,content,soil,type)\\) from the Marmit-2 model (doi.org/10.1016/j.rse.2022.112951) or isotropic \\(\\rho_{leaf,\\lambda}\\) and \\(t_{leaf,\\lambda}\\) from the Prospect / Fluspect model (doi.org/10.1016/0034-4257(90)90100-Z). This model stores \\(\\rho_{leaf,\\lambda}\\) and \\(t_{leaf,\\lambda}\\) in a table \"hc\u2026\" (i.e., index of input parameters) of database <code>ProspectVegetation.db</code>. It is run from the DART editor (tool ), from the menu \"Run / Prospect\" module in the GUI, or by setting \"Prospect module\" in \"Run / Properties\" (then, the Prospect module is run when DART is run).</li> </ul> <p>Warning</p> <p>DART-FT (old option): \\(OP_{lambertian}\\) defines \\(\u03c1_{spe}\\) with <code>specular.db</code>; cf. DART Handbook): \\(\\rho(\\Omega_s,\\Omega_t,\\Omega_v)\\) = \\(\\rho_{non-spe}(\\Omega_s,\\Omega_t,\\Omega_v)+ \\rho_{spe}(\\Psi_{nv})\\) with \\(\\rho_{spe}(\\Psi_{nv}) = A.\\rho_{Fresnel}(\\Psi_{nv}).f(\\Psi_{\\Delta \\Omega^{*},\\Delta \\Omega_n^{*}})\\) in \\(\\Delta \\Omega_n^{*}\\)= {\\(DART\\:direction \\Delta \\Omega_n \\cap \\Delta \\Omega^{*}\\) }. \\(\\rho_{spe}\\) has 4 parameters: surface refraction index and specular factor A, cone \\(\\Delta \\Omega^{*}\\) , and directional distribution \\(f(\\Psi_{\\Delta \\Omega^{*} ,\\Delta \\Omega_n^{*}})\\) of intensity in \\(\\Delta \\Omega^{*}\\). It is exact at scattering order N=1 and assumed to be due to isotropic radiation (Phase module computes \\(\\rho_{spe,hh}\\) and \\(t_{spe,hh}\\) for N&gt;1: \\(\\rho_{spe,hd}(\\Omega_n, \\Delta \\Omega_n) \\approx 2.A_{face, in-out}.r_{Fresnel}^2(\\theta_{n-local}).cos(\\theta_{n-local}).sin(\\theta_n).\\Delta \\theta_n.\\Delta \\phi_n\\); exact if option \"Flux Tracking \\(\\rightarrow\\) Store intercepted power per direction (for lambertian + specular)\" is set).</p> <p>\\(cos(\\Psi_{\\Delta \\Omega^{*},\\Delta \\Omega_n^{*}}) =sin(\\theta_{\\Delta \\Omega^{*}}).sin(\\theta_{\\Delta \\Omega_n^{*}}).cos(\\phi_{\\Delta \\Omega^{*}} - \\phi_{\\Delta \\Omega_n^{*}})+cos(\\theta_{\\Delta \\Omega^{*}}).cos(\\theta_{\\Delta \\Omega_n^{*}})\\);</p> <p>\\(f(\\Psi_{\\Delta \\Omega^{*},\\Delta \\Omega_n^{*}})=cst, \\frac {\\alpha_{in-out}^2} {4}-\\Psi_{\\Delta \\Omega^{*},\\Delta \\Omega_n^{*}}^2\\:or\\:(cos(\\Psi_{\\Delta \\Omega^{*},\\Delta \\Omega_n^{*}})^{k_{in-out}} - (cos(\\frac {\\alpha_{in-out}} {2}))^{k_{in-out}}\\)</p> <ul> <li>Hapke: from the analytical Hapke model (cf III.7.3). \\(OP_{Hapke}\\) is defined using <code>Hapke.db</code>.</li> <li>RPV: from the analytical RPV model (cf. III.7.3) . \\(OP_{RPV}\\) is defined using <code>RPV.db</code>.</li> <li>Phase extern: pre-computed \\(\\rho(\\theta_i,\\psi_i,\\theta_j,\\psi_j,\\lambda)\\) (e.g., <code>BSDF_example.txt</code>) is automatically stored in <code>phase_extern.db</code></li> <li>Specular: \\(\\rho_{spe}\\) of 3 types of media (see image g. below). DART-Lux is much simpler and efficient than DART-FT.</li> <li>Mixed: reflectance is a proportion of the above defined categories (e.g., 60% lambertian and 40% specular).</li> </ul> <p>Note</p> <p>Thermal emissivity of opaque surface is approximated by: \\(\\epsilon(\\Omega_r) = 1 - \\rho(\\Omega_{nadir},\\Omega_r)\\) instead of \\(\\epsilon(\\Omega_r) = 1 - \\rho(2\\pi^{-},\\Omega_r)\\)</p> <p>The image below shows the menus for surface  optical properties:</p> <ul> <li>Lambertian \"ground\" (see image a. below). 2 cases are shown: the OP is defined using a spectral database  (here: <code>Lambertian_mineral.db</code>) or using the Marmit model  (here: soil moisture content (SMC) = 10 and 20).</li> <li>Lambertian \"leaf\" (see image b. below). It is defined by the PROSPECT/FLUSPECT model that gives table hc19497\u2026. and fluorescence parameters.</li> <li>Mixed (see image c. below), Hapke model (see image d. below), RPV model (see image e. below), Phase extern (see image f. below).</li> <li>Specular (see image g. below): 3 types of media (smooth / rough \"Interface\", \"Thin layer\", glossy material over diffuse base). The input parameters include the refractive indices of the \"incident medium\" ni and \"transmitted medium\" \\(n_t\\), the roughness factor and optical depth \\(\\Delta \\tau\\) of the upper layer and the reflectance of the eventual base layer.</li> </ul> <p><p>Surface  optical properties. a) Lambertian \"ground\" (spectral database  (e.g., <code>Lambertian_mineral.db</code>) or Marmit model  (SMC = 10 and 20).</p> <p>b) Lambertian \"leaf\" ( \\(\\implies\\) table hc19497\u2026 &amp; fluorescence parameters from PROSPECT/FLUSPECT model).</p> <p>c) Mixed OP.</p> <p>d) Hapke.</p> <p>e) RPV.</p> <p>f) Phase extern.</p> <p>g) Specular: 3 cases.</p></p> <p>Volume</p> <ul> <li>Vegetation (see below): for leaves / twigs in turbid tree crowns and plots simulatd as turbid medium (i.e., infinite number of infinitely small facets with a LAD : IV.12). The OP is isotropic (i.e., \\(\\rho, t_{dif}, t_{dir} = 0\\)) per facet, from <code>lambertian*.db</code>  or <code>ProspectVegetation.db</code>  simulated by the ProspectFluspect model. Specular reflectance can be simulated with \\(T_{spe}(\\Omega_s,\\Omega_r)\\) at scattering order 1 and \\(T_{spe}(\\Omega_{sector},\\Omega_r)\\) at higher orders, using <code>roughness.db</code>. </li> </ul> <p><p>Volume \"Vegetation\" optical property without (left) and with (right) Prospect / Fluspect model.</p></p> <p>Thermal hot spot (THS): the THS factor \u03b1 can mimic the foliar THS (see below), but without any ground THS . Indeed, if \\(\\alpha \\neq 0\\), Tleaf locally varies as Tleaf(angle \"leaf normal, sun direction\", altitude in the canopy) (cf. DART Handbook). However, for a statistical THS similar to SAIL and SCOPE models, we can use sunlit/shaded temperatures defined per temperature property or SCOPE 1D temperature profiles of sunlit and shaded leaves. Leaf clumping in turbid volumes is simulated with an analytical method .</p> <p>Note</p> <p>A turbid volume can be converted to facets with the same OP as \"Turbid vegetation\". It corresponds to a \"quasi turbid medium\" if facets are very small, numerous and have the same LAD as the turbid medium.</p> <p><p>Thermal hot spot with factor a=0, 0.4, 2.</p></p> <p>Turbid plot. LAI=3. \\(\\rho_{ground}=0\\). \\(T_{ground}=0K\\). \\(T_{leaf} \\in [290, 310K]\\)</p> <ul> <li>Fluids (air, water, soot)</li> </ul> <p>Fluid property: cross section \\(\\sigma(m^2)\\), spherical albedo \\(\\omega\\) and Rayleigh or double Henyey Greenstein phase function. Databases <code>Fluids.db</code> and <code>Fluid_gas_thermal.db</code> (gases at different temperatures). Fluid volume: N types of particles with N specific densities and fluid OPs.</p> <p></p> <p><p>\"Fluid\" optical property.</p></p> <p>Geisa database gives absorbing gas cross sections. </p>"},{"location":"DART_functionalities_and_products/4-Radiative_modes_sub_modes/4.9/optical_and_temperature_properties.html#b-temperature-properties","title":"b) Temperature properties","text":"<p>DART cannot simulate exactly the scene 3D temperature because it does not simulate the scene energy budget. It can use several methods to assign a more or less accurate temperature locally or to scene elements (see below):</p> <ul> <li>Illumination: the temperature of each scene element j is derived from its temperature property {\\({T_{mean,i},\\Delta T_i}\\)} and its short wave irradiance \\(E_j\\) that DART computes using the sun direction, a user defined short wave SKYL and the parameter \"Smaller mesh size D of BOA irradiance sources\" to compute \\(E_j\\) ; smaller D lead to most accurate \\(E_j\\) (i.e., temperature) and larger computer time. Conversely to DART-Lux (MC bi-directional mode), DART-FT (forward mode) uses an histogram threshold on \\(E_j\\) values because its illumination is discrete.</li> <li>3D matrix or 1D temperature vertical profile, possibly computed by an energy budget model. Their spatial sampling is equal to the size of the DART cell (voxel) size.</li> <li>From extrapolated atmosphere profile.</li> </ul> <p><p>Methods to set the scene 3D temperature.a) Illumination.</p></p> <p><p>b) 3D and 1D temperature vertical profile.</p></p> <p><p>c) From extrapolated atmosphere profile.</p></p> <p>The images below illustrates how to define a temperature property {\\(T_{mean,i}, \\Delta T_i\\)}, called \"T_mineral\". A property can override an eventual 3D temperature matrix . The temperature of scene element j with temperature property {\\(T_{mean,i}, \\Delta T_i\\)} is derived from its short wave irradiance \\(E_j: T_j=\\sqrt[4]{A_i.E_j+B_i}\\) with \\(A_i=\\frac {T_{max,i}^4 - T_{min,i}^4} {E_{max,i}-E_{min,i}},\\;B_i=\\frac {T_{min,i}^4.E_{max,i}-T_{max,i}^4.E_{min,i}} {E_{max,i}-E_{min,i}}\\). It ensures that the most (least) irridiated elements with temperature property i get \\(T_{mean,i} + \\frac {\\Delta T_i} {2}(T_{mean,i}-\\frac {\\Delta T_i} {2})\\). The temperature can be the same on the 2 faces of the facet , which is useful for leaves, conversely to thick elements such as walls. The temperature of the elements of type i, can be reokaced by the calues of a 3D temperature matrix , by specified sunlit and shaded temperatures , or by values of 1D SCOPE temperature profiles .</p> <p><p>Temperature property {\\(T_{mean,i}, \\Delta T_i\\)}. It can override an eventual 3D temperature matrix.</p></p>"},{"location":"DART_functionalities_and_products/5-Run_menu/5.1/dart_basic_modules.html","title":"5.1 DART basic modules","text":"<p>Menu \"Run\" runs / stops DART modules / sequences with three major options:</p> <ul> <li>\"DART\": it runs sequentially the 4 main modules 'Direction', 'Phase', 'Maket' and 'Dart'.</li> <li>\"Terminate\": it stops a DART simulation that is running.</li> <li>\"Properties\": it specifies the modules that \"DART\" will run sequentially.</li> <li>\"LUT properties\": it sets the results to store into the LUT (SQL database), in a single DART run</li> </ul>"},{"location":"DART_functionalities_and_products/5-Run_menu/5.1/dart_basic_modules.html#dart-basic-modules","title":"DART basic modules","text":"<ul> <li>Direction. It subdivides \\(4\\pi\\) into N discrete directions \\((\\Omega, \\Delta \\Omega)\\), adds directions, etc.</li> <li>Phase. It computes optical (scattering function,\u2026) / geometrical (LAD: IV.2,\u2026) terms.</li> <li>Maket. It creates the Earth (<code>maket.txt</code>) and atmosphere (<code>atmosphereMaket.txt</code>) scenes.</li> <li>Dart. It simulates radiative transfer in the \"Earth - Atmosphere\" system.</li> <li>Atmosphere creation. It creates the atmosphere scene without running \"Maket\" module.</li> <li>Vegetation (also run in DART GUI): land cover / fluid map import into Earth scene (cf. VII.5).</li> <li> <p>Hapke. It fits \\(\\rho(\\Omega_v,\\Omega_v)\\) (e.g., text file '\\(\\theta_s, \\theta_v, \\phi_s-\\phi_v, \\rho(\\Omega_v)\\)', \\(\\theta_s \\in [90\u00b0\\:180\u00b0]\\)) to Hapke model and stores coefficients in <code>External_Hapke_Parameters_0.txt</code>. Its can decrease computer time for scenes as {trees + bushes}:  </p> <ol> <li>Simulate \\(\\rho_{bush}(\\Omega)\\) with resolution \\(\\Delta r=0.1m\\).</li> <li>Fit \\(\\rho_{bush}(\\Omega)\\) with Hapke model \\(\\rho_{b,H}(\\Omega)\\).</li> <li>Simulate \\(\\rho_{scene}\\){\\(\\Delta r=1m, \\rho_{ground}(\\Omega) = \\rho_{b,H}(\\Omega)\\)}.</li> </ol> </li> <li> <p>Prospect (Jacquemoud, Baret, 1990) / Fluspect (Verhoef, Van der Tol, Vilfen,\u2026); also run in DART GUI. It stores leaf \\((\\rho_f, \\tau_f)\\) in tables in SQL databases <code>ProspectVegetation.db</code> (volume) and <code>ProspectLambertian.db</code> (surface). Each table corresponds to specific leaf parameters {\\(N, \\alpha_{Chl}, \\alpha_{Car}, \\alpha_{brown}, \\alpha_{H_2O}, \\alpha_{dry\\:matter}, \\alpha_{carbon\\:dry\\:matter}, \\alpha_{nitrogen\\:dry\\:matter}, \\alpha_{violaxanthin},\\) \\(\\alpha_{zeaxanthin}, \\alpha_{anthocyanin}\\)} whose name is set using a \"FileHash\".</p> </li> <li>DEMGenerator. Sequences and the GUI () can run it. As other DART raster images, a DEM image is made of 2 files: a file (extension: mp#) that stores the altitudes, as double float numbers, and a header file (extension: mpr) that stores the characteristics of the <code>*.mp#</code> file. This module has 5 options: <ol> <li>Importation of DEM that is a raw (no header) binary (double or float) raster map that stores pixel altitudes (h00, h01, h02,\u2026). Its numbers of lines and columns must be equal to those of the current DART scene.</li> <li>DEM creation: (DX, DY, \\(\\Delta x, \\Delta z\\)) of the scene. The maket module can export it as a 3D object, using 2 triangles per DART cell. 5 types of DEM: 0: Horizontal (1 param.: height). 1: Generalized valley (7 param.) to create slopes, valleys,\u2026. 2: Concave profile (no param.), 3: Gauss bell (5 param.). 4: Gauss bell + Concave profile (1 param.: height) 5: Sinusoid along x axis (height + number of patterns).</li> <li>DEM creation using points (x,y,z) within the scene and stored in a text file with spaces as separators, </li> <li>DEM spatial resampling to current simulation resolution and dimensions. DEM pixel size is derived from its spatial extent (i.e., \\(CoordBounds=x_{min}\\:y_{min}\\:x_{max}\\:y_{max}\\)) and numbers of lines and rows (i.e., \\(Size=N_{lig}.N_{row}\\)).</li> <li>Rotation of an existing DEM: 90\u00b0, 180\u00b0, 270\u00b0.</li> </ol> </li> </ul> <p><p>a) DEMGenerator: scaling, creation, ASCII conversion, rotation, raster importation.</p></p> <p><p>b) Gauss bell creation.</p></p> <p><p>Generalized valley:Parameters and examples. Slope angles have priority over plateau heights.</p></p>"},{"location":"DART_functionalities_and_products/5-Run_menu/5.2/the_lut.html","title":"5.2 The LUT","text":"<p>The LUT (i.e., SQL database) can store most non image 'radiometric products': scene BOA / TOA radiance \\(L_{scene}(\\Omega_v)\\), reflectance \\(\\rho_{scene}(\\Omega_v)\\) or brightness temperature \\(T_{B,scene}(\\Omega_v)\\), irradiance,\u2026 Data can be displayed and exported. The option \"LUT creation\" and the data to store are set in the menu \"Run / LUT Properties\" for a single simulation and in the menu \"Sequence Launcher / \u2026 / Preferences / LUT Generation\" for a sequence of simulations. (see below). In these menus, if the the LUT's option \"Store only for added directions\" is unset, the LUT stores {\\(L_{scene}(\\Omega_v), \\rho_{scene}(\\Omega_v)\\) / \\(T_{B,scene}(\\Omega_v)\\)} for \\(\\Omega_v\\) in \\(\\Delta \\Omega_v=90\u00b0*360\u00b0\\). The option \"Store only for the angular range\" sets bounds for \\(\\Omega_v\\). DART-FT always computes {\\(L_{scene}(\\Omega_v), \\rho_{scene}(\\Omega_v)\\) / \\(T_{B,scene}(\\Omega_v)\\)} whatever LUT options, conversely to DART-Lux that computes them if it is a selected DART-Lux product or if required in the LUT, presently with 1\u00b0 angular steps over 90\u00b0x360\u00b0. It can greatly increase DART-Lux computer time for scenes with very few pixels.</p> <p><p>LUT: a) creation for a simulation.</p></p> <p><p>LUT:b) a sequence of simulations.</p></p> <p><p>c) data to store.</p></p> <p> To store or not the LUT</p> <p> To store radiance \\(L_{scene}(\\Omega_v), \\rho_{scene}(\\Omega_v)\\) / \\(T_{B,scene}(\\Omega_v)\\).</p> <p> Selection of data to store</p> <p> To store products per type of scene element</p> <p> To store results only for added directions.</p> <p> To store \\(L_{scene}(\\Omega_v), \\rho_{scene}(\\Omega_v)\\) / \\(T_{B,scene}(\\Omega_v)\\) only for \\(\\Delta \\Omega_v\\)</p> <p> To store Earth scene parameters calculated by the Maket module.</p>"},{"location":"DART_functionalities_and_products/5-Run_menu/5.3/sequencer_module.html","title":"5.3 Sequencer module","text":"<p>The Sequencer module creates, edits and runs a sequence of N simulations, each one being a copy of the root simulation, where J parameters \\(M_j\\) , called \"variable parameters\", vary. A text file (e.g., <code>seq_W.xml</code>), stored at the level of the \"output\" folder of the root simulation indicates the \\(M_{j,k}\\) values, with \\(k \\in [1\\:K_j]\\), of the J parameters \\(M_j\\).</p> <p>To save time (CT) and hard disk memory (SSHD), DART only copies into the N simulations the files that differ from those in the root simulation (i.e., the unchanged files are read in the root simulation). WP1.B in section VII.1 illustrates the Sequencer module for the case {\\(M1 =\\overline{\\lambda}\\), \\(M2 =\\Delta \\lambda\\)}.</p> <p>Warning</p> <p>A spectral sequence (i.e., variable parameter = spectral band) must only be run with a mono-band root simulation.</p> <ol> <li> <p>Create sequence (<code>*.xml</code>): each Mj is defined as \"enumerate\" (list: \\(M_{j,o}, M_{j,1},\u2026)\\) or \"arithmetic\" (\\(M_{j,o}, step\\: M_{j,k+1} - M_{j,k}\\)) that can be input as a csv file (1 line / \\(M_j\\) : ). All \\(M_j\\) can be in a same group (\\(\\implies\\) they vary together: N= K) or several groups (\\(\\implies\\) they vary independently; if the J \\(M_j\\) are in J groups: \\(N=\\prod_{j=1}^{J} K_j\\)).</p> <ul> <li>Example: to study crop reflectance change with LAI and wavelength. One can set a group with Mo =LAI defined as {\\(LAI_0, LAI_1,\u2026\\)} or {\\(LAI_0, \\Delta LAI\\)} and a group with \\(M1 =\\overline{\\lambda}\\) and \\(M2 =\\Delta \\lambda\\) that are enumerate or arithmetic.</li> <li>Options (i.e., menu \"Preferences\"): 3 major options are possible when creating or editing a sequence:<ul> <li>Processes and threads to run: to reduce computer time, do not run useless processes and run M simulations in parallel, with \\(M.N_{threads\\:per\\:simulation} &lt;\\) number of available threads.</li> <li>Delete process file: to reduce SSHD, selected result files are automatically deleted, possibly only keeping the LUT.</li> <li>LUT: as for a single simulation, a LUT (SQL database) can be created with specific data.</li> </ul> </li> </ul> </li> <li> <p>Edit sequence: edits a sequence of simulations (e.g., add, edit or delete parameters that vary).</p> </li> <li> <p>Prepare and run sequence:</p> <ul> <li>Creates launcher file (e.g., <code>seq_W_Launcher.xml</code>): N simulations with status \"TO PROCESS\" and specific parameters.</li> <li>Creates and runs sequentially the N simulations. The status of a successfull simulation becomes \"PROCESSED\". The sequence starts at once if default option \"Auto launch\" is set.</li> </ul> </li> <li> <p>Start/Continue sequence: starts the sequence with the launcher created by \"Prepare sequence\" or resumes the sequence if it failed (i.e., status of the simulation \\(\\neq\\) \"PROCESSED\") or was stopped with the \"Stop sequence\" icon. The status of the DART modules to run can be changed before continuing the sequence.</p> </li> </ol>"},{"location":"DART_functionalities_and_products/5-Run_menu/5.4/python_scripts.html","title":"5.4 Python scripts to run DART","text":"<p>DART modules can be run from its GUI and with Linux and Windows command lines (e.g., here). For example, to run the Python script <code>prepareLaunchSequence.bat</code> with sequence \"seq_name\", use with the command line:</p> <pre><code>prepareLaunchSequence.batseq_name.xmlseq_name_Launcher.xml\n</code></pre> <p>Scripts have 1 argument (e.g., myTest/simu in DART_LOCAL/simulations/myTest/simu). Only \"dart-sequence\" script has a \\(2^{nd}\\) one: <code>sequence.xml</code> file without full path. Script file extension: <code>.sh</code> for Linux and <code>.bat</code> for Windows.</p> <ul> <li> <p>Linux</p> </li> <li> <p>Scripts must be run with a Bash (Bourne Again Shell) shell that is present in (all?) linux installation. To check if you are using a Bash shell, just open a terminal window and type: <code>echo $SHELL</code>. You are using bash you should get the following line output: /bin/bash.</p> </li> <li>To run a script using bash type: </li> </ul> <pre><code>bash &lt;your_script_name&gt; &lt;arguments&gt;\n</code></pre> <ul> <li> <p>Windows</p> </li> <li> <p>Scripts (cf. examples in this chapter) must be run from the Windows command line interpreter. They use 3 environment variables that are defined in the <code>USERPROFILE\\DART\\dartrc.bat</code> file that the installer creates automatically, with <code>USERPROFILE = C:\\Users\\&lt;username&gt;</code> in recent Windows versions.</p> </li> <li>To run a script: Open a command line interpreter (<code>cmd.exe</code>), go into <code>DART HOME\\tools\\windows</code> folder and type the script with its argument(s) (e.g.,<code>dart-directions.bat myTest/test1</code>).</li> </ul> <p><p>Linux/Windows scripts to run DART modules and their arguments. They are in the \"tools\" folder.</p></p>"},{"location":"DART_functionalities_and_products/6-View_menu/6.1/view_scene_2d_3d.html","title":"6.1 View scene 3D and 2D","text":"<p>The 3D and 2D scene viewers (see below) display the scene. The 2D scene viewer is only for DART-FT. It has options:</p> <ul> <li>Display scene sections xy, yz and xz, with show (cell right click) of cell coordinates, LAI, cell name (e.g. crown), triangle indices, phase function name and 3D data (e.g., temperature, radiation budget terms \\(f_{scat}, f_{up},\u2026\\)) if a 3D_Radiative_Budget file is set with \"Add\" button (), with possibility to save 2D displays views.</li> <li>Create and backup masks. It allows one to compute statistical results on part of the scene.</li> </ul> <p><p>Scene 3D and 2D views.</p></p>"},{"location":"DART_functionalities_and_products/6-View_menu/6.2/view_image.html","title":"6.2 View image","text":"<p>This menu displays images (ILWIS format: {binary file <code>*.mp#</code> + image information (number of rows,\u2026) in text file <code>*.mpr</code>}, either in current simulation () or anywhere else (). It has 4 panels (see below):</p> <ol> <li>Spectral bands: the spectral bands that are defined in the current simulation.</li> <li>Simulation type: radiance and/or reflectance (mode R) or brightness temperature \\(T_B\\) (mode T or R+T), possibly at 3 altitudes: TOA, Sensor and BOA. BRF stands for BOA reflectance and \\(T_{app}\\) for BOA brightness temperature.</li> <li> <p>Iterations: the iterations of the DART simulation:</p> <ul> <li>\"Order1\": images that correspond to exact order 1 scattering</li> <li>\"Iter1\" to Iter \": iterations of the DART simulatio</li> <li>\"IterX\": extrapolated DART iteration, before the Earth - Atmosphere radiative coupling.</li> <li>\"Coupl\": images after the Earth - Atmosphere radiative coupling; only if atmosphere R.T. is simulated.</li> </ul> </li> <li> <p>Images: remote sensing images onto sensor plane. They can be orthorectified and/or projected in the horizontal plane. Image names give the view zenith (VZ) and azimuth (VA) angles. Albedo / Exitance images can be created.</p> </li> </ol> <p><p>a) Image menu.</p></p> <p><p>b) Nadir image. \\(\\rho_{ground}=\\rho_{roof}=0.5\\). Masks 'sunlit roof' and 'shadow'. : images in other folders.</p></p>"},{"location":"DART_functionalities_and_products/6-View_menu/6.3/3d_object_viewer.html","title":"6.3 3D object viewer","text":"<p>It allows one to get 3D displays of 3D objects. </p> <p></p>"},{"location":"DART_functionalities_and_products/6-View_menu/6.4/directions_3d_view.html","title":"6.4 Directions 3D view","text":"<p>DART directions are shown on the \\(4\\pi\\) sphere to check their distribution (e.g., hot spot). \\(L_{scene}(\\Omega), \\rho_{scene}(\\Omega), T_{B,scene}(\\Omega)\\) and scattering functions SFs can be overlaid and exported as text files. For SFs, the spectral band and incident direction (DART direction, sun direction) can be selected. In the atmosphere SF plot, one can select \"gas\" or \"aerosol\".</p> <p><p>3D display of scattering functions. a) Vegetation. b) Gas \\((\\theta_{in}=0\u00b0)\\). c) Gas \\((\\theta_{in}=41\u00b0)\\). d) Aerosol (\\(\\theta_{in}=41\u00b0\\)). Displayed values are for discrete directions \\((\\Omega, \\Delta \\Omega\\)).</p></p>"},{"location":"DART_functionalities_and_products/6-View_menu/6.5/directional_reflectance_temp.html","title":"6.5 Directional reflectance/Temperature 1D & 2D","text":"<p> \\(L(\\Omega_v), \\rho(\\Omega_v), T_B(\\Omega_v)\\)</p> <p>DART has \\(N = N_{auto} + N_{added}\\) upward directions: \\(N_{auto}\\) automatic upward directions, including \\(N_{auto}^{image}\\) directions with image simulation, and \\(N_{added}\\) upward directions (\\(N_{added}^{image}\\) directions with image simulation, \\(N_{added}^{no\\:image}\\) directions without image simulation). The brf / \\(T_{app}\\) / radiance file stores the reflectance / brightness temperature / radiance of all upward directions, possibly identical (only one is arbitrarily used) or very close (e.g., automatic and added directions).</p> <ul> <li>DART-FT brf: mean reflectance of the images of the N upward directions, even if the images are not stored. N is usually \\(\\approx\\) 100 because computation time (CT) greatly increases if N increases.</li> <li> <p>DART-Lux brf: mean reflectance of the \\(N_{auto}^{image} + N_{added}^{image}\\) images, and, if the option \"BRF computation\" is set, \\(\\rho_{scene}\\) for the \\(N_{auto}^{no\\:image} + N_{added}^{no\\:image}\\) directions, interpolated on a BRF map (here: 90x360 pixels; 1\u00b0 step); a pixel (VZ,VA) corresponds to the viewing direction (VZ,VA). brf has no BRF map-derived data if \\(N_{auto}^{no\\:image} + N_{added}^{no\\:image} = 0\\).</p> </li> <li> <p>Graph 1D: \\(L(\\theta_v, \\phi_v=cst), \\rho(\\theta_v, \\phi_v=cst), T(\\theta_v, \\phi_v=cst)\\).</p> </li> </ul> <p><p>1D graph of \\(\\rho_{scene}\\). It can show several curves (option \"Add curve\"), interpolated or not.</p></p> <ul> <li>2D polar plots \\(\\rho(\\theta,\\phi), T(\\theta,\\phi)\\) and \\(L(\\theta,\\phi)\\): kind of bi-cubic interpolation on the brf file; possibly weird if directions are very close. Graphs can be saved in png, jpg and txt (interpolated data file). Cross = DART direction. Options: zoom, contrast enhancement, display of sun angles, 3D view,\u2026 Right click on 2D plot \\(\\implies (\\theta_v,\\phi_v)\\) and L, \\(\\rho\\) and \\(T_B\\).</li> </ul> <p><p>Reflectance polar plot and 3D view. Distance from plot center = VZ angle \\(\\theta\\) (circles at 30\u00b0, 60\u00b0, 90\u00b0). Anti clockwise angle relative to the horizontal axis = azimuth angle \\(\\phi\\).</p></p> <p>\\(\\rho_{scene}(\\theta,\\phi)\\) and \\(T_{B,scene}(\\theta,\\phi)\\) can also be extracted from the LUT and displayed (see below). <p>Tool \"View/Directional Reflectance,Temperature / Extract 2D \u2026 from LUT\".</p></p>"},{"location":"DART_functionalities_and_products/6-View_menu/6.6/lidar.html","title":"6.6 LiDAR","text":""},{"location":"DART_functionalities_and_products/6-View_menu/6.6/lidar.html#a-mono-pulse","title":"a) Mono pulse","text":"<p>The menu (view \\(\\rightarrow\\) lidar \\(\\rightarrow\\) mono pulse) (see below) plots the waveform, and also 3D plots, and their histogram, of the LiDAR pulse with options \"Per scatterer\" and \"Per volume\" if the product \"photon information\" is created:</p> <ul> <li>Per scattering: plots per actual and per perceived location of the last scatterer. The histogram horizontal axis shows the energy per scattering event in terms of actual photons. Its height is the number of scattering events in the simulation. The cursor allows one to hide least energetic scattering events in the 3D displays.</li> <li>Per volume (i.e., cell): plots per actual and per perceived cell location. Histogram: horizontal axis = number of photons scattered per cell, Vertical axis = number of cells that scatter a given number of photons per cell.</li> </ul> <p><p>Mono-pulse. a) 3D view of a \"flying\" plot. b) Convolved waveform: 1 peak for the ground and plot. Photon numbers are those at the entry of the lidar and not those launched by DART. c) 3D plot \u201cPer scatterer\u201d option. d) \u201cPer volume\u201d option. e) Waveform with solar noise. It is constant.</p></p>"},{"location":"DART_functionalities_and_products/6-View_menu/6.6/lidar.html#b-multi-pulse","title":"b) Multi pulse","text":"<p>The menu (view \\(\\rightarrow\\) lidar \\(\\rightarrow\\) multi pulse) (see below) displays the multi-pulse waveform based on the LiDAR binary and panel products. The \"waveform\" plot in the image b. below corresponds to the pulse selected in the image a. The image c. displays the 3D convolved waveforms colored by the energy level.</p> <p><p>LiDAR Multi-pulse. a) List of pulses. b) 3D plot of multi-pulse waveforms. c) Plot of the waveform selected in a).</p></p>"},{"location":"DART_functionalities_and_products/6-View_menu/6.7/surface_radiative_budget.html","title":"6.7 Surface radiative budget (RB)","text":"<p>It plots the band RB of facets (see below) and volumes (simulate ground with facets to get an accurate ground RB).</p> <p><p>a) Radiative budget of a 3D object (cherry tree). b) Nadir and oblique views.</p></p>"},{"location":"DART_functionalities_and_products/6-View_menu/6.8/lut.html","title":"6.8 LUT","text":"<p>Option \"View / LUT\" is to plot and export (csv format) data from a multi-band simulation or a sequence of simulations with any variable input parameter(s). Y  axis is for radiance,\u2026 X axis  is the band for a multi-band simulation. For a sequence, X is any variable parameter (\\(\\lambda\\), LAI, sun  / view  angles, altitude , band , \\(\\rho_{ground}\\) ,...) or parameter (date, tree cover) derived from DART input parameters: (\\(\\theta_{sun}, \\phi_{sun}\\)) for 'date', (crown dimensions, density) for 'tree cover', if  is set in the sequencer LUT menu.</p> <p><p>LUT plot. \\(\\rho_{turbid\\:layer}(LAI)\\). Sequence: 2 \\(\\rho_{ground}\\) (0: a, 1: b), 18 LAI ([0 8.5], \\(\\Delta\\) = 0.5), 3 bands (0.65, 0.9, 1.7\\(\\mu\\)m). User setting: sequence , 0x  / 0y  axes, sun  / view  angles, altitude,.. , band , \\(\\rho_{ground}\\) .</p></p>"},{"location":"DART_functionalities_and_products/6-View_menu/6.9/report_data_files.html","title":"6.9 Report / data files","text":"<p>Display of text / binary files: </p> <ul> <li><code>dart.txt</code>: major simulation results (spectral irradiance, albedo, computer time,\u2026)</li> <li><code>simulation.properties.txt</code> (here): display of input / output data per DART module.</li> <li><code>directions.txt</code>: {zenith, azimuth, solid angle, angular sector} per DART discrete direction.</li> <li>'triangles' file: all triangles (ground, DART simulated houses, imported object, etc.)</li> <li>'scattering functions' file: for the scene and atmosphere elements.</li> <li><code>atmosphere.txt</code>: atmosphere data computed by phase module; maket &amp; dart modules use it.</li> <li>'Atmosphere products': atmosphere BOA radiance,...</li> </ul>"},{"location":"DART_functionalities_and_products/7-Tools_menu/7.1/sail_model.html","title":"7.1 SAIL model","text":"<p>This module calculates scene reflectance values with the well known SAIL model of Verhoef (1984). It works with the directions.txt file of DART. It is run with a simple command line.</p>"},{"location":"DART_functionalities_and_products/7-Tools_menu/7.10/3d_radiative_budget_extractor.html","title":"7.10 3D Radiative budget extractor","text":"<p>Using a 3D cell \\(RB_{\\Delta \\lambda}\\) () or an addition / subtraction of two 3D cell \\(RB_{\\Delta \\lambda}\\) ( + ) (see below), this tool gives:</p> <ul> <li>2D \\(RB_{\\Delta \\lambda} \\forall x, y or z \\:plane\\): text files or images (ILWIS format) that the menu \"Search image\" can display. </li> <li>Energy budget 1D profiles for any (x, y), (x, z) or (y, z).</li> </ul> <p>There are several 3D cell RB (i.e., cell interception / absorption / emission / scattering, cell face irradiance / exitance): for direct sun irradiance \"ILLUDIR\", direct and diffuse irradiance \"ILLUDIFF\", before (\"IterX\") and after (\"Coupl\") the atmosphere radiative coupling, if atmosphere RT is simulated, and also RB per iteration if set by the user.</p> <p>Note</p> <p>\\(\\frac {exitance\\:of\\:the\\:top\\:face\\:of\\:scene\\:top\\:cell\\:xy\\:(W/m^2/\\mu m)} {irradiance\\:of\\:the\\:top\\:face\\:of\\:scene\\:top\\:cell\\:xy\\:(W/m^2/\\mu m)}=\\) exitance of the top face of scene top cell xy (%)=scene albedo \\(A_{xy}^{RB2}\\)</p> <p><p>3D RB extractor tool.</p></p> <p>Here, it extracts 1D RB profile (green) and 2D RB images (blue) from the 3D RB of an infinite slope with grass.</p>"},{"location":"DART_functionalities_and_products/7-Tools_menu/7.11/dart_database_manager.html","title":"7.11 DART database manager","text":"<p>It creates / manages 2 types of DART input SQL databases:</p> <ul> <li>atmosphere. Example: <code>dart_atmosphere.db</code></li> <li>optical property (III.4.9, IV.13)). Examples: <code>fluid.db</code>,<code>lambertian_mineral.db</code>, <code>lambertian_vegetation.db</code>,\u2026 </li> </ul> <p>It deletes tables, called models, in databases, exports them as text files (default folder: <code>DART\\user\\database</code>),imports them. </p> <p>Easy way to import: export a table of a DART database, modify its values (ascii format) and name, then import it. </p> <p>Note</p> <p>Tables of atmosphere database have a suffix per type of atmosphere table (e.g., _H2O for water vapor) that must be used when importing them. </p> <p>DART input databases can be managed by DART Python scripts &amp; freewares (Firefox add-on SqLite manager: addons.mozilla.org/fr/firefox/addon/sqlite-manager; SqliteBrowser: sqlitebrowser.org) manage DART input databases.</p> <p><p>Tool \"database manager\".</p></p> <p>Note</p> <p>Imported text files: keep \\n and remove the command \\n.</p>"},{"location":"DART_functionalities_and_products/7-Tools_menu/7.2/leaf_spectra_inversion.html","title":"7.2 Leaf spectra inversion","text":"<p>Inversion (jb.feret@gmail.com) of {\\(\\rho_{leaf}(\\lambda), \\tau_{leaf}(\\lambda)\\); missing value = -1} in terms of PROSPECT/ Fluspect parameters.</p> <p></p>"},{"location":"DART_functionalities_and_products/7-Tools_menu/7.3/computation_parametric_model_coef.html","title":"7.3 Computation of parametric model coefficients","text":"<p>Python script <code>DisplayLutAndInversion\\src\\GenerateCoefficientsForOneSimulation.py</code> fits a mono-band reflectance file (brf) to a parametric model (Hapke, RPV 3-5 parameters, MRPV 4-5 parameters, Esteve) with \\(N_{iter}\\) iterative calls to the iterative scipy function <code>fmin_bfgs.py</code> to get a relative \\(error &lt; \\epsilon_{max}\\) for directions with maximal zenith angle \\(\\theta_{max}\\).</p> <p><p>BRF inversion. a) GUI. b) \\(BRF_{DART}\\). c) \\(BRF_{fitted\\:Hapke}\\). d) \\(BRF_{difference}.\\rho_{ground}=0.05\\), LAI=2, \\(\\theta_s=40\u00b0.\\rho_{leaf \\:deciduous}.550nm.\\)</p></p> <p>A text file (e.g., coefficients_Hapke) stores coefficients and RMSE. Increasing \\(N_{iter}\\) does not always improve RMSE.</p> <ul> <li>Hapke (w, c1, c2, h1, h2): \\(R(\\Omega_s,\\Omega_v) = \\frac {\\omega} {4}.\\frac {1} {cos(\\theta_s)+cos(\\theta_v)}.([1+B(\\Omega_s,\\Omega_v)].P(\\Omega_s,\\Omega_v) + H(\\omega,\\mu_s).H(\\omega,\\mu_v) - 1)\\)</li> </ul> <p>\\(B(\\Psi_{sv}) \\approx h_1.[1 + \\frac {1} {h_2}.tan(\\frac {\\Psi_{sv}} {2})]^{-1}\\:\\:H(\\omega,x) = \\frac {1 + 2.x} {1 + 2.x.\\sqrt{1-\\omega}}\\)</p> <p>\\(\\theta_s, \\theta_v \\in [0\u00b0\\:90\u00b0] P(\\Omega_s,\\Omega_v) = 1 + c1.cos(\\gamma_1) + c2.\\frac {3.cos^2(\\gamma_1) - 1} {2}\\) for spheres with single scattering albedo \\(\\omega\\) (\\(\\omega=1\\) if one gets \\(\\omega &gt; 1\\)) and scattering phase function \\(P(\\Omega_s,\\Omega_v)\\).</p> <p>Here (Jacquemoud et al., 1992): \\(P(\\Omega_s,\\Omega_v) = 1 + c1.cos(\\gamma_1) + c2.\\frac {3.cos^2(\\gamma_1) - 1} {2} + c_3.cos(\\gamma_2) + c_4.\\frac {3.cos^2(\\gamma_2) - 1} {2}\\)</p> <p>\\(cos(\\gamma_1) =\\Omega_s.\\Omega_v= cos(\\Psi_{sv}) = cos(\\theta_s).cos(\\theta_v)+ sin(\\theta_s).sin(\\theta_v).cos(\\phi_{sv}), cos(\\gamma_2)\\) \\(= cos(\\theta_s).cos()\\theta_v)- sin(\\theta_s).sin(\\theta_v).cos(\\phi_{sv}), \\Phi_{sv}=\\phi_v-\\phi_s\\)</p> <ul> <li>RPV (\\(\\rho_0\\), k, g, h: https://rami-benchmark.jrc.ec.europa.eu/_www/definition.php#def_rpv): \\(R(\\Omega_s,\\Omega_v) = \\rho_0.M(\\theta_s,\\theta_v,k).F(\\Psi_{sv},g).H(h,\\Omega_s,\\Omega_v)\\)</li> </ul> <p>\\(M(\\theta_s,\\theta_v,k) =\\) {\\(cos(\\theta_s).cos(\\theta_v).[cos(\\theta_s) + cos(\\theta_v)\\)]}\\(^{k-1}\\), Henyey Greenstein function \\(F(\\Psi_{sv},g)=\\frac {1-g^2} {[1 + 2.g.cos(\\Psi_{sv}) + g^2]^{3/2}}\\)</p> <p>Hot spot \\(H = 1 + \\frac {1-h} {1+G}\\), \\(G = \\sqrt{tan(\\theta_s)^2+tan(\\theta_v)^2-2.tan(\\theta_s).tan(\\theta_v).cos(\\phi_s -\\phi_v)}\\), \\(\\Psi_{sv} =acos(\\overline{\\Omega}_s.\\overline{\\Omega}_v)\\) (DART RPV3: \\(\\rho_0\\),k,h)</p> <ul> <li> <p>MRPV (\\(\\rho_0\\), k, c, h1, h2: RPV with new F and H terms): \\(R(\\Omega_s,\\Omega_v) = \\rho_0.M(\\theta_s,\\theta_v,k).e^{-c.cos(\\Psi_{sv})}.[1 + \\frac {h_1} {1 + h_2.tan(\\frac {\\Psi_{sv}} {2})}]\\)</p> </li> <li> <p>Est\u00e8ve (c1,\u2026, c6): \\(R(\\Omega_s,\\Omega_v) = (1 + c5.[1+\\frac {1} {c_6}.tan(\\frac {\\Psi_{sv}} {2})]^{-1}).(c1 + c2.\\theta_v.cos(\\phi_{sv}) + c3.\\theta_v^2.cos^2(\\phi_{sv}) + c4.\\theta_v^2.sin^2(\\phi_{sv}))\\)</p> </li> </ul>"},{"location":"DART_functionalities_and_products/7-Tools_menu/7.4/3d_objects_creation.html","title":"7.4 Creation of 3D objects","text":"<p>It creates two types of 3D objects (<code>*.obj</code>), compatible with DART (here). The 3D object can be:</p> <ol> <li>Set of N identical 3D objects. They are randomly or uniformly distributed in a volume V (i.e., box, sphere, cylinder, ellipsoid, cone) with given angular distribution of normals (e.g., spherical) and scale factors (x,y,z).</li> <li>Juxtaposition of two 3D objects, possibly with some translation.</li> </ol> <p><p>Creation of a cone filled with disks. b) Juxtaposition of a cone and a sphere.</p></p>"},{"location":"DART_functionalities_and_products/7-Tools_menu/7.5/lut_tools.html","title":"7.5 LUT tools: BRF model inversion and noised LUT","text":"<p>Generate inversion coefficients: a LUT of DART reflectance {\\(\\rho(\\Omega_s,\\Omega_v,LAI,\u2026)\\)} is transformed into a LUT of coefficients {\\(a_i(LAI,\u2026)\\)} of a parametric reflectance model \\(M(\\Omega_s,\\Omega_v,a_1,a_2,\u2026)\\) that can be used for the inversion of remote sensing images (cf. \"inversion procedure\" in <code>Modules_User_Manual.pdf</code>) in terms of DART input (LAI,\u2026) and/or derived (%C) parameters. </p> <p>Generate noised LUT: noise (gaussian, multiplicative, additional) is added to reflectance values {\\(\\rho(\\Omega_s,\\Omega_v,LAI,\u2026)\\)} of a DART LUT.</p> <p><p>BRF model inversion.</p></p>"},{"location":"DART_functionalities_and_products/7-Tools_menu/7.6/topography_tools.html","title":"7.6 Topography tools","text":""},{"location":"DART_functionalities_and_products/7-Tools_menu/7.6/topography_tools.html#a-dem-convert-raster-map-to-3d-objects","title":"a) DEM convert raster map to 3D objects","text":"<p>It creates a 3D object from a raster image.</p> <p><p>Creation of a 3D DEM object from a raster image.</p></p>"},{"location":"DART_functionalities_and_products/7-Tools_menu/7.6/topography_tools.html#b-creation-of-water-dem","title":"b) Creation of water DEM","text":"<p>It creates a 3D object \"water DSM\" (juxtaposition of hexagons) due to a given windspeed (m/s).</p> <p><p>Creation of a 3D object \"Water DEM\".</p></p>"},{"location":"DART_functionalities_and_products/7-Tools_menu/7.6/topography_tools.html#c-topography-correction","title":"c) Topography correction","text":"<p>Due to 3D effects (topography,\u2026), the observed reflectance \\(\\rho_{sat}\\) and actual reflectance \\(\\rho_{loc}\\) of a surface (A) differ:</p> <ul> <li>Slope of (A) influences its local irradiance: \\(E_{loc}(x,y) = E_{sun}(x,y) + E_{sky}(x,y) + E_{env}(x,y) \\forall (x,y)\\), with direct sun \\(E_{sun}\\), direct sky \\(E_{sky}\\) and environment \\(E_{env}\\) irradiance. \\(E_{loc}\\) differs from the scene irradiance \\(E_{scene}(x,y)\\).</li> <li>Surfaces around (A) tend to increase its \\(E_{env}\\), and to decrease its direct sun \\(E_{sun}\\) and atmosphere \\(E_{sky}\\).</li> </ul> <p>This DART tool derives \\(\\rho_{loc}(x,y)\\) from an atmospherically corrected satellite image \\(\\rho_{sat}(x,y).\\rho_{sat}\\), \\(\\rho_{loc}\\) , \\(E_{scene}\\) and \\(E_{loc}\\) are linked to satellite radiance: \\(L_{sat} = \\rho_{loc}(x,y,\\Omega_v).\\frac {E_{loc}(x,y)} {\\pi} =\\rho_{sat}(x,y,\\Omega_v).\\frac {E_{scene}} {\\pi} \\implies \\rho_{loc}(x,y,\\Omega_v) = \\rho_{sat}(x,y,\\Omega_v).\\frac {E_{scene}} {E_{loc}(x,y)}\\).</p> <p>\\(E_{loc}(x,y)\\) is needed for deriving \\(\\rho_{loc}(x,y)\\) from \\(\\rho_{sat}(x,y,\\Omega_v)\\). Its usual estimation with analytic methods and local topography tends to be inaccurate. The DART tool computes iteratively \\(E_{loc}^{i}(x,y)\\) and then derives \\(\\rho_{loc}^{i+1}(x,y)\\) from \\(\\rho_{sat}(x,y,\\Omega_v)\\). Conversely to \\(E_{sun}(x,y)\\) and \\(E_{sky}(x,y)\\), \\(E_{env}(x,y)\\) varies with iteration i becaue it depends on \\(\\rho_{loc}(x,y)\\).</p> <p>Steps to derive \\(\\rho_{loc}(x,y,\\Omega_v)\\) from an atmospherically corrected and ortho-image \\(\\rho_{sat}(x,y,\\Omega_v)\\)</p> <ol> <li> <p>Set options {'OrthoImages (energy conservation)', 'Additional direction \\(\\Omega_v\\)'} and run DART to create the mono band ortho-image \\(\\rho_{sat}(x,y,\\Omega_v)\\) that you copy from folder \"IMAGE_PROJETEE\" to folder \"input\\Corrected\".</p> </li> <li> <p>Run the \"Topographic correction\" tool (see below; cf. WP7E, F) after setting its parameters: \"File image of \\(\\rho_{sat}(x,y,\\Omega_v)\\)\", \"Folder\" (here: \"Corrected\") to store image results (i.e., 'user_selected_name_iteri' \\(\\rho_{loc}^{i}(x,y)\\) and 'Rho_dart_iteri' \\(\\rho_{DART}(x,y|\\rho_{loc}^{i}(x,y),\\Omega_v)\\) per iteration i, initial 'Rho_satellite' \\(\\rho_{sat}(x,y,\\Omega_v)\\)), \"Maximal number of iterations (here: 10)\" and \"Threshold\" on \\(\\frac {Mean[\\rho_{DART}(x,y|\\rho_{loc}^{i}(x,y),\\Omega_v) - \\rho_{sat}(x,y,\\Omega_v)]} {Mean\\:\\rho_{sat}(x,y,\\Omega_v)}\\) (here: \\(10^{-5}\\)) to stop DART tool\".</p> </li> </ol> <p>If N directions are added, the DART tool uses the \\(1^{st}\\) one (i.e., \\(\\Omega_v\\)). For i=0: \\(\\rho_{loc}^0(x,y) = \\overline{\\rho}_{sat}(\\Omega_v) = \\overline{\\rho}_{sat}(x,y,\\Omega_v)\\).</p> <p>At iteration i, DART radiance along (\\(\\Omega_v\\)) is: \\(L^i(x,y,\\Omega_v) = \\rho_{DART}(x,y|\\rho_{loc}^{i}(x,y),\\Omega_v).\\frac {E_{scene}} {\\pi}\\)</p> <p>Using \\(L^i(x,y,\\Omega_v) = \\rho_{loc}^{i}(x,y).\\frac {E_{loc}^{i}(x,y)} {\\pi}\\), we get \\(\\frac {E_{scene}} {E_{loc}^{i}(x,y)} = \\frac {\\rho_{loc}^{i}(x,y)} {\\rho_{DART}(x,y|\\rho_{loc}^{i}(x,y),\\Omega_v)}\\)</p> <p>\\(\\implies\\) Local reflectance \\(\\rho_{loc}^{i+1}(x,y) = \\rho_{sat}(x,y,\\Omega_v).\\frac {\\rho_{loc}^{i}(x,y)} {\\rho_{DART}(x,y|\\rho_{loc}^{i}(x,y),\\Omega_v)}(\\rho_{loc}^{1}(x,y)=\\rho_{sat}(x,y,\\Omega_v).\\frac {\\rho_{loc}^{0}} {\\rho_{DART}(x,y|\\rho_{loc}^{0},\\Omega_v)})\\)</p> <p>Note</p> <p>The DART tool is not adapted to landscapes that contain turbid / triangle vegetation.</p> <p><p>DART tool \"Topography correction\".</p></p>"},{"location":"DART_functionalities_and_products/7-Tools_menu/7.7/covermap_importation.html","title":"7.7 CoverMap importation","text":"<p>It creates ground / vegetation (turbid / facets) and fluid plots using a CoverMap (i.e., raster image), where a pixel value \\(P_i\\) indicates the category of plot \\(pl_i\\), and a text file that stores the parameters of \\(pl_i\\). The tool stores plots either in the <code>plots.xml</code> file or in a text file <code>plots.txt</code> that is more convenient if there are many plots.</p>"},{"location":"DART_functionalities_and_products/7-Tools_menu/7.8/band_calculation_tools.html","title":"7.8 Band calculation tools","text":"<p>They process the \\(I_{\\lambda}(i, j)\\) images (i.e., BOA/Sensor/TOA radiance \\(L_{\\lambda}(i, j)\\), exitance \\(M_{\\lambda}(i, j)\\), irradiance \\(E_{\\lambda}(i, j)\\)) of a scene or sub-scene, using a mask, of a multi-band simulation or spectral sequence of mono-band simulations. Broadband handles DART-FT \\(RB_{\\Delta \\lambda}\\) and can run per simulation of a non-spectral sequence of multi-band simulations.</p> <ul> <li> <p>Spectra: scene or sub-scene BOA / TOA / spectra in SceneSpectra folder. Note: DART LUT only gives scene spectra.</p> </li> <li> <p>Broadband: scene / sub-scene \\(X_{\\Delta \\lambda} = \\frac {\\int_{\\Delta \\lambda}s_{\\lambda}.X_{\\lambda}.d\\lambda} {\\int_{\\Delta \\lambda}s_{\\lambda}.d\\lambda}\\) (Broadband folder) with rectangle + trapezoid methods, \\(X_{\\lambda} =\\:image\\:I_{\\lambda}(x,y)\\) or 1D/2D/3D \\(RB_{\\lambda}\\) and sensor spectral sensitivity \\(s(\\lambda)\\) (default: \\(s(\\lambda)=1\\)). With N bands over \\([\\lambda_{0, min};\\:\\lambda_{N-1,max}]\\):</p> </li> <li> <p>Mode R, unit %: \\(X_{\\Delta \\lambda}=\\frac {2.\\sum_{0}^{N-1}\\overline{s}_{\\lambda_i}.X_{\\lambda_i}.\\overline{E}_{BOA,\\lambda_i}.\\Delta \\lambda_i + \\sum_{0}^{N-1}(s_{\\lambda_i,max}.X_{\\lambda_i}.E_{BOA,\\lambda_i,max} + s_{\\lambda_{i+1},min}.X_{\\lambda_{i+1}}E_{BOA,\\lambda_{i+1},min}).(\\lambda_{i+1,min} - \\lambda_{i,max})} {2.\\sum_{0}^{N-1}\\overline{s}_{\\lambda_i}.\\overline{E}_{BOA,\\lambda_i}.\\Delta \\lambda_i + \\sum_{0}^{N-1}(s_{\\lambda_i,max}.E_{BOA,\\lambda_i,max} + s_{\\lambda_{i+1},min}.E_{BOA,\\lambda_{i+1},min}).(\\lambda_{i+1,min} - \\lambda_{i,max})}\\)</p> </li> <li> <p>Mode R or T, unit \\(W/m^2/\\mu m\\): \\(X_{\\lambda, \\Delta \\lambda} = \\frac {2.\\sum_{0}^{N-1}\\overline{s}_{\\lambda_i}.X_{\\lambda_i}.\\Delta \\lambda_i + \\sum_{0}^{N-1}(s_{\\lambda_i,max}.X_{\\lambda_i} + s_{\\lambda_{i+1},min}.X_{\\lambda_{i+1}}).(\\lambda_{i+1,min} - \\lambda_{i,max})} {2.\\sum_{0}^{N-1}\\overline{s}_{\\lambda_i}.\\Delta \\lambda_i + \\sum_{0}^{N-1}(s_{\\lambda_i,max} + s_{\\lambda_{i+1},min}).(\\lambda_{i+1,min} - \\lambda_{i,max})}\\)</p> </li> </ul> <p><p>Broadband tool.</p></p> <p>\"Rectangle\" integral for DART bands, and \"Trapezoid\" for non simulated bands. a) Case of 5 non adjacent bands. b) Menu.</p> <ul> <li>Band math: basic image operations with arithmetic and logical operators (+, -, *, /, &gt;,...). A operators are pre-defined for classical band ratio indices (NDVI,\u2026). <ul> <li>Example of operation: Image = if(Image1&gt;5, Image1, Image2) \u21d4 Image = (Image1&gt;5) *  Image1 + (Image1&lt;=5) * Image2</li> </ul> </li> <li>Export: a single DART image or all images of a simulation are exported into ENVI and GeoTiff format.</li> </ul> <p><p>Band calculation tools and their application to images, sub-images and radative budget.</p></p>"},{"location":"DART_functionalities_and_products/7-Tools_menu/7.9/color_composite.html","title":"7.9 Color composite","text":"<p>This tool creates RGB color composites of DART radiance, reflectance and temperature images (see below).</p> <p><p>RGB color composite of 3 DART images. a) TOA. b) BOA. 3D cherry tree (AMAP: amap.cirad.fr).</p></p>"},{"location":"DART_model/dart_model.html","title":"DART Model","text":""},{"location":"DART_model/dart_model.html#description","title":"Description","text":"<p>Developed since 1992, DART (Discrete Anisotropic Radiative Transfer: https://dart.omp.eu) is one of the most comprehensive RT models for simulating the 3D RB (i.e., absorbed, emitted, scattered and intercepted radiation) and RS observations of natural (forest, agricultural crop,...) and urban landscapes, with topography and atmosphere (See below) over the entire optical domain (UV, VIS, NIR, TIR). It is adapted to any experimental (e.g., atmosphere, date / sun  direction,..) and instrumental (e.g., viewing direction, altitude, spatial / spectral resolutions,...) configurations. </p> <p> DART modeling: Earth-Atmosphere geometry (trees, maize fields,...) and radiation. a) DART-FT and DART-RC cell matrix with 3 atmosphere levels: top (i.e., layers), mid and within Earth scene. b) DART-L ux. c) BOA and TOA DART-Lux images (10 cm resolution).</p> <p>It is adapted to any experimental (e.g., atmosphere, date / sun direction,..) and instrumental (e.g., viewing direction, altitude, spatial / spectral resolutions,...) configurations. DART accuracy has already been successfully tested for simulating vegetation canopy directional reflectance (RAMI experiments: https://rami-benchmark.jrc.ec.europa.eu, in-situ and airborne data) and brightness temperature at bottom (BOA) and top (TOA) of the atmosphere. It has many applications: </p> <ol> <li>RS image inversion</li> <li>Satellite sensor design (e.g., LiDAR planned on NASA\u2019s DESDynl mission: www.decadal.gsfc.nasa.gov/ DESDynl.html, LiDAR and high spatial resolution Pleiades mission of CNES : https://pleiades.cnes.fr/fr)</li> <li>Impact study of canopy structure on satellite image texture and reflectance</li> <li>3-D photosynthesis and primary production rates in vegetation canopies</li> <li>Design of chlorophyll index for evergreen conifer forests</li> <li>Study of tropical forest texture, among others. It is increasingly used by research centers and space agencies (CNES , NASA,...). It was patented in 2003 (PCT / FR 02/01181). Toulouse III University (France) distributes its licenses. </li> </ol> <p>DART simulates two major products:</p> <ul> <li>Remote sensing acquisitions (forest and city below): imaging spectro-radiometers and scanning LiDAR (discrete return, waveform, photon counting) on-board satellite/aircraft (ALS: Airborne Laser Scanner) or terrestrial platforms (TLS: Terrestrial Laser Scanning). Terms BOA, Sensor and TOA indicate that simulated images are for a sensor at the bottom, within and top of the atmosphere. The DART folder \" BRF \" stores BOA products.</li> <li>Radiative budget: 3D emitted, scattered, intercepted and absorbed radiation, including sun induced fluorescence ( SIF) of vegetation. It is useful to model vegetation functioning (e.g., photosynthesis, fluorescence,...) and urban climate.</li> </ul> <p> <p>DART simulated Chris hyperspectral sensor. Howland forest, USA. a) Image. b) TOA VIS-NIR spectra.</p> </p> <p> <p>DART simulations. BOA camera (a), TOA camera (b) and airborne LiDAR (c) images of St Sernin basilique and BOA camera (e) of Brienne district (Toulouse). d) Tropical forest. f) Grossetto agricultural region, Italy.</p> </p>"},{"location":"DART_model/dart_model.html#modes","title":"Modes","text":"<p>DART has 3 major modes (see the table below):</p> <ul> <li>DART-FT: it simulates the RB and spectro-radiometer images of Earth surfaces with a so-called Flux Tracking (FT) approach, based on the \"discrete ordinate\" method with any number of discrete directions.</li> <li>DART-RC: it simulates LiDAR signals with a so-called Ray-Carlo (RC) approach that combines ray tracking and forward Monte Carlo (MC) methods.</li> <li>DART-Lux: it is developed since 2018 to improve DART-FT / RC accuracy and efficiency of to simulate complex and large landscapes. It adapts a Bidirectional Path Tracing (BPT) algorithm from LuxCoreRender luxcorerender.org, that solves the light transport equation with MC integration techniques. Unlike the path tracing algorithm (Kajiya, 1986), the BPT algorithm constructs paths that start from the camera at one end, and from a light source at the other end, and connects them. Its computation time and RAM need can be over \\(10^2\\) times lower than DART-FT (see this image). It gradually integrates DART-FT and DART-RC features. It already simulates TOA and BOA reflectance, SIF, thermal emission and LiDAR signals of natural and urban and landscapes. RB is being completed.</li> </ul> <p><p>DART modes to simulate urban and natural landscapes, and their RB and RS acquisitions.</p></p>"},{"location":"DART_model/dart_model.html#scenes","title":"Scenes","text":"<p>DART simulates complex 3D landscapes by combining imported scene elements (see below). A scene is made of facets (triangles) and volumes filled with turbid medium and fluids (air, soot, water,...). In DART-Lux, a volume has any shape, whereas it is part of a cell (voxel) array in DART-FT and DART-RC . \"Turbid\" is a statistical representation of vegetation: infinite number of infinitely small flat facets with an angular distribution (\\(sr^{-1}\\)), area volume density (\\(m^2/m^3\\)), and optical properties (lambertian, specular). Fluids are defined by their particle density, cross section, single scattering albedo and scattering phase function. Facets simulate vegetation, houses,... They have any orientation, area and optical property (lambertian / specular reflectance, isotropic / direct transmittance). DART has SQL databases for the atmosphere (gas / aerosol models) and spectral properties of elements (leaf,...). It has a GUI to enter and display input parameters (i.e., spectra, 3D scene,...), to specify and display products (images, lidar waveform, radiative budget,...), to transform products, to run sensitivity studies, etc.</p> <p> <p>3D objects provided with DART: wheat, maize, rice, sunflower, cherry tree, olive tree, citrus, building, plane.</p></p> <p>This manual was initially written for DART-FT and RC. Now, DART-Lux is being introduced. Therefore, the \"DART-Lux\" sections are not as up-to-date as expected. Also, a new GUI is on the way... At this stage, the DART user is advised to learn first DART-FT before DART-Lux.</p> <p>Note</p> <p>Many DART papers on the DART web site dart.omp.eu/index.php#/doc</p>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html","title":"1 - All DART modes","text":"<p>DART stores input data as xml files in the \"input\" folder of the current simulation and results (e.g., reflectance files,\u2026) in text and binary files in the \"output\" folder. </p> <p><p>General architecture of DART.</p></p>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#1-directionstxt-directionsxml","title":"1) Directions.txt &amp; Directions.xml","text":"<p>The module Directions (Section III.4.8) uses <code>directions.xml</code> (input parameters) to create DART discrete directions (<code>directions.txt</code>). Here (see below), it creates \\(\\approx 1000\\) directions in 10 sectors, \\(\\theta_{sun}=50\u00b0\\), \\(\\phi_{sun}=225\u00b0\\), no added direction.</p> <p><p>Files direction.xml (top) and directions.txt (bottom), and 3D display of directions.</p></p>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#2-lad-leaf-angle-distribution-derived-files","title":"2) LAD (Leaf Angle Distribution) derived files","text":"<p>The Phase module computes the fraction of leaf area Af over \\([\\theta_f;\\: \\theta_f+\\Delta \\theta_f]\\). Two files are created:</p> <ul> <li> <p> <code>LAD *.txt</code>  (text file) with *= SPHERIC, etc.: {\\(\\theta_f\\), normalized \\(g(\\theta_f).sin(\\theta_f)\\); \\(\\Delta \\theta_f=0.5\u00b0=8.73\\:10^{-3}\\:rd\\)} created in the user database, if not yet present, for all LADs except the ellipsoidal / elliptical and \"user defined\" LADs (i.e., LADs derived from DeWit/Bunnik (http://rami-benchmark.jrc.ec.europa.eu/html/definitions/definitions.php). Only the phase module uses it.</p> </li> <li> <p> <code>leafAngleDistributionFunctionVector[i].txt</code> : (text file); i=turbid index: {\\(LAD_{index}, \\theta_f\\), normalized \\(g(\\theta_f).sin(\\theta_f).\\Delta \\theta_f\\); \\(\\Delta \\theta_f=user \\:defined \\geq 1\u00b0\\)} in 'output/lib_phase' if required or if maket module transforms turbid medium as triangles. \\(LAD_{index}\\)=0: uniform, 1: spheric, 2: erectophile, 3: planophile, 4: extremophile, 5: plagiophile, 6: horizontal, 7: vertical, 8: ellipsoidal, 9: elliptical,10: user defined (text file), 11: de Wit. 12: uniform bounded. Note that 6 / 7 are exactly vertical / horizontal only for triangles.</p> </li> </ul> <p></p> <p>The Phase module also computes binary files designed to manage scattering and interception (transmittance) events: </p> <p><code>j3D_....txt_diff</code>: {\\(T_{diff}(\\Omega_{sun},\\Omega_i), T_{diff}(\\Omega_{sector,k},\\Omega_i), TG_{diff}(\\Omega_i)\\)} of all bands, with j the leaf species index, \\(k \\in [1;\\:K\\)=Number_of_sectors] and \\(i \\in [1;\\:I\\)=Number_of_directions].</p> <p><p>File _diff: \\(T(\\Omega_s,\\Omega_i), T(\\Omega_{sector,k},\\Omega_i), TG(\\Omega_i)\\) with \\(k \\in [1;\\: 10]\\), \\(i \\in [1;\\: 100]\\). DART option 'Specular' \\(\\implies\\) no line \\(TG(\\Omega)\\). \\(\\rho_f:0.5\\). \\(\\tau_f:0.4.\\) LAD spherical.*</p></p> <p><code>j3D_...txt.spec</code>: created per leaf species j if there is leaf specular scattering (\\(\\implies\\) possible polarization). For all spectral bands, each file stores: {\\(T_{spec}(j,\\Omega_{sun},\\Omega_V)_{v=1..N}\\), \\(T_{Polarization}(j,\\Omega_{sun},\\Omega_V)_{v=1..N}\\), \\(T_{spec}(j,\\Omega_I, \\Omega_V)_{I=1..S,v=1..N}\\), \\(TG(j,\\Omega_V)_{v=1..N}\\), \\(TG_{spec}(j,\\Omega_V)_{v=1..N}\\), \\(S_1(j,\\Omega_{sun},\\Omega_V)_{v=1..N}\\), \\(S_{1,moy}(j,\\Omega_V)_{v=1..N}\\), \\(S_M(j,\\Omega_V)_{v=1..N}\\), \\(p_1(j,\\Omega_V)_{v=1..N}\\)}; S= Number of angular sectors.</p> <p><code>*_diff_mc</code> and <code>*spec_mc</code>: created for Lidar and Monte Carlo modes (see below).</p> <p><p>File <code>*_diff_mc</code>: \\(T(\\Omega_n, \\omega_i)\\) with \\(n \\in [1;\\:N+1]\\) and \\(i \\in [1\\:100]\\). Sun direction is n=1</p></p> <p><code>j3D...transm</code> file (see below): \\(G(\\Omega_i)\\) for \"all directions of directions.txt + sun direction with null solid angle\".</p> <p><p>File <code>j3D_...txt_transm</code> (\\(G(\\Omega)\\) for 100 directions + sun direction (101). Spherical LAD.</p></p>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#3-optical-properties-sql-databases-lambertian_mineraldb","title":"3) Optical properties SQL databases (Lambertian_mineral.db,\u2026)","text":"<p>The \"Database Manager\" (III.7.11) manages DART SQL databases (see below) that store in tables optical properties from users or databases (e.g., speclib.jpl.nasa.gov, icess.eri.ucsb.edu/modis/EMIS/html/em.html, usgs.gov/labs/spec-lab).</p> <p><p>Parameters (cf. III.4.9) of DART default databases with header and 1st line of one of their models.</p></p> <p>Surface: \\(\\rho_{specular} = A.\\rho_{Fresnel}\\) (refraction index n): cst, Gaussian or parabolic in a cone (angular_divergence) around specular direction.</p> <p>Turbid:for each surface element \\(\\rho_{leaf,specular,turbid medium} = K_{fj}(\\Psi_{fs}).\\rho_{Fresnel}\\) (\\(n_{inf}\\) or \\(n_{sup}\\)), with \\(K_{fj}(\\Psi_{fs})=K_{fj0}.e^{[-k_{fj}.tan(\\Psi_{fs})]}\\).</p> <p>Units: \\(\\mu m\\) for wavelength, 1 = 100% for reflectance / transmittance, no unit for albedo, \u00b0 for angle, and \\(m^2\\) for cross section (sigma). The optical depth of a gas/aerosol layer (volume density N, depth \\(\\Delta l\\)) is: \\(N.Sigma.\\Delta l\\).</p> <p>Fluids. Two types of scattering phase functions \\(\\frac {P(\\Psi_{sv})} {4\\pi}\\). Their selection is automatic: it depends on their number of parameters.</p> <ul> <li> <p>Rayleigh (gas,\u2026): \\(\\frac {P(\\Psi_{sv})} {4\\pi}=\\frac {1} {4\\pi}.[a.(1+cos^2(\\psi_{sv})) + c]\\); \\(\\Psi_{sv} = phase\\:angle\\) (forward scattering \\(\\implies\\) \\(\\Psi_{sv}=0\\)), \\(cos(\\Psi_{sv}) = [cos(\\theta_v).cos(\\theta_s) + sin(\\theta_s).sin(\\theta_v).cos(\\Phi_v-\\Phi_s)]\\)</p> <ul> <li>Parameters for gases: \\(a=\\frac {3} {2}.\\frac {1 - \\delta} {2 + \\delta}\\) with \\(\\delta=\\) polarization ratio (\\(\\delta=0.0279\\) at \\(0.65\\mu m\\)), \\(c=\\frac {3\\delta} {2 + \\delta}\\)</li> <li>Actual Rayleigh function: \\(P(\\Psi_{sv}) \\approx \\frac {3} {2}.\\frac {1 - \\delta} {2 + \\delta}.[\\frac {1 + \\delta} {1 - \\delta} + cos^2(\\Psi_{sv}) \\approx 0.7603 + 0.719.cos^2(\\Psi_{sv})]\\)</li> </ul> </li> <li> <p>Double Henyey-Greenstein (aerosol,...): \\(\\frac {P(\\Psi_{sv})} {4\\pi} = \\frac {1} {4\\pi}.[\\frac {a.(1-g_1^2)} {[1 + g_1^2.2g_1.cos(\\Psi_{sv})]^{3/2}} + \\frac {(1-a).(1-g_2^2)} {[1 + g_2^2.2g_2.cos(\\Psi_{sv})]^{3/2}}]\\:\\:\\:(c \\equiv g_1)\\) with g=0 \\(\\implies\\) isotropic (forwward scattering = backward scattering). g=1 \\(\\implies\\) Dirac (forward scattering)</p> </li> </ul>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#4-3d-factor-matrix-text-file","title":"4) 3D factor matrix text file","text":"<p>It stores multiplicative factors of an optical property per cell, ordered from bottom to top scene (see below), as in the 2D scene display of the simulation editor: origin = top left corner, then columns (y), then lines (x), then altitudes (z).</p> <p>Field separators are semi-column, space, or tab. If the option \u201cDuplicate first voxel layer\u201d is set, the input file is a 2D array that DART duplicates as a 3D array (\\(\\implies\\) constant optical property along the z-axis). If the simulated scene is a sub-zone, the first line of the file must contain the word: sub-zone.</p> <p><p>3D factor matrix text file for a scene with x=4, y=3, z=2.</p></p>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#5-temperature-temperaturestxt-and-temperaturespertrianglepercelltxt","title":"5) Temperature: temperatures.txt and temperaturesPerTrianglePerCell.txt","text":"<ul> <li> <p>temperatures.txt: 3D mean thermodynamic temperature per voxel (for all elements), from bottom to top.</p> </li> <li> <p>temperaturesPerTrianglePerCell.txt: thermodynamic temperatures of face 1 (\\(T_1\\)) and face 2 (\\(T_2\\)) of each triangle t per cell (i,j,k). Per line: i.j.k.t:\\(T_1\\);\\(T_2\\);A, with triangle area A.</p> </li> </ul>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#6-triangles-area-per-voxel-darttyp","title":"6) Triangles area per voxel, dart.typ,\u2026","text":"<ul> <li> <p><code>triAreaPerCell.txt</code> text files (folder \"triAreaPerCell\"): area of all triangles and triangles of type X, per cell.</p> </li> <li> <p><code>dart.typ</code> (text file in input folder): list of present materials (i.e., colors defined in \"3D imported object\").</p> </li> </ul>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#7-plots-plotstxt-and-information-file-covermapexampletxt","title":"7) Plots: Plots.txt and information file CoverMapExample.txt","text":"<p>Plots (ground, vegetation, fluid) can be created in DART GUI (stored in plots.xml file) and/or added using either:</p> <ul> <li><code>plots.txt</code> file. An example is in DART database; the file header gives the format. Very useful if there are many plots.</li> <li>CoverMap image and a text file (<code>CoverMap.txt</code>) that links pixel values Pi and plot parameters (type,\u2026). Examples are in DART database: <code>CoverMapExample.mp#</code> (example: \\(P_i\\) = 1, 3, 5 and 7) and <code>CoverMapExample.txt</code> (see below).</li> </ul> <p><p>Format of the information file of CoverMap.This example (<code>CoverMapExample.txt</code>) is in DART database.</p></p> <p>Each line the field values of a plot, separated by blank characters or tabulation. Useless fields have any value (e.g., 0):</p> <ul> <li>Class name. It must not contain any blank character!</li> <li>Class index. It is the pixel value in the raster map.</li> <li>Use of plot: 1 if the plot is used, 0 if it is not used.</li> <li>H: Average height of the vegetation plot or fluid plot</li> <li>Leaf size (m): for simulating hot spot in short waves.</li> <li>Type of soil phase function: Lambertian: 0, Lambertian + specular: 1, or Hapke: 2</li> <li>HBase: Height of the base of the vegetation plot or fluid plot above the ground</li> <li>\\(\\Omega_{min}, \\Omega_{max}\\), a, b: Angular weights of vegetation function \\(G(\\Omega)\\) (default values (1,0, 0, 0)).</li> <li>LAD: Leaf Angle Distribution </li> <li>After 'LAD column': ellipsoidal LAD \\(\\implies\\) {ALA,0}, elliptical LAD \\(\\implies\\) {Thetam, Eccentricity}, other LAD \\(\\implies\\) {0,0}</li> <li>\\(T_{mean}, \\Delta T\\): Mean temperature and temperature range (K)</li> <li>Name of the spectral database.</li> <li>Type of plot: Ground: 0, Vegetation: 1, Ground + Vegetation: 2, Air: 3</li> <li>\\(\\sigma_H\\): Standard deviation of vegetation or fluid's height.</li> <li>Vegetation plot's LAI or fluid plot's particle volume density.</li> </ul>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#8-turbid-trees-treetxt-and-branchtxt","title":"8) Turbid trees: Tree.txt and Branch.txt","text":"<p><code>Tree.txt</code>: a line per tree. It stores tree parameters in labelled columns (see below):</p> <ul> <li>SPECIES_ID: species, POS_X: X, POS_Y: Y, T_HEI_BELOW: Trunk height below crown,</li> <li>T_HEI_WITHIN (Trunk height within crown), T_DIA_BELOW (Trunk diameter below crown),</li> <li>T_ROT_NUT / T_ROT_PRE (\u00b0): Trunk nutation / precession rotation (\u00b0),</li> <li>C_TYPE: Crown type (0 = ellipsoid, 1=ellipsoid composed, 2=cone, 3=trapezoid, 4=cone composed),</li> <li>C_HEI: Crown height,</li> <li>C_ROT_INT / C_ROT_NUT / C_ROT_PRE (\u00b0): Crown intrinsic / nutation / precession rotation,</li> <li>C_GEO_1: Crown geometry. <ul> <li>If crown type = ellipsoid or ellipsoid composed, C_GEO_1 = 1st axis, </li> <li>if crown type = cone or cone composed, C_GEO_1 = bottom radius,</li> <li>if crown type = trapezoid, C_GEO_1 = bottom length.</li> </ul> </li> <li>C_GEO_2: Crown geometry. <ul> <li>If crown type = ellipsoid or ellipsoid composed, C_GEO_2 = 2nd axis,</li> <li>if crown type = cone or cone composed, C_GEO_2 = top radius,</li> <li>if crown type = trapezoid, C_GEO_2 = bottom width.</li> </ul> </li> <li>C_GEO_3: Crown geometry. <ul> <li>If crown type = ellipsoid composed, C_GEO_3 = half heigth of lower ellipsoid if crown type = cone composed, C_GEO_3 = cylinder height,</li> <li>if crown type = trapezoid, C_GEO_3 = top length,</li> <li>if other crown type, C_GEO_3 = undefined.</li> </ul> </li> <li>C_GEO_4: Crown geometry parameters. <ul> <li>If crown type = trapezoid, C_GEO_4 = top width,</li> <li>if other crown type, C_GEO_4 = undefined.</li> </ul> </li> <li>LAI (optional): tree leaf area if LAI &gt; 0 or leaf volume density if LAI &lt; 0. If present, it replaces the LAI set in the GUI</li> </ul> <p><p>Case \"Exact position + Exact dimensions\": tree file in DART database. Trees 1, 2: ellipsoid, tree 3: cone.</p></p> <p><code>Branch.txt</code> (schematic geometry): \\(N_{branches}\\) followed by 1 branch / line: relativeHeight \\(\\theta\\:\\phi\\) relativeRadius relativeLength \\(N_{facets}\\)</p> <ul> <li>relativeHeight ([0 1]): relative height of branch origin on trunk; % of \"trunk + crown\" height.</li> <li>\\(\\theta\\) (\u00b0), \\(\\phi\\) (\u00b0): zenith and azimuth angles of the branch direction.</li> <li>relativeRadius ([0 1]): branch base relative radius; % of trunk radius at branch base level.</li> <li>relativeLength ([0 1]): branch relative length. For branches below the tree crown: % of mean crown radius. For branches in the tree crown: % of the length \"branch base - point of intersection \"branch - tree crown\".</li> <li>\\(N_{facets}\\): number of facets (triangles) used to build the branch, in addition of the triangles of the branch base.</li> </ul>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#9-3d-object-obj-and-mtl-files-and-object-field","title":"9) 3D object: * .obj and * .mtl files, and object field","text":"<ul> <li>obj &amp; mtl text files (web.cse.ohio-state.edu/~shen.94/581/Site/Lab3_files/Labhelp_Obj_parser.htm, en.wikipedia.org/wiki/Wavefront_.obj_file)</li> </ul> <p>Data needed by DART is in bold. Obj file: it stores a 3D geometric model (vertex coordinates, faces, normals, textures, group names,\u2026); each line starts from a special 1st character or word; indices start from 1. The mtl file stores color per group.</p> <p><p><code>T.obj</code> and <code>T.mtl</code> of centred triangle ABC. \\(AB=\\Delta x=2m\\) in <code>T.obj</code> and DART. Note that DART only affects the display and not the values of \\(M_{xyz}, \\Omega_{sun}\\: and \\:\\Omega_{view}\\).</p> <p>obj and mlt files.</p></p> <ul> <li> <p>Object field: ASCII file with values in full (no scientific notation), separated by spaces or tabulations, with 1 line per description of object. Accepted comments: / \u2026. / and // \u2026. [end of line]'. There are 2 formats: \"exact location + random characteristics\" and \"Exact location + Exact characteristics\"</p> <ol> <li>Exact location + Random characteristics. Per line: Object_Model_Index \\(X_{pos}, Y_{pos}\\) Object_Model_Index: Index of the model of the 3D object. Index 0 is for the 1st model to be input,... \\((X_{pos}, Y_{pos})\\): X and Y Positions (float number in meters) If location \\((X_{pos}, Y_{pos})\\) is outside the scene, the object will not be created. <p>Field file for case \"exact location + random characteristics\". The index informs on the object type. Here, index \"0\" informs that the \\(1^{st}\\) object is \"Wild cherry tree\".</p> </li> <li>Exact location + Exact characteristics<ul> <li>Header: complete transformation</li> <li>Per line: Object_Model_Index \\(X_{pos}, Y_{pos}, Z_{pos}, X_{scale}, Y_{scale}, Z_{scale}, Z_{rot}, Y_{rot}, Z_{rot}\\) </li> </ul> </li> </ol> </li> </ul> <p>Object_Model_Index: Index of the 3D object. Index 0 is for the 1st model to be input in DART, etc.</p> <p>\\(X_{pos}, Y_{pos}, Z_{pos}\\): X, Y and Z Positions (float number in meters). By default: \\(Z_{pos} = 0\\).</p> <p>If location \\((X_{pos}, Y_{pos}, Z_{pos})\\) is outside the scene, the object will not be built. \\(X_{scale}, Y_{scale}\\) and \\(Z_{scale}\\): X, Y and Z scale factors (float number; 1 by default) \\(Z_{rot}, Y_{rot}\\) and \\(Z_{rot}\\): Oz (intrinsic), Oy (nutation) and Oz (precession) rotations (float number; 0 by default)</p> <p><p>Field file: case \"exact location + exact characteristics\". There are two 3D objects: indices 0, 1.</p></p>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#10-solar-constantdb-and-bandirradiancefiletxt","title":"10) Solar constant.db and BandIrradianceFile.txt","text":"<p>Solar_constant.db: 10 spectral solar constant spectra {\\(E_{TOA}(\\lambda)\\): \\(W/m^2/\\mu m\\); specific spectral resolution} stored in tables: CebChKur, ChKur, Kurucz97 (default in Modtran): \\([0.2 \\:- \\:200\\mu m]\\); FonTenla, Kurucz95, Kurucz2005: \\([0.2 \\:-\\: 10^4\\mu m]\\); ThKur1 (Thuillier + corrected Kurucz): \\([0.05\\: -\\: 10^3\\mu m]\\); TSIS2019_0025nm / TSIS2019_01nm / TSIS2019_1nm: \\([0.2\\mu m \\: -\\: 2.73\\mu m]\\) https://lasp.colorado.edu/lisird/data/tsis1_hsrs extended to \\(10^5\\mu m\\) with Kurucz2005. Other tables can be added.</p> <p>Note</p> <p>DART corrects \\(E_{TOA}(\\lambda)\\) of Earth-Sun distance d(J) with an equation \\(E_{TOA} \\equiv \\frac {1} {d(J)^2}\\) similar to ESA https://sentinel.esa.int/web/sentinel/technical-guides/sentinel-2-msi/level-1c/algorithm.</p> <p><code>BandIrradianceFile.txt</code>: it stores \\(E_{BOA}(\\lambda)\\) (i.e., irradiance or solar constant depending on DART option) and \\(SKYL(\\lambda)\\). Options \"No Atmosphere\" and \"Spectral radiation text file\" can use it.</p> <p></p>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#11-atmosphere-sql-input-databases-atmospheredb-h2ogrounddb","title":"11) Atmosphere SQL input databases (atmosphere.db, H2Oground.db)*","text":"<ul> <li> <p>Atmosphere.db User data can be input. Henyey Greenstein parameters result from the fit of Lowtran scattering phase functions. All other spectral data must have the same resolution \\(\\Delta \\nu\\). <code>Atmosphere.db</code> data are derived from the Modtran model \\((\\Delta \\nu=1cm^{-1}\\), 36 layers): 6 gas (USSTD76, SUBARCWIN,\u2026) and 7 aerosol (RuralV5,\u2026) models.</p> <ol> <li>Gas (index g): \\(g_{scat}\\), \\(H_2O\\), \\(O_3\\), \\(N_2\\), \\(CO_2\\), \\(CO\\), \\(CH_4\\), \\(N_2O\\), \\(O_2\\), \\(NH_3\\), \\(NO\\), \\(NO_2\\), \\(SO_2\\), \\(HNO_3\\), \\(g_{other}\\)<ul> <li><code>*_gECP</code>: gas density (atm cm/km, except \\(N_2\\): \\(g/cm^2.km\\)) at 36 layers, per gas model (*).</li> <li><code>*_gH2O</code>: spectral transmittance \\(T_{H_2O}\\) (\\(T_{H_20}^{continuum}, T_{H_20}^{line-by-line}\\)), for N \\(H_2O\\) content (default value x 0.1 n), with \\(n \\in [1\\:N]\\) the index of the N tables (21 for USSTD, 16 for Sub Artic winter,\u2026)</li> <li><code>*gTEMP</code>: gas temperature &amp; pressure (atm-cm/km; for \\(N_2\\) and gas_scat: relative density to air at STP) at 36 altitudes.</li> <li><code>*gTRANS</code>: total up and down spectral transmittance of absorbing gases \\(T_{gas,abs}^{\\uparrow \\downarrow}\\) (t_total_ud_abs), and spectral transmittance of all scattering gases \\(T_{gas,scat}\\) (t_mol_scat) and per absorbing gas \\(T_{gas,abs}.T_{H_2O} = T_{H_2O}^{continuum}.T_{H_2O}^{line}\\)</li> <li><code>*g_pH2O</code>: \\(H_2O\\) content (atm.cm, \\(g/cm^2\\) + atm.cm/km at 0 &amp; 1km), temperature (K) at 0 &amp; 1km altitude. <p>Gas table.</p></li> </ul> </li> <li>Aerosol tables (index a)  <ul> <li><code>*gas_model_*_aAOD</code>: spectral Aerosol Optical Depth (AOD) per gas model *.</li> <li><code>*aECP</code>: normalized Extinction Coefficient vertical Profile at 36 altitudes.</li> <li><code>*aHG</code>: Henyey Greenstein (HG) coefficients (a, \\(g_1\\), \\(g_2\\)) at 27 wavelengths.</li> <li><code>*_RH00_aHG</code>, <code>*_RH80_aHG</code>, <code>*_RH99_aHG</code>: HG coefficients per aerosol model that depends on humidity, for 0%, 80% and 99% relative humidity (RH). <code>*aHG</code> is for RH=70%. From the fit of Lowtran scattering phase functions.</li> <li><code>*_AGED_VOLC_aHG</code>, <code>*_FRESH_VOLC_aHG</code>, <code>*_STRT_H2SO4_aHG</code>, <code>*_MET_DUST_aHG</code>: HG coefficients for aerosols that do not depend on humidity.</li> </ul> </li> </ol> </li> </ul> <p> </p> <p>Note</p> <p>Modtran simulations without aerosol are used to compute the absorption gas \"Direct - Direct\" transmittance \\(T_{gas}^{\\uparrow \\downarrow}\\) and scattering gas direct transmittance \\(T_{gas,scat}(T_{gas,scat} = T_{gas,scat}\\)); for the latter one, \\(\\rho_{ground} = 1\\) in DART simulations.</p> <p>Band \\(\\Delta \\lambda\\) without gas absorption: \\(T_{gas}^{\\uparrow \\downarrow} \\approx T_{gas,abs}^2\\), with \\(T_{gas,abs} = T_{CO2,abs}.T_{CO,abs}.T_{CH_4,abs}....T_{O_3,abs}\\).</p> <p>Band \\(\\Delta \\lambda\\) with gas absorption: Beer law becomes inaccurate \\(\\implies\\) \\(T_{gas,abs}^{\\uparrow \\downarrow} \\neq (T_{gas,abs}^{\\downarrow})^2\\). DART uses downward transmittance \\(T_{gas,abs}^{\\downarrow} = T_{gas,abs} = T_{CO_2,abs}.T_{CO,abs}....T_{O_3,abs}\\) and upward transmittance is \\(T_{gas,abs}^{\\uparrow} = \\frac {T_{gas}^{\\downarrow \\uparrow}} {T_{gas,abs}^{\\downarrow}.T_{gas,abs}^{2}}\\)</p> <p><p>a) Tables of atmosphere database.</p> <p><p>b) \\(E_{TOA}\\). c) HG coefficients.</p></p> <p><p>DART database. a) Modtran \\(P_{H_2O}^{Mod}\\) per gas model and \\(T_{atm,H_2O}(\\nu ;\\Delta \\nu =1cm^{-1})\\) for \\(n.P_{H_2O}^{Mod}\\) with \\(n \\in [1\\:N]\\). N is gas dependant (21 for USSTD76,...). For any \\(P_{H_2O}\\), DART interpolates on the n \\(T_{atm,H_2O}\\). b) \\(\\Delta \\tau_{a}^{Mod}\\) (550nm) for 8 aerosol types, per gas model; inaccurate for fog because \\(T_{fog}^{Mod}\\) is with 4 digits.</p></p> <ul> <li>H2Oground.db Modtran-derived \\(H_2O\\) cross section at 71 bands ([\\(7\\mu m\\: 14\\mu m]\\), \\(\\Delta \\lambda=0.1\\mu m\\)), 8 distances (1m, 10m, 50m, 100m, 150m, 250m, 500m, 1km), 8 pressures (880Pa, 920Pa, 950Pa, 980Pa, 1kPa, 1013.15Pa, 1025Pa, 1050Pa), 36 relative humidities ([0.3 1], \\(\\Delta rh=0.02\\)), and 29 temperatures ([259K 315K], \\(\\Delta T=2K\\)). Maket Atmosphere can use it with a mean distance value for scenes with \"air\", to compute extinction coefficients that replace those of the atmosphere extrapolated into the scene. It can greatly improve the simulation of TIR camera in the scene.</li> </ul>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#12-atmosphere-output-files","title":"12) Atmosphere output files","text":"<ul> <li>Atmosphere.nc </li> </ul> <p>The phase module creates it using the atmosphere.xml file and atmosphere database. For each DART band, it stores: the 1D profiles (36 levels) of temperature, pressure, and gas and aerosol density, and also the transmittance for scattering gasses, the transmittance for absorption of most gases, the total up-and-down transmittance for gas absorption, the aerosol optical depth, single scattering albedo and Henyey Greenstein parameters, and the equivalent absorption cross section (z from 0 to 100km, \\(\\Delta l\\)=7km) of 5 gases (CO2, H2O, O3, CH4, N2O). These quantities are used to simulate atmosphere RT and to derive EBOA from ETOA (analytic model).</p> <ul> <li>AtmosphereMaket.nc</li> </ul> <p>The maket module creates it if there is \"Atmosphere RT\". It stores the atmosphere geometry (number of layers for each MA and HA atmosphere, etc.), and information per layer n: temperature, transmittance for gas scattering and gas absorption, up-and-down transmittance for gas absorption, Henyey Greenstein coefficients of aerosols, gas and aerosol mean gas and aerosol extinction coefficients and scattering albedo (\\(\\alpha_{e,gas,n}\\), \\(\\omega_{gas,n},\\) \\(\\alpha_{e,aerosol,n}\\), \\(\\omega_{aerosol,n}\\)), and coefficients {\\(A_n,B_n,C_n,D_n\\)} used to compute \\(\\alpha_{e,gas}(z)\\), \\(\\omega_{gas}(z)\\), \\(\\alpha_{e,aerosol}(z)\\), \\(\\omega_{aerosol}(z)\\). With the relative altitude (\\(t(z=z_n)=0, t(z_n+\\Delta z_n)=\\Delta z_n\\)): optical depth \\(\\delta \\tau_n(t) = A_n.t^3 + B_n.t^2 + C_n.t+D_n\\), extinction coefficient \\(\\alpha_{e,n}(t)=-3A_n.t^2- 2B_n.t-C_n\\). We have: \\(\\delta \\tau_n(0)=\\Delta \\tau_n, \\delta \\tau_n(\\Delta z_n)=0\\), \\(\\alpha_{e,n}(0)=\\alpha_e(z_n)\\), \\(\\alpha_{e,n}(\\Delta z_n)=\\alpha_e(z_n+\\Delta z_n)\\).</p> <ul> <li> <p>Atmosphere radiance: 4 products stored in the folder \"output\", if required in the \"Atmosphere\" menu.</p> <ul> <li>atmosphere_radiance_before_coupling.binary (see images below). . {\\(N_{direction}, cos(\\theta).\\Delta \\Omega\\), \\(N_{MA horizontal cells}\\), X} with \\(X = L_{atm,BOA}^{\\downarrow}\\) (\\(L_{direct sun,BOA}^{\\downarrow}\\) with \\(cos(\\theta_{sun}.\\Delta \\Omega_{sun}=0.1\\)), \\(L_{atm,sensor}^{\\uparrow}\\), \\(L_{atm,sensor}^{\\downarrow}\\) (\\(L_{direct,sun,sensor}^{\\downarrow}\\)), \\(L_{atm,TOA}^{\\uparrow}\\) \\(\\forall \\Omega\\), and TOA irradiance \\(\\downarrow\\), absorbed energy \\((W_{HA,abs}, W_{MA,abs})\\) before Earth-Atmosphere coupling for \\((\\lambda_1,\\lambda_2,\u2026)\\)}. DART simulations, possibly with a different number of spectral bands can use it. Data \"\u2026 shifts\u2026.\" is for the option \"scene with infinite slope\". Option \"View\" can export/import it: binary \\(\\Leftrightarrow\\) csv.</li> <li>atmosphere_radiance_after_coupling_BOA_total.binary (see images below): . It has the same format as 'atmosphere_radiance_before_coupling', for BOA level only.</li> <li>AtmosphereOrder1Radiance (radiance\\TOA folder): {\\(\\theta,\\phi, L_{atm,TOA,order1,\\lambda}^{\\uparrow}(\\theta,\\phi)\\)}. No ground interaction.</li> <li>AtmosphereRadiance (radiance\\TOA folder): {\\(\\theta,\\phi, L_{atm,TOA,total,\\lambda}^{\\uparrow}(\\theta,\\phi)\\)}. No ground interaction.</li> </ul> </li> <li> <p>Atmosphere scattering function: binary file AtmospherePhaseFunction \\(T(\\Omega_s, \\Omega_v)\\) for gas and aerosol. The menu \"View/Report-Data files / Scattering functions\" exports this file as a text file. The menu \"View / Directions 3D\" displays all \\(T(\\Omega_s^{'},\\Omega_v)\\) for incident \\(\\Omega_s^{'}\\) (option \"Incident\"), and all \\(T(\\Omega_s, \\Omega_v^{'})\\) for scattered \\(\\Omega_v^{'}\\) (option \"scattered\"). </p> </li> <li>Atmosphere spectral transfer functions TF. dart computes these TFs if in the \"Atmosphere\" menu one sets the option. These TFs are used in further simulations for fast derivation of TOA and Sensor products from BOA products without simulating atmosphere RT, which saves computer time.<ul> <li>atmosphere_transfer_function_from_MA.binary (see below): it is created if one asks for \"Atmosphere radiance before coupling\": \\(TF_{MA-HA}^{scat}(\\Omega^{\\uparrow}, \\Omega^{\\uparrow})\\), \\(TF_{MA-BA}^{scat}(\\Delta i, \\Delta j, \\Omega^{\\uparrow}, \\Omega^{\\downarrow})\\), \\(TF_{MA-Sensor}^{scat}(\\Delta i, \\Delta j, \\Omega^{\\uparrow}, \\Omega^{\\uparrow \\:or\\: \\downarrow})\\)</li> <li>atmosphereTransferFunctions.binary (see below): transfer functions (BOA \\(\\rightarrow\\) BOA,Sensor,TOA): \\(TF_{BA-BA}^{scat}(\\Delta i, \\Delta j, \\Omega^{\\uparrow}, \\Omega^{\\downarrow})\\), \\(TF_{BA-HA}^{scat}(\\Delta i, \\Delta j, \\Omega^{\\uparrow}, \\Omega^{\\uparrow})\\), \\(TF_{BA-Sensor}^{scat}(\\Delta i, \\Delta j, \\Omega^{\\uparrow}, \\Omega^{\\uparrow})\\) and \\(TF_{BA-Sensor}^{scat}(\\Delta i, \\Delta j, \\Omega^{\\uparrow}, \\Omega^{\\downarrow})\\), from \\(TF_{BA-BA}^{scat}(\\Omega^{\\uparrow}, \\Omega^{\\downarrow})\\), etc. </li> </ul> </li> </ul> <p><p><code>Atmosphere_radiance_before_coupl.binary</code>. Here: 2 bands in mode R, 10 x 10 scene, atmosphere = HA + MA layers with 1 horizontal cell. No pixel / distance shift with \"repetitive\" scenes. 101 direction indices (sun direction index = 100; \\(cos(\\theta_{sun}.\\Delta \\Omega_{sun}=0.1 \\implies E_{sun}=0.1.L_{sun}\\)). Rows: '\\(cos(\\theta).\\Delta \\Omega\\)', 'BOA / Sensor / TOA spectral radiance: \\(W/m^2/sr/\\mu m\\)'.</p></p> <p><p><code>Atmosphere_radiance_after_coupl.binary</code>. Same options as the previous tables.</p></p> <p><p><code>atmosphere_transfer_function_from_MA.binary</code>. Here, same options as the previous tables.</p></p> <p><p><code>atmosphere_transfer_function_from_MA.binary</code>. Transfer functions: \\(TF_{BA-HA}^{scat}(\\Omega^{\\uparrow}, \\Omega^{\\uparrow})\\), \\(TF_{BA-Sensor}^{scat}(\\Omega^{\\uparrow}, \\Omega^{\\downarrow})\\), \\(TF_{BA-Sensor}^{scat}(\\Omega^{\\uparrow}, \\Omega^{\\uparrow})\\), \\(TF_{BA-BA}^{scat}(\\Omega^{\\uparrow}, \\Omega^{\\downarrow})\\), \\(TF_{BA-HA}^{dir}(\\Omega^{\\uparrow}, \\Omega^{\\uparrow})\\) + offset, \\(TF_{BA-Sensor}^{dir}(\\Omega^{\\uparrow}, \\Omega^{\\downarrow})\\) + offset. Same options as the previous tables.</p></p> <ul> <li>AtmosphereReport.txt (folder BANDn of each band n). It is created by dart module. It stores:<ul> <li>energy intercepted, absorbed, incident on TOA &amp; BOA (total sum must be a constant) during sun illumination \\((W/\\mu m)\\) and \"BOA \\(\\rightarrow\\) TOA\" transfer (no unit: initial energy per direction = 2048) per iteration of atmosphere R.T. The number of iterations is lmited by its maximal value and a threshold set in the \"Atmosphere\" menu.</li> <li>BOA SKYL and irradiance (\\(E_{dir}\\): direct sun, \\(E_{diff}\\): atmosphere, \\(E_{coupl}\\): \"Atmosphere - Earth\" coupling, \\(E_{total}\\): total; 2 units: \\(W/m^2/\\mu m\\) and %), with no, unique and infinite atmosphere backscattering</li> </ul> </li> </ul> <p><p>Example of AtmosphereReport.txt file.</p></p>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#13-sensor-input-files","title":"13) Sensor input files","text":"<ul> <li>Sensor spectral sensitivity \\(s(\\lambda)\\):<ul> <li>\\(1^{st}\\) line: \\(\\lambda_{min}-\\epsilon\\) (\\(\\lambda_{min}\\) : \\(1^{st}\\) wavelength with non zero gain)</li> <li>\\(2^{nd}\\) line: \\(\\lambda_{min}\\) xxx</li> <li>...</li> <li>before last line: \\(\\lambda_{max}\\) xxx wavelength slightly smaller than.</li> <li>Last line: \\(\\lambda_{max} + \\epsilon\\) 0.00 (\\(\\lambda_{max}\\): last wavelength with non zero gain.)</li> </ul> </li> </ul> <ul> <li><code>Sensors.txt</code> (menu <code>Sensor/Frame Camera</code>): multi-frame-camera \\(\\mathcal{C}\\). 1 line per \\(\\mathcal{C}\\): \\(\\mathcal{C}\\) position \\(\\mathcal{C}\\) rotation (\u00b0) \\(\\mathcal{C}\\) ground area (projected zone on the ground (m).). Separator: space, tabulation</li> </ul> <ul> <li><code>theta.txt</code>, <code>phi.txt</code> (menu 'Sensor / Pushbroom'): \\(\\theta\\), \\(\\phi\\) (\u00b0) for pixels of pushbroom image at ground level (scene minimal altitude). Separator: space, tabulation.</li> </ul>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#14-reflectance-temperature-and-radiance-files","title":"14) Reflectance, temperature and Radiance files","text":"<ul> <li>Monoband results (see the image a. below): files \\((\\theta, \\phi, X_{\\Delta \\lambda}(\\theta,\\phi))\\), with \\(X = \\rho\\), T or L, and u = BOA, sensor or TOA. They are in Band i \\ Iter j folders (n = band number, j = iteration number).</li> <li>Multi-band results (see the image b. below): files \\((\\theta, \\phi, X_{\\Delta \\lambda_1}, X_{\\Delta \\lambda_2},\u2026)\\). They are in the \"output\" folder</li> </ul> <p><p>a) Mono-band reflectance file. b) Multi-band reflectance file.</p></p>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#15-simulationpropertiestxt-and-darttxt","title":"15) Simulation.properties.txt and dart.txt","text":"<ul> <li><code>Simulation.properties.txt</code>: DART modules input / output data. Keys indicate which module creates and/or uses it.</li> </ul> <p><p>Simulation.properties file (left) and its viewer in the \"View\" menu (right).</p></p> <ul> <li><code>dart.txt</code>: a few DART input data and results (i.e., \\(E_{TOA}, E_{BOA}, A_{BOA}, M_{BOA}\\),... per band) that can be used to check thesimulation. Scene albedo \\(A_{BOA}\\) / Brightness temperature \\(T_{BOA}\\) and also exitance \\(M_{BOA}\\) are per DART iteration and for an infinite extrapolation. They result of angular integrals of scene directional radiance. Note that the albedo image is the integral over the only stored DART ortho images. The extrapolated \"A /T\" allows one to determine the smaller number of iterations necessary to get an accurate \"A /T.</li> </ul>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#16-raster-files-dart-images-dem","title":"16) Raster files (DART images, DEM,...)","text":"<p>Format of raster image (binary file) is ILWIS: binary file (name.mp#) + header file (name.mpr) (see below).</p> <p><p>Example of ILWIS header file. \"CoordBounds\" and \"Size\"are the only fields that DART needs.</p></p>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#17-radiative-budget-rb-of-voxels-and-triangles","title":"17) Radiative budget (RB) of voxels and triangles","text":"<p><p>RB files example. See Radiative budget (RB) for units and definitions. a) RadiativeBudgetFigures: per facet. b) RadiativeBudget_profile. c) RadiativeBudget_3D. d) RadiativeBudget_3D_ground, 3D_typeNum=u. e) RadiativeBudget_Triangles: per type of element.</p></p>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#18-broadband-files","title":"18) BroadBand files","text":"<p>Broad band products can be computed using spectral weights (e.g., sensor spectral sensitivity: IV.14)</p> <ul> <li><code>BroadBand_data.txt</code>: it has 6 columns and a number of lines equal to the number of spectral bands:</li> </ul> <p><p>RB files of example. See Radiative budget (RB) for units and definitions.</p></p> <ul> <li><code>Exitance.txt</code>: broadband exitance in \\(W/m^2\\) and \\(W/m^2/\\mu m\\).</li> <li><code>Irradiance.txt</code>: broadband irradiance in \\(W/m^2\\) and \\(W/m^2/\\mu m\\).</li> <li>RadiativeBudget_3D &amp; RadiativeBudget_profile: 3D (cell) &amp; 1D (scene layer) broadband radiative fluxes: <p>RB files of example. See Radiative budget (RB) for units and definitions.</p></li> <li>RadiativeBudget_per_element: broadband irradiance \\((W/m^2)\\) and for each scene element the downward (incident), upward, intercepted, absorbed and scattered fluxes.</li> </ul>"},{"location":"Format_DART_files/1-All_dart_modes/all_dart_modes.html#19-fluorescence-input-and-output-files","title":"19) Fluorescence: input and output files","text":"<p><code>fluorescence_x_y.txt</code> (lib_phase folder): the Phase module creates it; x=type of turbid material (cf. 4)), y=index of Vegetation optical property (y=0 for the 1st element). It stores the 4 Fluspect matrices, after their spectral resampling to DART bands, in the following order: backward PSI, backward PSII, forward PSI, forward PSII.</p> <p>In the case of N bands, each matrix is:  \\(\\begin{pmatrix}  band\\:1\\rightarrow band\\:1 &amp; ... &amp; band\\:1\\rightarrow band\\:N \\\\ ... &amp; ... &amp; ... \\\\ band\\:N\\rightarrow band\\:1 &amp; ... &amp; band\\:N\\rightarrow band\\:N \\\\ \\end{pmatrix}\\)</p> <p>y.Leaf_fluorescence (lib_phase folder): \\(T_{SIF}(\\Omega_{in},\\Omega_{out})\\) function created by Phase module, similarly to {\\(T_{diff}(\\Omega_{sun},\\Omega_i)\\), \\(T_{diff}(\\Omega_{sector,k},\\Omega_i)\\), \\(TG_{diff}(\\Omega_i)\\)} in section 2). y=index of Vegetation optical property; y=0 for the \\(1^{st}\\) element.</p> <p><code>yieldsPerTriangle.txt</code>: \\(PSI_{fluorescence-yield}\\) and \\(PSII_{fluorescence-yield}\\) per triangle (1 line / triangle). PS yields are the same for all triangles if the file stores 2 values only.</p> <p><code>profileEta.bin</code> or <code>profileEta.txt</code>: same format for etau and etah: \"line 1: \\(N_{layer}\\) (number of layers) \\(N_\\theta\\) (number of \\(\\theta\\) values) \\(N_{\\phi}\\) (number of \\(\\phi\\) values)\", \"line 2: values of \\(\\theta\\) \", \"line 3: values of \\(\\phi\\) \", \"lines 4 to \\(N_{layer}\\) +3: eta values\". \\(N_{\\theta} =N_{\\phi} =1\\) for etah . SCOPE default values: \\(N_{layer} =60\\) , \\(N_{\\theta} =13\\) (\\(\\theta \\in\\) [5:10:75 ;81:2:89]) and \\(N_{\\phi} =36\\) (\\(\\phi \\in\\) [5:10:355]).</p> <p></p> <ol> <li> <p>www.researchgate.net/profile/Didier_Gillotay/publication/226667402_The_Solar_Spectral_Irradiance_from_200_to_2400_nm_as_Measured_by_the_SOLSPEC_Spectrometer_from_the_Atlas_and_Eureca_Missions/links/004635155b63cea072000000.pdf \u21a9</p> </li> </ol>"},{"location":"Format_DART_files/2-DART_FT/dart_ft.html","title":"2 - DART-FT","text":""},{"location":"Format_DART_files/2-DART_FT/dart_ft.html#1-makettxt","title":"1) Maket.txt","text":"<p>The Earth scene mock-up (i.e., 3D cell matrix) can be stored with DAO associated format or as a text file (<code>Maket.txt</code>: see below). Cells have the same format: index of the cell content (e.g., 4 for roads: see below), number \\(N_{fig}\\) of facets, index of each facet, number \\(N_{turbid}\\) of turbid media, and for each one the LAI and leaf phase function.</p> <p><p>Format of each DART cell in <code>maket.txt</code>.</p></p> <p>Terms {\\(\\sigma_e(\\lambda),\u2026\\)} are in the <code>simulation.properties.txt</code> file. Dart module uses them. They can be user defined or derived from the Atmosphere database.</p> <p><p>Example of <code>maket.txt</code> file.</p></p> <p>\\(\\Delta X=\\Delta Y=3m\\). \\(\\Delta x=\\Delta y=\\Delta z=1m\\). Trapezoid tree {\\(H_{trunk}=1.99m\\), crown=1cell, \\(LAI_{tree}=4\\)}. Bottom cells (index 2): Ground + Vegetation plot {(0,1) - (3,3), \\(LAI_{plot}=1.36\\)}.</p> <p><p>Indices of scene elements in the maket.txt file. DEM: digital elevation model (MNT in French).</p></p>"},{"location":"Format_DART_files/2-DART_FT/dart_ft.html#2-triangles-files-trianglestxt-cover","title":"2) Triangles files: triangles.txt, %cover","text":"<ul> <li><code>Triangle.txt</code> binary file (see below): all triangles of the mock-up (e.g., walls) in the same order as triangle radiative budget files. Note that this order varies per \"Maket\" run, because \"Maket\" is multithreaded.</li> </ul> <p><p>Triangle.txt file. Per line: triangle (0) or parallelogram (1) - (x,y,z) coordinates of the 3 triangle corners - Type of scatterer (i.e., lambertian,..) - Scatterer property index - Temperature property index - Simple (0) or double (1) face - Type of scatterer (i.e., lambertian,..) - Scatterer property index - Temperature property index - Type of surface (ground: 2, wall: 10,\u2026).</p></p> <ul> <li>coverRate images (folder coverRate): images that indicate the cover rate of all elements and per element.</li> </ul>"},{"location":"Format_DART_files/3-DART_RC/dart_rc.html","title":"3 - DART-RC","text":""},{"location":"Format_DART_files/3-DART_RC/dart_rc.html#1-input-files","title":"1) Input files","text":"<p>The folder <code>\u2026/DART/database/Lidar_files</code> provides the examples of three input files.</p> <ul> <li><code>Impulse_time.txt</code> (see the image a. below): 1D temporal distribution of emitted laser pulse.</li> <li><code>Impulse_spatial.txt</code> (see the image b. below): 2D spatial distribution of emitted laser pulse \\((N(x_1,y_1), N(x_2,y_1)\\),....) Map spatial separation and x / y offsets from the map center to the pulse center must be set.</li> <li><code>Swath_ALS.txt</code> (see the image c. below): x,y,z,q,f,h per line (pulse). Any point (x,y,z: in meter) along each pulse path, viewing zenith \\(\\theta\\) ([0\u00b0(nadir) 90\u00b0]) and azimuth \\(\\phi\\) ([0\u00b0(south) 360\u00b0], counterclockwise direction) angles from target to Lidar, Lidar height h (in meter). For \"Multiple pulse / ALS\".</li> </ul> <p><p>Menu of LiDAR input files.</p></p>"},{"location":"Format_DART_files/3-DART_RC/dart_rc.html#2-output-files-single-pulse","title":"2) Output files: Single pulse","text":"<ul> <li><code>pulse.txt</code>: time variation of the emitted laser pulse. Used to convolve raw DART lidar signal (<code>LIDAR_DART_wave.txt</code>).</li> </ul> <p><p><code>Pulse.txt</code> example:bin, time, normalized energy.</p></p> <ul> <li><code>LIDAR_DART_wave.txt</code> (<code>LIDAR_DART_wave_1stOrder.txt</code>): raw DART waveform (i.e., photons emitted at same time).</li> </ul> <p><p>LIDAR_DART_wave.txt example: bin, time (ns), path length (m), number of photons. Ground bin is 20 here.</p></p> <ul> <li><code>LIDAR_CONVOLVED_wave.txt</code> (<code>LIDAR_CONVOLVED_wave_1stOrder.txt</code>): raw waveform convolved with emitted pulse</li> </ul> <p><p>LIDAR_CONVOLVED_wave.txt example: time relative to the ground, number of photons.</p></p> <ul> <li><code>photonInformations.binary</code> (only in DART-RC): Lidar 3D view uses it. Possibly very large.</li> </ul> <p><p>Example of photonInformations file: Photon total path (m), Number of scattering events, Photon weight, Bin index, Type of last scatterer, Boolean (0/1) that indicates if the photon interacted with the ground, Coordinates (x,y,z) of the last scattering point, 3D (x,y,z) waveform.</p></p> <ul> <li><code>statIllumination_MC0.txt</code> (only DART-RC)</li> </ul> <p>Statistical results about lidar photons. Sum of photons: numbers of photons that are launched, that escaped the scene, that were absorbed, that reached the ground (index 1), that were lost,\u2026 </p> <p>Order 1 sum of photons: numbers of \\(1^{st}\\)-order photons that are scattered and absorbed, etc.</p> <p><p>Example of file <code>stat_illumination_MC0.txt</code></p></p> <ul> <li> <p>LiDAR images (DART-RC): <code>LidarBOA.mp#</code>, <code>LidarBOAMaketFrame.mp#</code>, <code>LidarBOAReflectance.mp#</code>, <code>LidarPulse.mp#</code>, <code>PhotonReachedGround(MaketFrame).mp#</code>, <code>PhotonReachedMaket(MaketFrame).mp#</code></p> </li> <li> <p>LiDAR images (DART-Lux LiDAR mode):</p> <ul> <li> <p><code>ima_camera_lidar_i_j.mp#</code>: number of returned photons projected at lidar location; i = grid line (i.e., azimuth) and j = column (i.e., range) of lidar pulses. i = j = 0 for single pulse. It is the sum of all \"ima_camera_lidar_i_j_bin=k.mp#\".</p> </li> <li> <p><code>ima_camera_lidar_i_j_bin=k.mp#</code>: returned laser power image at k bin. In the image below, \u201cbin=133\u201d corresponds to the ground elevation. If bin number &gt;133, the returned photons are from the multiple scattering, the image records the apparent location of scatterers.</p> </li> </ul> </li> </ul> <p><p>Example of LiDAR image products in DART-Lux LiDAR.</p></p>"},{"location":"Format_DART_files/3-DART_RC/dart_rc.html#3-output-files-multi-pulse","title":"3) Output files: Multi pulse","text":"<ul> <li><code>LIDAR_IMAGE_FILE.binary</code> (Yin et al., PhD, CESBIO, 2015) (see below): It stores \\(N_{Acq}\\) lidar waveforms acquisitions. It has 4 parts: i) Bytes [1 50]: Product name and version number N.NN (e.g., 1.00, 1.01, ..., 1.10, ..., 2.00); ii) Bytes [51 62]: Format description record; iii) Bytes [63 90]: Global parameters record; iv) Bytes [91 \u2026]: Data record.</li> </ul> <p><p>Format of LIDAR_IMAGE_FILE.binary file.</p></p> <ul> <li><code>LIDAR_IMAGE_panel.txt</code>: {i (grid line), j (grid column), look angle (&gt;0 for Lidar right view, &lt;0 for Lidar left view), viewing zenith (&gt;0) and azimuth angles, illuminated and viewed disks radii at ground level in Lidar reference, footprint centers and Lidar sensor locations (x,y,z) in the Earth scene reference} per node of the swath grid.</li> </ul> <p><p>Example of <code>LIDAR_IMAGE_panel.txt</code>.</p></p> <ul> <li><code>LIDAR_IMAGE_STATUS.txt</code> It informs on simulation advance through a simultaneous update with the <code>LIDAR_IMAGE_FILE.binary</code> file.</li> </ul> <p><p>Example of <code>LIDAR_IMAGE_status.txt</code>.</p></p> <ul> <li> <p><code>Images 'LiDAR'</code>: they show all pulses, except the LidarBOA, LidarBOAReflectance and LidarPulse images.</p> </li> <li> <p><code>DetectedPoints.txt</code> in multi-pulse discrete return mode: Coordinates (x,y,z) of point cloud in Earth scene reference, Index of pulse, Number of returns, Index of returns, Intensity information related to \u201coutput intensity value type\u201d.</p> </li> </ul> <p><p>Example of Discrete return <code>DetectedPoints.txt</code> (option \"Gaussian Decomp. All\").</p></p> <ul> <li><code>DetectedPoints.txt</code> in multi-pulse photon counting mode: Coordinates (x,y,z) of photon cloud in the Earth scene reference, Index of pulse.</li> </ul> <p><p>Example of Photon counting <code>DetectedPoints.txt</code>.</p></p> <ul> <li>Output files: Solar noise<ul> <li>Solar images (DART-RC): <code>ima_camera_lidar_SN_i_j_VZ=***_*_VA=***_*.mp#</code></li> <li>Solar images (DART-Lux LiDAR mode): <code>ima_camera_SN_i_j.mp#</code>,</li> <li><code>Solar_noise.txt</code> (see below): {i (grid line), j (grid column), average sun radiance (\\(W/m^2/sr/\\mu m\\)), Solar power received by LiDAR (W), Solar energy per bin (J), Number of sun photons per bin}. <p>Example of <code>Solar_noise.txt</code>.</p></li> <li><code>rad0.txt</code> (see below): a i*j array, average solar radiances of all nodes.</li> </ul> </li> </ul> <p><p><code>Example of rad0.txt</code>.</p></p>"},{"location":"Format_DART_files/4-DART_LUX/dart_lux.html","title":"4 - DART-Lux","text":""},{"location":"Format_DART_files/4-DART_LUX/dart_lux.html#1-scenecfg-and-scenescn","title":"1) <code>Scene.cfg</code> and <code>Scene.scn</code>","text":"<p>The scene description language (SDL: wiki.luxcorerender.org/LuxCore SDL Reference Manual v2.5) defines scene objects, materials, textures,... The Phase module creates the scene file <code>scene.scn</code> (optical / temperature properties, leaf size, LAD, name of turbid transfer function) and configuration file scene.cfg (\\(N_{spectral bands}\\), name of scene.scn file) (see below). The Maket module updates the <code>scene.scn</code> file.</p> <p>Warning</p> <p>File <code>scene.scn</code> is very large for scenes with many volumes (e.g., turbid cells), especially for large \\(N_{scene-repetition}\\).</p> <p><p>Files <code>scene.cfg</code> and <code>scene.cn</code> of simulation LuxFileFormat (see below): 5 objects located in 3 .ply files.*</p></p> <p><p>Simulation LuxFileFormat. a) 1 x 1m ground (\\(\\rho_{lambertian0}\\)) + field of 2 squares: (\\(\\Delta l= z=0.5m\\); scale 0.4; no rotation), (\\(\\Delta l=0.6m\\), z=1m; scale 0.3; rotation 0\u00b0/-30\u00b0/0\u00b0)}. Square: 2 triangles, 2 groups (leaf: \\(\\rho_{lambertian1}\\), color leaf: index 102; stem: \\(\\rho_{lambertian2}\\), color trunk: index 103) \\(\\implies\\) 5 objects. T: 300K; \\(\\Delta T: 20K\\). b) \\(\\overline{\\lambda}: 0.56\\mu m\\); \\(\\Delta \\lambda: 0.02\\mu m\\), mode R. c) \\(\\overline{\\lambda}: 10\\mu m\\); \\(\\Delta \\lambda: 0\\mu m\\), mode T.</p></p>"},{"location":"Format_DART_files/4-DART_LUX/dart_lux.html#2-file-ply","title":"2) File <code>*.ply</code>","text":"<p>Ply format (https://en.wikipedia.org/wiki/PLY_(file_format) was created in the mid-90s because the Wavefront <code>.obj</code> format lacked extensibility for arbitrary properties and groupings. A single object is a list of flat polygons with properties: color and transparency, surface normals, texture coordinates and data confidence values. Properties of polygon front and back faces can differ. Here, we have 3 <code>.ply</code> files: <code>triangle0.ply</code> (1 triangle), <code>triangle1.ply</code> (1 triangle) and <code>__FlatGroundDEM__.ply</code> (2 triangles). A volume is defined by its bounding facets (e.g., 12 triangles for a cube). DART stores ply files in binary; it can convert them to txt file (menu\"View / \u2026.).</p> <p><p><code>Triangle1.ply</code> of simulation LuxFileFormat: 3 vertices, 1 face.</p></p>"},{"location":"Format_DART_files/4-DART_LUX/dart_lux.html#3-file-radiativebudgetfigurestxt","title":"3) File <code>RadiativeBudgetFigures.txt</code>","text":"<p><p><code>RadiativeBudgetFigures.txt</code> (band 0 of simulation LuxFileFormat). Values depend on input parameters.</p></p>"},{"location":"Format_DART_files/4-DART_LUX/dart_lux.html#4-file-cellvolumestxt","title":"4) File <code>cellVolumes.txt</code>","text":"<p><code>cellVolumes.txt</code> is used only for the computation of radiative budget of volumes. It stores for each cell containing a volume: the x, y, z indices of the cell, the type of the volume, the volume index and the volume density.</p>"},{"location":"General_advices/general_advices.html","title":"General Advices","text":"<p>Computer time (CT) and memory (RAM) increase with the size and complexity of the simulated landscape, number of products and spatial resolution. Default DART input parameters are for a good \"Accuracy \u21d4 CT, RAM\" trade-off; \u2192 then modify them with care. Files are first searched in the input folder, then in the user database, then in the DART database. </p> <p>With Windows systems, use ANSI coding for the format of text files. CT can be significantly reduced if you:</p> <ul> <li>Deactive the antivirus for the DART folder (only this one!) that contains the DART code and simulations.</li> <li>Deactivate the file indexation () on the disk partition used by DART, at least for SSD disks.</li> <li>Deactivate the \"Windows search service\" () in \"Services\".</li> </ul> <p>Java memory may need to be increased to manage large images: <code>DART_JAVA_MAX_MEMORY=16g</code> (in the <code>dartrc.bat</code> file)</p>"},{"location":"General_advices/general_advices.html#1-optical-and-temperature-properties","title":"1) Optical and temperature properties","text":"<p>Any number of optical and temperature properties can be used. Because computer time increases with the number of defined volume properties to compute, one is advised to define only the properties that are actually used.</p> <ul> <li>Leaf biochemistry (Cab,...), optical properties and BRF. Check the databases: opticleaf.ipgp.fr (Lopex,...).</li> <li>Plant architecture at different growth stages: here.</li> </ul> <p><p>Wheat biochemistry at different growth stages http://link.springer.com/chapter/10.1007/978-94-009-2823-7_43</p></p>"},{"location":"General_advices/general_advices.html#2-simulation-of-the-earth-scene","title":"2) Simulation of the Earth scene","text":"<ul> <li>Earth scene dimensions (\\(D_x = D_y\\)): it must include all the studied landscape of interest or its repetitive pattern. Topography is perfectly handled if the landscape right (bottom) / left (top) sides have equal altitudes to a shift. <li>Spatial resolution \\(\\Delta r\\) of simulated images: \\(\\Delta r\\) is independent of the DART-Lux scene simulation and is equal to the DART-FT cell horizontal dimension (\\(\\Delta x, \\Delta y=\\Delta x\\)). A DART-FT sequence with varying \\(\\Delta x\\) can give the optimal \\(\\Delta x\\) for which \\(\\Delta x\\) decreases \\(L_{scene}(\\Delta x)/RB_{scene}(\\Delta x)\\) converges. The tool 'ImageResampling.py' can resample images. DART-FT CT increases if \\(\\Delta x\\) decreases for scenes made of turbid cells, and mostly depends on the number of facets for scenes made of facets.</li> <li>Horizontal ground: it should be a 3D object to get an accurate \\(RB_{ground}\\), to work with variable spatial resolution,\u2026</li> <li>Horizontally homogeneous scene: simulate the scene as a single cell \\((Dx = Dy = \\Delta x)\\) to reduce CT, with \\(LAI_{cell} &lt; 0.3\\).</li> <p>To simulate simple turbid homogeneous scenes with 3D models is usually more challenging than to simulate complex scenes because scene voxelization and Monte Carlo methods give rise to discretization effects conversely to analytical models. However, these effects are usually neglible compared to the effects of the 3D structure of actual landscapes.</p> <p><p>Slope + Vegetation simulated as turbid medium (left) and triangles (right). \\(LAI=1\\).</p></p>"},{"location":"General_advices/general_advices.html#3-simulation-of-the-atmosphere","title":"3) Simulation of the Atmosphere","text":"<p>Layered atmosphere:</p> <ul> <li>mid-atmosphere (MA): \\(N_{MA,x}.N_{MA,y}\\) cells \\((\\Delta x_{MA}, \\Delta z_{MA})\\) per layer, up to height \\(h_{MA}\\).</li> <li>high atmosphere (HA): height \\(h_{HA}\\) with layers of width \\(\\Delta z_{HA}\\), and 1 cell per layer.</li> </ul> <p>The atmosphere \"grid\" \\((h_{MA}, h_{HA},\u2026)\\) is user defined with \"Manual\" option, and automatically defined with the \"Fast\" and \"Automatic\" options. The automatic \"grid\" is simulation specific. Hence, for a spectral sequence of simulations, option \"Manual\" is advised to have the same atmosphere grid for all simulations. Atmosphere radiative transfer computation time increases with smaller \\(\\Delta x_{MA}, \\Delta z_{MA}\\) and \\(\\Delta z_{HA}\\) values</p>"},{"location":"General_advices/general_advices.html#4-forward-mode-dart-ft","title":"4) 'Forward' mode (DART-FT)","text":"<ul> <li> <p>Threshold \\(T_1\\) : to stop low energy rays \\(W\\)</p> <ul> <li>Stop of unscattered sun rays \\(W_{sun}\\) if \\(W_{sun} &lt; T_1.E_{BOA,dir}.\\Delta x.\\Delta y\\), with BOA direct sun irradiance \\(E_{BOA,dir}\\).</li> <li>Stop of unscattered atmosphere ray and scattered rays \\(W\\) if \\(W &lt; \\frac {T_1.E_{BOA}.\\Delta x.\\Delta y.\\Delta \\Omega} {\\pi}\\), with BOA irradiance E_{BOA}.</li> <li>Stop of unscattered thermal rays if \\(W &lt; T_1.\\frac {L_{B}(\\bar{T}_{scene}).\\Delta x.\\Delta y. \\Delta \\Omega} {\\pi}\\), with Earth scene mean temperature \\(\\bar{T}_{scene}\\)</li> </ul> </li> <li> <p>Threshold T2: to stop a simulation if scene exitance is nearly constant between 2 successive iterations. DART is stopped if \\(\\frac {\\sum_i W_{k+1}(\\Omega_i) - \\sum_i W_k(\\Omega_i)} {\\sum_i W_k(\\Omega_i)} &lt; T_2\\), with \\(\\sum_i W_k(\\Omega_i) =\\) total exitance at iteration k.</p> </li> <li> <p>Illumination grid D (default: 0.1m; scattering, 3D temperature) &amp; Sub-division S (default: 0.01m\u00b2; thermal emission): adapt them to scene Dx, voxel \\(\\Delta x\\) and scene \\(\\Delta r\\) dimensions. \\(N_{sun rays}\\approx \\frac {D_x.D_y} {D^2}\\). N facets of area \\(A \\implies N.\\frac {A} {S}\\) thermal rays.</p> </li> <li> <p>Number of iterations \\(N_{iter}\\): computation time increases with \\(N\\) (default: 5).</p> </li> <li> <p>Store all iterations: use it only if necessary because it increases CT and computer memory.</p> </li> <li> <p>LUT: for saving CT and computer memory, store only the LUT and no other DART product if it is possible.</p> </li> <li> <p>Juxtaposition of DART images: objects (tree,\u2026) on a side of a repetitive scene can cast shadows on the opposite scene side, which complexifies their interpretation. The juxtaposition of images simplifies this interpretation.</p> </li> <li> <p>Oversampling DART images: it can improve the visual aspect of DART images.</p> </li> <li> <p>Sequence computer time: run only useful processes and use the multithread method.</p> </li> <li> <p>Spectra simulation {\\(\\lambda_i; j\\in[1:J]\\)}: with large J and scene size, the needed RAM can be too large. A solution is to compute spectra as N sub-spectra {\\(\\lambda_{i,n} ; n\\in[1:N]\\)} with same atmosphere discretization, enough BOA illuminating rays to get a quasi exact ratio \\(\\frac {Direct\\:sun\\:irradiance} {Atmosphere\\:irradiance}\\), and the same \\(\\lambda_{1,n} \\forall n\\) to get identical centroids in turbid cells.</p> </li> <li> <p>How to avoid the creation of 1 folder per spectral band: unset the option \"BRF/BTF mono-band\" in \"Product menu.</p> </li> </ul>"},{"location":"Physical_bases/physical_bases.html","title":"Physical bases","text":""},{"location":"Physical_bases/physical_bases.html#main-measures-used","title":"Main measures used","text":"<ul> <li>Solid angle \\(d\\Omega\\) (sr) along direction \\(\\Omega(\\theta,\\phi)\\): angle in 3D space \\(d\\Omega = sin(\\theta).d\\theta.d\\phi\\) (See below)</li> </ul> <p><p>Solid angle \\(d\\Omega\\) centred on direction \\(\\Omega(\\theta,\\phi)\\) from a surface \\(\\Sigma\\)..</p></p> <ul> <li> <p>Radiance: power along (\\(\\Omega\\)) per sr and apparent \\(m^2\\) of emitter/receiver surface \\(\\Sigma\\): \\(L_{\\lambda}(\\Omega): W/m^2/sr/\\mu m; L_{\\Sigma,\\Delta \\lambda}(\\Omega): W/m^2/sr\\)</p> </li> <li> <p>Exitance: power (W) that exits a surface \\(\\Sigma\\) (See below) per \\(m^2\\) of \\(\\Sigma\\): \\(M_{\\Sigma,\\lambda}=\\int_{2\\pi^{+}} L_{\\Sigma,\\lambda}(\\Omega).cos(\\theta).d\\Omega\\;\\;\\;\\;W/m^2/\\mu m\\;\\;\\;\\;M_{\\Sigma,\\Delta \\lambda}=\\int_{2\\pi^{+}} L_{\\Sigma,\\Delta \\lambda}(\\Omega).cos(\\theta).d\\Omega\\;\\;\\;\\;W/m^2\\)</p> </li> <li> <p>Irradiance: power (W) that is incident on a surface \\(\\Sigma\\) (See below) per m of \\(\\Sigma\\): \\(E_{\\Sigma,\\lambda}=\\int_{2\\pi^{-}} L_{\\Sigma,\\lambda}(\\Omega).|cos(\\theta)|.d\\Omega\\;\\;\\;\\;W/m^2/\\mu m\\;\\;\\;\\;E_{\\Sigma,\\Delta \\lambda}=\\int_{2\\pi^{-}} L_{\\Sigma,\\Delta \\lambda}(\\Omega).|cos(\\theta)|.d\\Omega\\;\\;\\;\\;W/m^2\\)</p> </li> </ul> <p>Note</p> <p>Luminance \\((cd/m^2)\\) = \\(683.\\int_{380}^{740} V(\\lambda).L(\\lambda).d\\lambda\\) Normalized luminous efficiency \\(V(\\lambda)\\) in www.cvrl.org/lumindex.htm </p> <ul> <li> <p>Reflectance factor of a surface \\(\\Sigma\\): \\(\\rho_{\\sigma,\\lambda}(\\Omega)=\\frac {\\pi.L_{\\Sigma,\\lambda}(\\Omega)} {E_{\\Sigma,\\lambda}}\\)(See below). <p>Surface irradiance \\(E_{\\lambda}(left)\\) and exitance \\(M_{\\lambda}(right)\\).</p> Different reflectance factors are used for taking into account the fact that radiation can be:</p> <ul> <li>along a unique direction (i.e., \\(d\\Omega=0\\)). This is called \"direct\". Below, its index is \"d\".</li> <li>within a cone (\\(\\Omega, d\\Omega \\neq 0\\)). This is called \"conical\". Below, its index is \"c\".</li> <li>along an hemisphere (i.e., \\(d\\Omega = 2\\pi\\)). This is called \"hemispherical\". Below, its index is \"h\".</li> </ul> </li> <li> <p>Lambertian surface: isotropic radiance \\(L_{\\lambda}(\\Omega) = cst \\implies\\) isotropic reflectance \\(\\rho_{\\lambda}(\\Omega) = cst\\) (See below).</p> </li> </ul> <p><p>Different types of reflectance (direct d, hemispherical h, conical c)</p></p> <p><p>\\(\\rho_{dd}(\\Omega)\\) in the solar plane</p></p> <p>Variable scattering direction for a given illumination direction and 2 types of surfaces:</p> <ul> <li>lambertian surface: \\(\\rho_{dd}(\\Omega) = cst\\). White surface \\((\\rho_{dd} = 1)\\) and grey (\\(\\rho_{dd} = cst &lt; 1\\)).</li> <li>natural surface: \\(\\rho_{dd}(\\Omega)\\) changes. Often maximal for the specular direction and local maximum for the illumination direction.</li> </ul> <p>Bi-directional Reflectance Factor (BRF): \\(\\rho_{dd}(\\Omega_s,\\Omega_v,\\lambda)= \\frac {\\pi.L_{\\lambda}(\\Omega_v).cos(\\theta_v).\\Delta \\Omega_v} {E_{\\lambda}(\\Omega_s).cos(\\theta_v).\\Delta \\Omega_v} = \\frac {\\pi.L_{\\lambda}(\\Omega_v)} {E_{\\lambda}(\\Omega_s)}\\)</p> <p>Reflectance Factor direct-hemispherical: \\(\\rho_{dh}(\\Omega_v,\\lambda)=\\frac {M_{\\lambda}} {E_{\\lambda,s}}=\\frac {\\int_{2\\pi^{+}}L_{\\lambda}(\\Omega_v).cos(\\theta_v).\\Delta \\Omega_v} {L_{\\lambda}(\\Omega_s).cos(\\theta_s).\\Delta \\Omega_s}\\) (\\(\\frac {exitance\\:h} {irradiance\\:d}\\))</p> <p>Reflectance Factor hemispherical-direct: \\(\\rho_{hd}(\\Omega_v, \\lambda) = \\frac {\\pi.L_{\\lambda,v}} {E_{\\lambda,s}} = \\frac {\\pi.L_{\\lambda}(\\Omega_v)} {\\int_{2\\pi^{-}}L_{\\lambda}(\\Omega_s).cos(\\theta_s).\\Delta \\Omega_s}\\) (\\(\\frac {\\pi.radiance\\:d} {irradiance\\:h}\\))</p> <p>Reflectance Factor bi-hemispherical: \\(\\rho_{hh}(\\lambda)=\\frac {M_{\\lambda}} {E_{\\lambda}}=\\frac {\\int_{2\\pi^{+}}L_{\\lambda}(\\Omega_v).cos(\\theta_v).\\Delta \\Omega_v} {\\int_{2\\pi^{-}}L_{\\lambda}(\\Omega_s).cos(\\theta_s).\\Delta \\Omega_s}\\)</p> <p>SKYL: \\(\\frac {Sky\\:(atmosphere)\\:irradiance} {Total\\:(direct\\:sun+atmosphere)\\:irradiance}\\). It belongs to \\([0;1]\\)</p> <p>Albedo: \\(A_{dh}(\\Delta \\Omega_{i}=0, \\Delta \\lambda)=\\frac {Exitance\\:(h)\\:over\\:\\Delta \\lambda} {Irradiance\\:(d)\\:over\\:\\Delta \\lambda\\:along\\:\\Omega_{s}}\\)</p> <p>\\(A_{hh}(2\\pi^{-}, \\Delta \\lambda)=\\frac {Exitance\\:(h)\\:over\\:\\Delta \\lambda} {Irradiance\\:(h)\\:over\\:\\Delta \\lambda\\:along\\:2\\pi^{-}}\\)</p> <p>It is the integral of reflectance \\(\\rho(\\lambda,\\Omega_v)\\), weighted by spectral irradiance (i.e., \\(E_{\\lambda}(\\Omega_i).\\mu_i\\) for \\(A_{dh}\\) and \\(\\int_{2\\pi^{-}} L_{\\lambda}(\\Omega_s).\\mu_s d\\Omega_s.d\\lambda\\) for \\(A_{hh}\\)), over the spectral band \\(\\Delta \\lambda\\) (i.e., all or part of the spectrum) and over all directions of the upper hemisphere (\\(2\\pi^{+}\\)). It depends a lot on the Earth surface.</p> <p>For plane Earth: \\(A_{dh}(\\Omega_s, \\Delta \\lambda) = \\frac {1} {\\pi}.\\frac {\\int_{\\Delta \\lambda} \\int_{2\\pi} \\rho_{dd}(\\Omega_s, \\Omega_v,\\lambda).\\mu_v.E_{\\lambda}(\\Omega_s).\\mu_s.d\\Omega_v.d\\lambda} {\\int_{\\Delta \\lambda} E_{\\lambda}(\\Omega_s).\\mu_s.d\\lambda}\\) with \\(\\Delta \\lambda \\approx [0.2;\\:4 \\mu m]\\).</p> <p>If \\(E_{\\lambda} \\approx\\: cst\\) over \\(\\Delta \\lambda: \\:A_{dh}(\\Omega_s, \\Delta \\lambda)\\approx\\frac {1} {\\pi}.\\int_{\\Delta \\lambda} \\int_{2\\pi} \\rho_{dd}(\\Omega_s, \\Omega_v,\\lambda).\\mu_v.d\\Omega_v.d\\lambda \\approx \\frac {1} {\\Delta \\lambda} . \\int_{\\Delta \\lambda} \\rho_{dh}(\\Omega_s, \\lambda).d\\lambda\\) \\(\\approx \\rho_{dh, \\Delta \\lambda}(\\Omega_s)\\)</p> <p>Optical depth \\(\\Delta \\tau\\): the direct transmittance along \\(\\Omega_v\\) of a medium with an optical depth \\(\\Delta \\tau\\) is \\(e^{- \\frac {\\Delta \\tau} {\\mu_v}}\\) with \\(\\mu_v = cos(\\theta_v)\\).</p> <p>DART \"Forward\" mode: a ray along direction \\((\\Omega,\\Delta \\Omega)\\) carries the power \\(W(\\Omega,\\Delta \\Omega)\\). A ray that exits the scene at pixel \\((\\Delta x,\\Delta y)\\) gives rise to local radiance \\(L_{xy}(\\Omega,\\Delta \\Omega)=\\frac {W(\\Omega, \\Delta \\Omega)(W)} {\\Delta x.\\Delta y.\\int_{\\Delta \\Omega} cos(\\theta).d\\Omega\\:(m^2.sr)}\\) with \\((\\Delta \\Omega = \\int_{\\Delta \\theta}\\int_{\\Delta \\phi} sin(\\theta).d\\theta.d\\phi)\\)</p> <ul> <li>Surface of area A: it gives rise to:<ul> <li>\\(W_{scat}(\\Omega, \\Delta \\Omega)=\\frac {\\rho(\\Omega)} {\\pi}.A.\\int_{\\Delta \\Omega}cos(\\theta).d\\Omega\\),</li> <li>\\(W_{thermal}(\\Omega, \\Delta \\Omega)=\\epsilon(\\Omega).A.L_{B}(T).\\int_{\\Delta \\Omega} cos(\\theta).d\\Omega\\)</li> </ul> </li> <li>Turbid media: it gives rise to: \\(W_{scat}(\\Omega, \\Delta \\Omega) \\:\\&amp;\\: W_{thermal}(\\Omega, \\Delta \\Omega) \\equiv \\frac {\\int_{\\Delta \\Omega} cos(\\theta).d\\Omega} {cos(\\theta)}\\). Fluids (spherical particules): \\(W_{thermal}(\\Omega,\\Delta \\Omega) \\equiv \\Delta \\Omega\\)</li> </ul> <p><p>Albedo of Earth material</p></p>"},{"location":"Physical_bases/physical_bases.html#thermal-emission","title":"Thermal emission","text":"<p>Planck law: \\(L_{\\lambda}(T)=\\frac {2.h.c^2} {\\lambda^5.(e^{\\frac {h.c} {\\lambda.k.T}})}\\) (\\(W.m^{-2}.sr^{-1}.m^{-1}\\)) where \\(h=6.63\\times10^{-34}\\) J.s and \\(k=1.3807\\times10^{-23}\\:J.K^{-1}\\)</p> <p>Wien law: \\(M(\\lambda)\\) is maximal for \\(\\lambda_m=\\frac {a} {T}\\:(a=2899 \\mu mK)\\)</p> <p>Stephan-Boltzmann law: \\(M = \\sigma.T^4\\), where \\(\\sigma = 5.6704 \\times10^{-8} W.m^{-2}.K^{-4}\\)</p> <p>Brightness temperature \\(T_B\\) of a scene: temperature of the blackbody that emits the same radiance as the scene.</p> <p>For a measured radiance \\(L_{mes,\\lambda}(\\Omega)\\): \\(L_{m,\\lambda}(\\Omega)=L_{B,\\lambda}(T_B) \\implies T_B =L_{B,\\lambda}^{-1}(L_{mes,\\lambda}(\\Omega))=f(\\lambda,T,\\Omega)=\\frac {h.c} {k.\\lambda} .\\frac {1} {ln(1+\\frac {2.h.c^2} {\\lambda^5.L_{m,\\lambda}(\\Omega)})}\\)</p> <p>Emissivity \\(\\epsilon\\): efficiency of thermal emission relative to blackbody. \\(\\epsilon_{blackbody} = 1 \\forall \\lambda\\).</p> <p>For a fluid (e.g., atmosphere): \\(\\epsilon(\\Omega,\\lambda) = 1 - \\rho_{dh}(\\Omega,\\lambda) - t(\\Omega,\\lambda) \\forall \\lambda\\). For an opaque surface: \\(\\epsilon(\\Omega,\\lambda) = 1 - \\rho_{dh}(\\Omega,\\lambda) \\forall \\lambda\\)</p>"},{"location":"Physical_bases/physical_bases.html#toa-satellite-radiance-l_toaomega_v","title":"TOA / satellite radiance \\(L_{TOA}(\\Omega_V)\\)","text":"<p>3 radiation sources arise at TOA level:  </p> <p>Atmosphere: direct transmittance \\(e^{- \\frac {\\Delta \\tau} {\\mu_v}}\\) , diffuse transmittance \\(t_{atm}\\), total transmittance \\(T_{atm} =e^{- \\frac {\\Delta \\tau} {\\mu_v}} +t_{atm}\\).</p> <p>a) Sun scattered radiation</p> <ul> <li>Scene scattering with direct atmosphere transmission \\(\\downarrow \\uparrow\\): \\(E_{sun}.e^{- \\frac {\\Delta \\tau_{atm}} {\\mu_s}}.\\frac {\\rho_{scene}} {\\pi}(\\Omega_s,\\Omega_v).e^{- \\frac {\\Delta \\tau_{atm}} {\\mu_s}}\\) </li> <li>Scene scattering with diffuse atmosphere transmission: \\(E_{sun}.t_{atm}(\\Omega_s,2\\pi^{-}).\\rho_{scene}(2\\pi^{-},2\\pi^{+}).T_{atm}(2\\pi^{+},\\Omega_v)\\) </li> <li>Atmosphere scattering, without interaction with the scene: \\(E_{sun}.\\frac {\\rho_{atm}} {\\pi}(\\Omega_s, \\Omega_v)\\) </li> <li>Scene scattering with Earth-Atmosphere coupling: \\(E_{sun}.T_{atm}(\\Omega_s,2\\pi^{-}).\\frac {\\rho_{scene}(2\\pi^{-},2\\pi^{+})} {1-s_{atm}}.T_{atm}(2\\pi^{+},\\Omega_v)\\). </li> </ul> <p>b) Scene thermal emission with atmosphere direct / diffuse transmission: \\(L_{scene}.T_{atm}(2\\pi^{+},\\Omega_v)\\) </p> <p>c) Atmosphere thermal emission direct and scene scattered: \\(L_{atm}(\\Omega_v) + \\rho_{scene}(2\\pi^{-}, 2\\pi^{+}).L_{atm}(\\Omega_v)\\) </p>"},{"location":"Remote_sensing/remote_sensing.html","title":"Remote sensing and radiative budget modeling of natural and urban surfaces","text":"<p>The study of land surfaces functioning and biophysical properties (e.g., leaf biomass, soil moisture and temperature) increasingly relies on RS data, due to its unique ability of frequent and global observation of our planet. The increased use of RS data is mostly due to advances in technology (sensor radiometric accuracy, spatial / spectral / temporal resolutions,...) and in methods of interpretation of RS acquisitions. Here, we only consider RS data (i.e., (i.e., landscape radiance \\(L(\\Omega)\\) reflectance factor \\(\\rho(\\Omega)=\\frac {L(\\Omega)} {E_{sun}}\\) and brightness temperature \\(T_B(\\Omega)=L_{B}^{-1}(L(\\Omega))\\) acquired in the visible (VIS), near infrared (NIR) and thermal infrared (TIR) domains (i.e., [0.3\u03bcm 100\u00b5m]), at any altitude from TOA (Top Of Atmosphere) to BOA (Bottom Of Atmosphere), where it can be right above or within the landscape. </p> <p>RS data are often interpreted with statistical approaches: image classification, correlations with field measurements (e.g., LAI: Leaf Area Index),... However, these approaches (e.g., \\(LAI = f(NDVI)\\) with NDVI (Normalized Difference Vegetation Index) \\(=\\frac {\\rho_{NIR} - \\rho_{Red}} {\\rho_{NIR} + \\rho_{Red}}\\) (Rouse et al., 1973)), are often inaccurate because they are defined for specific experimental (e.g., atmosphere) and instrumental (e.g., viewing direction) configurations. It explains the increased use of RS models that simulate the bi-directional reflectance factor (BRF) and brightness temperatures function (BTF) of landscapes. The demand of more accurate satellite derived information and landscape RB explains the need of models that consider the landscape 3D complexity (i.e., topography, trees, buildings,\u2026). Three types of BRF models are mentiond below.</p> <ul> <li>Empirical and semi-models Empirical models do not attempt to explain the biophysical parameters and processes that govern BRF and BTF: they give a mathematical description of observed patterns in BRF / BTF datasets. Semi-empirical models rely on simplified physical principles of geometrical optics (GO) models and RT theory. For example, kernel driven models (Roujean et al., 1992; Wanner et al., 1995; Liu et al., 2010) calculate BRF as the sum of an isotropic term and anisotropic functions (i.e., kernels) associated to volume and surface scattering. There are other forms of semi-empirical models such as the RPV model (Rahman et al., 1993), and its latter versions, the Modified RPV model (MRPV) (Martonchik, 1997) and the EMRPV model (Engelsen et al., 1997), to accelerate inversion procedures. Semi-empirical models are widely used because they are analytical and have few parameters. For example, land surface BRF/albedo products from RS sensors (MODIS, POLDER, MSG/SEVIRI, AVHRR, VEGETATION,\u2026) are mainly derived from kernel-driven models, using multi-angular bidirectional reflectance in clear skies to invert the BRF parameters (You et al., 2014).</li> <li>Geometric optical (GO) reflectance models GO models are useful to understand the BRF of forests as a function of their physical dimensions and structure. They simulate tree covers as the combination of tree crowns, their shadows and background forest floor material (Peddle et al., 2003), each one with specific surface optical properties that integrate implicitly volume scattering, which is a source of unaccurracy. Typically, tree crowns have characteristic shapes with defined spatial dimensions. Simulation results are based on the computation of scene fractions (e.g., % sunlit canopy, % sunlit back-ground, % shadow). They are better adapted to \"open\" landscapes (e.g., sparse tree cover). Li and Stralher (1986) developed one of the first GO models. In the more recent 4-scale model (Chen and Leblanc, 1997), tree crowns are discrete geometrical objects: cone and cylinder for conifers, and spheroid for deciduous species, where branches have a given inclination angle, with individual leaves in deciduous trees and shoots in conifers, with a given angular distribution. It uses a geometrical multiple scattering scheme with view factors (Chen and Leblanc, 2001).The 5-Scale model (Leblanc and Chen, 2000) is the merging of 4-Scale and LIBERTY (Dawson et al., 1998) that simulates leaf optical properties.</li> <li>Radiative transfer models (RT) RT models, also called physical models, simulate the propagation of radiation with all the physical mechanisms (e.g., atmosphere scattering) that determine and impact RS acquisitions. They rely on the RT equation that relates the change in radiance along a ray path to local absorption, scattering and thermal emission. They are potentially robust and accurate because they can work with landscapes that are realistically simulated. Generally speaking, the simulation of BOA and TOA BRF and BTF involves 4 RT components: soil model (Hapke, 1981), leaf model (e.g., PROSPECT model; Feret et al., 2008), canopy model (e.g., SAIL model) and atmosphere model (e.g., Modtran: Berk, 1996; 6S: Vermote et al., 1997). The DART model simulates the RT in the whole \"Earth-Atmsophere\" system.      A major challenge is usually to compute accurately multiple scattering with the conservation of energy. There exists different mathematical approaches. Here, we present 4 major types of RT models:<ul> <li>Discrete ordinate method. Radiation is assumed to propagate along N discrete directions. This is represented by N RT equations. For example, the SAIL model (Verhoef, 1984) uses a system of 4 differential equations with 4 fluxes / 4 directions, applied to an horizontally homogeneous landscape: sun flux, 2 isotropic upward and downward fluxes and 1 flux along sensor view direction. The number of fluxes can be much larger (e.g., 100 and more; Yin et al., 2013) for better considering radiation anisotropy as in DART (Gastellu-Etchegorry et al., 1996). The spatial variable is often discretized (Kimes and Kirchner, 1982; Myneni et al., 1992) into a set of spatial nodes (i.e., voxels) in order to consider the 3D heterogeneity of landscapes.</li> <li>Radiosity method. It uses the radiation balance equation on a finite number N of discrete scatterers (Borel et al., 1991), conversely to the RT methods based on the volumetric radiation balance in the 3D space. It inverts a NxN matrix. For that, it needs to compute the view factors between all N elements. It becomes very time consuming and complex if N is very large, which is the case of landscapes with many elements (e.g., leaves of trees).</li> <li>Successive orders of scattering (SOS). It is one of the oldest and simplest in concept of the solutions to the multiple scattering problem. It uses an iterative calculation of successive orders of scattering: total radiance vector is the summation of contributions from photons scattered a number of times. For example, the SOSVRT model (Duan et al., 2010) simulates polarized RT in vertically inhomogeneous plane-parallel media.</li> <li>Monte Carlo (MC) methods. They simulate the chain of scattering events incurred by a photon between the source and receiver. A great interest is that only single scattering properties need be explicitly modeled (Disney et al., 2000). Computation time is their usual limiting constraint. FLIGHT (North, 1996), Drat (Lewis, 1999) and Raytran (Govaerts and Verstraete, 1998) are well known examples. Also, physically based and unbiased rendering engines (e.g., LuxCoreRender: luxcorerender.org) develop increasingly efficient MC methods. However, being designed to simulate very realistic images of scenes very quickly, they are not adapted to RS and RB studies (e.g., hard coded limitations such as 3 bands, float coding, etc. DART-Lux adapts LuxCoreRender to RS and RB studies.</li> </ul> </li> </ul> <p>RS and RB models are often divided into 2 categories related to their mode of landscape modeling:</p> <ul> <li>Homogeneous lanscapes. They are the superposition of homogeneous and horizontal layers of turbid medium (i.e., random distribution of infinitely small facets). With this assumption, \"simple\" models can simulate trends as the evolution of crop BRF/BTF with LAI change. Account of landscape architecture is usually partial at best.</li> <li>Realistic landscapes. They are increasingly used. They are represented by the juxtaposition of facets or arrays of voxels filled with fluids and turbid medium. The DART model combines these 2 approaches.</li> </ul>"},{"location":"Tutorials/T0/t0.html","title":"WP0 - DART Overview","text":"<p>WP0 is a fast overview of DART, with limited practice. Other WPs introduce DART functionalities step by step. The advice is to start with WP1 (reflectance) and WP2 (thermal emission), then 'thematic' WPs: WP3: buildings, atmosphere; WP4: RB and SIF; WP5: fluids and cover map importation; WP6: trees; WP7: topography; WP8: LiDAR; WP9: sensors, etc. WPs introduce the 2 DART light modes: DART-Lux (i.e., bi-directional Monte Carlo method) and DART-FT (discrete ordinate method, with voxelized landscape). DART-Lux and DART-FT use different formats for storing their representations of landscapes (i.e., scenes), but DART-Lux simulations can be easily transformed into DART-FT simulations, and vice versa. In an already created scene, any type of elements such as trees and buildings can be  ignored, which leads to a new scene. It allows reversible modifications of the scene. Also, in DART-Lux, any type of element can be ignored when simulating the RB, in order to save computation time. Because it is much faster with much less RAM for complex landscapes, except for RB, DART-Lux increasingly replaces DART-FT.</p> <p>Note</p> <ul> <li>Answer questions asked in the WPs before going to the next step in the WPs. </li> <li>Close computer applications (e.g., internet,\u2026) to reduce the computation time (CT) of simulations.</li> <li>DART is installed (install.bat) in a user-selected folder Y. It creates \"Y\\DART\\user_data\\simulations\". Y should not have accents and spaces, and for Windows operating system should not be created by it such as the folder 'Users'.</li> <li>Download a WPx (here) in <code>DART\\user_data\\simulations\\WP\\WPx</code>, unzip it to get all its WPx-Lux (DART-Lux) and WPx-FT (DART-FT) simulations. Any simulation has 2 sub-folders: \"input\" (i.e., input parameters) and \"output\" (i.e., simulation products).</li> </ul> <p>Approach: WP0A introduces basic DART functionalities with a 3D scene. To save time, you do not need to run it if its output folder is available. Later, in order to discover other functionalities/products(e.g., LiDAR and time series), you create WP0B,WP0C,... as copies of WP0A using the option \"save as\", and ignoring some scene elements to reduce computer time (CT) of simulations. CTs are indicated for each WP. They are for a laptop with 8 cores.</p>"},{"location":"Tutorials/T0/t0.html#1-overview-wp0a-ft-ct-640-wp0a-lux-ct-21-if-n-samplepixel-n-sampledirection-30","title":"1) Overview: WP0A-FT (CT: 6'40\"), WP0A-Lux (CT: 2'1\" if N sample/pixel = N sample/direction =30)","text":"<p>Objective: overview (products, functionalities,\u2026) of DART mode \"Passive RS &amp; RB\". . Table below lists the parameters to set: blue color for bi-directional mode (i.e., DART-Lux), and green color for forward mode (i.e., DART-FT). </p> <p>Scene (see the scene below): : it consists of an imported tree and DART created elements (1 tree filled with facets, 1 house with 2  skylights, 2 plots filled with facets and turbid medium) over a DEM: Digital Elevation Model. </p> <p>Products: orthographic at the top of atmosphere (TOA) and bottom of the atmosphere (BOA), BOA projective RS sensor  images, and also 3D radiative budget for DART-FT.</p> <p><p>3D scene / mock-up. Once it is created, it can be  displayed with \"View / Scene 3D\".</p></p> <p>Note</p> <p>When running the atmosphere radiative transfer with option \"Discrete ordinates\", disregard the warning message that indicates that the DART-computed scattering phase function of aerosols is normalized.</p> <p><p>Parameters of the Forward and Bi-directional light modes. OP: optical property. T: temperature.</p></p> <p>The simulation editor: \"Parameters/Editor\".  The simulation editor sets the simulation parameters.</p> <ul> <li> <p>\"Passive RS &amp; RB\" (see below): TOA\u2192BOA transfer (here: Atmosphere radiative transfer), Earth-Atmosphere radiative coupling, and advanced parameters (here: 8 threads, illumination mesh D=0.005m,\u2026).     <p>Passive RS &amp; RB menu of DART-Lux (top) and DART-FT (bottom). Left panel: parameter selection. Right panel: parameter values. Central panel: scene 2D view.</p></p> </li> <li> <p>\"Passive RS &amp; RB parameters\": scene irradiance E (see below) and spectral bands (see below). E can be set as TOA or BOA irradiance or as BOA radiance. Here, E is set at TOA with a sun irradiance database. A band consists in {Mean wavelength, Bandwidth, Mode (R: reflectance, T: pure thermal emission, R+T)}.     <p>Scene irradiance.   plots the irradiance table 'TOASolar_THKUR' of <code>Solar_constant.db</code> database. </p></p> </li> <li> <p>\"Spectral intervals\" (see below): each spectral band is defined by its mode (R, R+T or T), mean wavelength \\(\u03bb_{mean}\\), and bandwidth \u0394\u03bb.     <p>Spectral band. Properties of band 1: mode R, \\(\u03bb_{mean} =0.4 \\mu m\\), \\(\\Delta \u03bb =0\\) .</p></p> </li> <li> <p>\"Products\" (see below): radiative , general  and Earth scene  products. The bi-directional (DART-Lux) and forward (DART-FT) light modes BOA level have very similar products, with two major differences: </p> <ul> <li>Iterations: DART-FT is iterative and can give results per iteration. DART-Lux is not iterative. Then, the term \"iteration\" refers to data storage per time period or number of samples per pixel. </li> <li>Exitance / albedo: a single DART-FT simulation can simulate images for many viewing directions \\(\\Omega_v\\), including exitance and albedo images, without increasing computation time. Usually, DART-Lux simulates only a few images, because computation time increases with the number of images, and consequently does simulate exitance and albedo images. However, it simulates BRF / BTF maps (i.e., \\(L(\\Omega_v), \\rho(\\Omega_v)\\) and \\(T(\\Omega_v) \\forall \\Omega_v\\)  for any zenith / azimuth step suvch that 1\u00b0), whose integral gives the exitance and albedo for all or part of the scene.  </li> </ul> </li> <li> <p>The radiative products include:</p> <ul> <li>BRF/BTF products : radiance \\(L_{xy}(\\Omega_v)\\), reflectance \\(\\rho_{xy}(\\Omega_v)\\) and brightness temperature \\(T_{xy}(\\Omega_v)\\), with BRF standing for \\(\\rho\\) and BTF for \\(T\\). They are provided as raster images and / or mean values of these images. The images are for an orthographic projection. They can be orthorectified (default method: \"Industry standard\"). In order to save computation time and memory, the images can be stored only for directions with a zenith angle smaller than a threshold (default: 25\u00b0 for DART-FT and 1\u00b0 for DART-Lux). Their format is that of ILWIS (<code>*.mp#</code> and <code>*.mpr</code>); the GeoTiff format is being implemented. Their mean values are stored in text files (brf: reflectance, tap: brightness temperature); the NetCdf format is being implemented. Other products include \"images per type of scene element\" (i.e., radiation from the last scattering / emitting element of the scene), \"fluid transmittance images\" (BOA satellite, sensor), and \"pixel view angle images\". </li> <li>Temperature per triangle per cell.    </li> <li>Fraction of sunlit par triangle per cell  </li> <li>Fraction of sunlit per cell</li> </ul> </li> <li> <p>The general products include: </p> <ul> <li>Radiative budget (RB) products: 3D/2D/1D absorbed, emitted,... power per cell (x,y,z) and/or facet, stored in binary or text files, with different units (% of BOA irradiance, W/m2/\u00b5m, W/m2). They can be computationally  expensive, especially for DART-Lux (it is being accelerated), which here simulates only RBfacet. </li> <li>Polarization products. </li> <li>Per light source products (e.g., thermal emission from the roofs).</li> </ul> </li> <li>The Earth scene products include: <ul> <li>Triangle area products: area of facets, as 1D or 3D arrays, and possibly per type of scene element (i.e., color). </li> <li>Turbid LAI products: 3D, 2D and 1D LAI of turbid volumes, </li> <li>3D object\": 3D object that consists of all facets of the scene, </li> <li>DSM image: Digital Surface Model of the scene, stored as a raster image (only for DART-FT).</li> <li>Triangle ground cover: ground cover per type of scene element such as vegetation (only for DART-FT). </li> </ul> </li> </ul> <p>Note</p> <p>The option \"Save as\" allows you to transform a DART-Lux simulation into a DART-FT simulation, and vice versa. It can be very useful in order to simulate products that a light propagation mode does not simulate.</p> <p><p>Menu \"Products\" of DART-Lux (top) and DART-FT (bottom).</p></p> <ul> <li>\"Sensor\" (see below): in-situ / airborne cameras and pushbroom, defined by their location, field of view (FOV),...  Here, 2 airborne viewing cameras are defined: an hemispherical camera (x=y=15m, 20m; not yet simulated by DART-Lux) and an oblique camera (x=y=35m, z=40m) whose ground FOV is outlined by a blue trapezoid. </li> </ul> <p><p>Menu \"Sensor\". Two downward viewing cameras ( hemispherical (on the left) and oblique (on the right)) are defined.</p></p> <ul> <li>\"Direction input parameters\" (III.4.7, see below): any direction can be added to the 100 default discrete  directions. Here, 13 directions are added: 2 specular, 1 upward sun direction (hot spot) and 10 around sun direction. </li> </ul> <p><p>Menu \"Direction input parameters\". Here, the viewing direction \\((\\theta=30\u00b0, \\phi=45\u00b0)\\) is defined.</p></p> <ul> <li>\"Optical and temperatures properties\" (see below): optical properties of surfaces  and volumes  (i.e., turbid vegetation or fluids), and temperature properties . There are several surface optical properties (Figure 41): lambertian, RPV, Hapke and specular  models, and Phase extern (import of spectral directional reflectance/transmittance). These optical properties can be combined using the \"Mixed model\" option. The lambertian property is defined by \"Lambertian reflectance + Lambertian transmittance + Direct transmittance\". The lambertian reflectance is from a spectral database, leaf Prospect/Fluspect model, or soil MARMIT-2 model \\(\\rho_{soil}\\) = f(soil moisture content) for soils. The volume optical property  is for a volume filled with fluids or turbid medium (i.e., infinite number of of infinitely small plane elements randomly distributed and defined by a Leaf Angle Distribution (LAD), a lambertian transmittance and a lambertian reflectance, possibly with specular behavior, for adaxial (top) and abaxial (bottom) leaf faces). The temperature property  is defined by a mean temperature, a temperature range and the possibility to have equal or not temperatures on both sides of a surface. The optical and temperature properties can be weighted by spectral coefficients. For example, the multiplication ofv the model \"Reflectance = 1\" by a number a gives the optical property \\(\\rho\\) = a. In addition, the optical and temperature properties can be weighted by 3D matrices in order to get 3D variable properties.</li> </ul> <p><p>Menu \"Lambertian optical property\". The property, called 'ground', is set with the loam_sandy\u2026\" model of the Lambertian_mineral database. A  specular model is set.  module (not used here) computes leaf optical property, including leaf fluorescence, using leaf biochemistry.</p></p> <ul> <li>\"Scene\" (see below: scene xy dimensions and cell xyz dimensions , raster DEM (Digital Elevation Model)  and scene location . DART-FT uses cells to voxelize the scene and set the resolution of the simulated images. DART-Lux uses cells only for 3D RB simulation. Schematic DEMs can be created . Successive DART scenes  defined with random settings (e.g., random distribution of facets) differ if option \"Use a random\u2026 \" is set. Note for DART-Lux, the ground surface, as other scene elements, can be ignored in RB simulation to save CT.</li> </ul> <p><p>Menu \"Scene\". Numbers are exactly coded only if they are equal to \\(m.2^{-n}\\), with m and n integer numbers. Better to use numbers that are exactly coded, whenever possible.</p></p> <ul> <li> \"Plot\" menu: plots (see below): to create plots (i.e., surface or right prisms) filled with turbid medium, facets or fluids, with a possible underlying surface. They can be at any altitude above the ground surface.</li> </ul> <p><p>Menu \"Plot\". Because the option \"Vegetation\" is set, the plot is a right prism characterized by LAI, LAD, \\(\\rho_f, \\tau_f\\). Because the option \"Plot as triangle cloud\" is set, the volume medium is made of facets, and not turbid medium,; here, facets are defined by their area, and not their number.</p></p> <ul> <li>\"Tree\" (Figure 120): DART created trees with schematic shapes (cone,...) filled with turbid medium or facets. Tree positions and dimensions are random or exact (i.e., option  ). Here, the text file  stores each tree trype, location and dimensions, but only the tree type and location are used by the option 'Exact location + random dimensions' as tree dimensions are set in the GUI. Note that all the tree information of  would be used with the option 'Exact location + Exact dimensions'. Note also, that trees can be ignored in the creation of the mock-up. This is useful for reversible modifications of the mock-up in the same simulation. In DART-Lux, trees can be ignored when simulating the RB, in order to save computation time.</li> </ul> <p>Warning</p> <p>To edit the file trees_WP0.txt, use a text editor (e.g., NotePad++) that does not add hidden characters\u2026.</p> <p><p>Menu \"Turbid trees\" with option \"Exact location + random dimensions\". Option \"Crowns as triangle clouds \" implies that tree crowns are filled with 0.1 m\u00b2 triangles..</p></p> <ul> <li> <p>\"Urban elements\" (III.4.10): DART-created buildings (i.e., houses) with different schematic shapes. </p> </li> <li> <p>\"3D imported object\" (Figure below): to import 3D objects (e.g., tree, forest, urban geometric database) and set their geometry (i.e., location, xyz scale factors, xyz rotations). It also sets optical properties and type of material (i.e.,  color), per group (i.e., set of triangles) or for the whole object. A 3D object or groups of it can be converted to turbid medium, which can be useful if the 3D object has a huge number of facets. The \"Field\" option is for creating a spatial distribution of 3D objects: a file stores the location, scale factors and rotations of clones of 3D objects.</p> </li> </ul> <p><p>Menu \"3D object\". Object optical and temperature properties, and geometry per group.</p></p> <ul> <li>\"Atmosphere\" menu (reminder here): gas / aerosol geometry and optical properties (i.e., spectral single scattering albedo, transmittance for absorption and scattering,...), either imported or derived from the standard gas/ aerosol modelsin DART atmosphere database. Aerosol optical depth and water vapor content can be easily varied.   Atmospheric backscatter is only simulated if the atmospheric RT is simulated. Then, results can be for before and after atmospheric backscatter. DART-Lux images are only final images \u03c1scene(x,y,\u03a9) (i.e., \"after atmospheric backscatter\" images if there is atmosphere RT), and/or the BRFmap (i.e., \\(\\rho_\u0305{scene}(\u03a9) \u2200\u03a9 \u22082\u03c0^+\\)) before and after atmospheric backscatter.  DART-FT images can be before and after atmospheric backscatter, with no BRFmap.   DART-Lux simulates the atmospheric RT using either an Hybrid method (i.e., discrete ordinate method of DARTFT) or a pure Monte Carlo method. The default method is \"hybrid\". </li> </ul> <p>3D view of the scene of simulation T0A: <code>View / Scene 3D</code>. <p>3D scene / mock-up. Once it is created, it can be  displayed with \"View / Scene 3D\".</p></p> <p>2D view of the scene (not in DART-Lux): <code>View / Scene 2D / maket.txt</code> (see below).</p> <p>Layer navigator:  to set the xy, xz and yz sections and level.  Zoom:  zoom of the scene.  Mouse right click: cell coordinates, type of elements, data from text files (1 value per DART cell; here: output / <code>temperatures.txt</code> file) with the option   , indices of local triangles.  3 sub-menus : scene information (LAI of turbid vegetation, scene size,\u2026)</p> <p><p>Scene 2D view in DART-FT.</p></p> <p>View of DART directions of rays: <code>View / Directions 3D View</code> Discrete directions (central direction \\(\\Omega_i(\\theta_i, \\phi_i)\\), solid angle \\(\\Delta \\Omega_i\\)) sub-divide the \\(4\\pi\\) sphere with equal \\(\\Delta \\Omega_i\\), except the 2 smaller vertical directions (see below). Discrete and virtual directions can also be added in regions (\\(\\Delta \\Omega_{hot spot}, \\Delta \\Omega_{specular}\\),...), with an automatic reshape of the \\(4\\pi\\) sphere. Products can be for all upward discrete directions and also virtual directions added as single directions, and / or in planes and regions. DART-FT: it simulates RT only with the upward and downward discrete directions. DART-Lux: upward directions are only to set the viewing directions of the simulated images and terms of the brf/btf file derived from the 90\u00b0x360\u00b0 BRF/BTF map. (i.e., distribution of directional reflectance / radiance / brightness temperature). </p> <p><p>DART directions: \\(10^2\\) \"discrete\" and 2 \"virtual\".</p></p> <p>View DART simulated images: <code>View / Image</code></p> <p>The \"View image\" menu (Figure 121) allows you to display the DART simulated images: - Col. 1 \"Spectral bands\": the spectral band of the image to display.</p> <ul> <li> <p>Col. 2 \"Simulation  type\": reflectance, brightness temperature or radiance at 3 sensor altitudes (BOA, SENSOR, TOA). Note that BRF stands for BOA reflectance and Tapp stands for BOA brightness temperature.</p> </li> <li> <p>Col. 3 \"Iterations\": (1) DART-Lux: an iteration is a step of data storage per number of seconds or samples per pixel. IterX is the final product. It stands for \"after the atmospheric backscattering stage\" if there is atmosphere RT. (2) DART-FT: an iteration is a real iteration, and IterX is the extrapolation of last iterations. If there is atmosphere RT, IterX is \"before atmospheric backscattering\", and COUPL is \"after atmosphere backscattering. </p> </li> <li> <p>Col. 4 \"Images\": directional image imaxx_VZ=yy_VA=zz.mp#, with xx the image index, VZ the view zenith angle and VA the view azimuth angle. The BRFmap image exists only for DART-Lux. It represents \\({\\bar\\rho_{scene}(\\Omega)} \\forall \\Omega \\in 2\\pi^+\\) . The Albedo, Exitance and Irradiance images exist only for DART-FT. </p> </li> <li> <p>Col. 5 \"Projected Images\": it exists if the product \"Orthorectified\" is a product that is requested. </p> </li> </ul> <p><p>\"Image display\" menu of WP0A-Lux_NoRB (bottom) and WP0A-FT (bottom).</p></p> <p>The figure below shows DART-Lux inadir image (\\(N_{sample/pixel} = 20\\) and \\(10^3\\)) and BRF-map (\\(N_{sample/direction} = 20\\) and \\(90\\)) at \\(0.4 \\mu m\\). Larger \\(N_{sample/pixel}\\) and \\(N_{sample/direction}\\) improve accuracy but increase CT. Pure Monte Carlo is the most accurate method.</p> <p><p>DART-Lux images at 0.4\u00b5m. a) Nadir image with 20 and 103 samples per pixel. b) BRF-map with 30 and 90 samples per viewing direction.</p></p> <p>The figure below shows DART-Lux orthographic reflectance images at 1\u00b5m: nadir image and oblique viewing image (\\(\\theta =30\u00b0, \\phi =45\u00b0\\)) with its orthorectified image, the DART (x, y) reference system. In the nadir image, the orientation of shadow highlight the sun direction (\\(\\theta sun=30\u00b0, \\phi sun=45\u00b0\\)). In the oblique image, the observed reflectance of the ground is very large because the viewing direction is the specular direction of the ground given the sun direction. The red arrow indicates the viewing direction (\\(\\theta =30\u00b0, \\phi =45\u00b0\\)). The yellow color indicates zones that are not seen by the sensor. In the orthorectified image, the yellow color indicates zones that are not seen by the sensor.</p> <p><p> DART-Lux reflectance images at 1\u00b5m. a) Nadir image. b) Oblique image (\u03b8=30\u00b0, \u03c6=45\u00b0) and its orthorectified image.</p></p> <p>DART simulates element images \\(Im_i\\) such that \\(Im = \\sum_i Im_i\\). The figure below shows roof and ground images at \\(0.4 \\mu m\\). </p> <p><p>DART-Lux element orthographic and camera images at 0.4\u00b5m. a) Ground surface. b) Roof.</p></p> <p>The figure below shows DART-Lux and DART-FT color composite images created by the tool 'Tools / Color Composites', for BOA and TOA nadir and oblique orthographic views, and BOA oblique cameras with perspective views. DART-Lux and DART-FT images differ due to their different parametrizations of specular reflectance.  </p> <p>Question</p> <ul> <li>Ground and window specular reflectance is observed for specific viewing directions, only. Why?</li> <li>TOA images are bluer than BOA images. Why?</li> <li>Camera images: they are geometrically distorted and specular phenomena occurs in part of them only. Why?</li> </ul> <p><p>*DART-FT and DART-Lux RGB images with perspective \\((\\Delta \\Omega_v&gt;0)\\) and orthographic \\((\\Delta \\Omega_v=0)\\) projection.</p> <ul> <li>BOA sensor \\((\\Delta \\Omega_v=0)\\): a) nadir. b) oblique: \\(\\theta_s=22\u00b0\\),\\(\\phi_s=30\u00b0\\). Ground (c: \\(\\theta_s=30\u00b0\\),\\(\\phi_s=45\u00b0\\)) and window (d) specular directions.</li> <li>Low altitude camera \\((\\Delta \\Omega_v&gt;0)\\): hemispherical (e), oblique along ground specular direction (f).</li> <li>TOA sensor \\((\\Delta \\Omega_v=0)\\): nadir (g), oblique (h), and ground (i: \\(\\theta_s=30\u00b0,\\phi_s=45\u00b0\\)) specular direction.*</li> </ul> <p>\\(\\rho(\\Omega)\\), \\(T(\\Omega)\\) and \\(L(\\Omega)\\) can be plotted using the LUT, the brf/temperature file, and also the DART-Lux 90\u00b0x360\u00b0 BRF map. For DART-Lux, these directional data are the average values of the simulated images and data derived from the 90\u00b0x360\u00b0 BRF / BTF map. Figure below shows the DART-Lux scene BOA reflectance and brightness temperature plotted using \"View / Directional \u2026 / 2D \u2026\". It is very anisotropic in the 5 bands, in particular due to:</p> <ul> <li>Hot spot effect: local maximum around sun direction (\u2022). It increases with wavelength because BOA irradiance is more and more directional. It also occurs in the TIR because only warmer elements are seen in this direction. </li> <li>Specular effect: \\(\\rho_{BOA}^{short \\ wave}(\\Omega)\\)  is locally maximal for direction \\((\\theta_v=30\u00b0, \\phi_v=45\u00b0)\\). \\(T_B(\\Omega)\\) has no such maximum.</li> </ul> <p><p>DART-LUX \\(\\rho_{BOA}^{blue}(\\Omega), \\rho_{BOA}^{green}(\\Omega), \\rho_{BOA}^{red}(\\Omega), \\rho_{BOA}^{NIR}(\\Omega)\\). The black disc indicates the sun direction.</p></p> <p>LUT display: <code>View / LUT / File / WP0A-FT.db</code></p> <p>A LUT is a SQL database (here: <code>WP0A-FT.db</code>) that stores scene radiometric data of the scene: TOA irradiance \\(E_{TOA}\\), BOA direct \\(E_{BOA,dir}\\) / diffuse \\(E_{BOA,dif}\\) / total \\(E_{BOA}\\) irradiance,... To create the LUT of a multi-band simulation, if the \"Run / LUT properties\" menu select \"LUT creation\" and the data to store. The tool \"LUT display\" menu (the image a. below) selects its LUT and plot its data (the image b. below). Here, \\(E_{BOA}\\)  and \\(E_{TOA}\\)  are maximal in the green band (the image c. below) and TOA and BOA reflectance in nadir (0\u00b0) and ground specular (\\(\\theta_v=30\u00b0, \\phi_v=45\u00b0\\)) directions (the image d. below) greatly differ, which stresses the anisotropy of BOA and TOA reflectance. The plots can be exported</p> <p>Question</p> <p>DART \"analytical atmosphere\" is more accurate for simulating reflectance than for simulating radiance. Why? </p> <p><p>LUT. a) LUT selection: (WP0A-LUX.db) and data to plot. b) TOA irradiance, TOA irradiance and exitance. c) Nadir and oblique \\((\\theta=30\u00b0)\\) TOA and BOA reflectance, TOA atmosphere reflectance. d) Export of the plot. </p></p> <p>3D radiative budget (RB): \"View / 3D radiative budget / Surface radiative budget (see below)</p> <p>RB products are numerous: intercepted, absorbed, emitted and scattered energy per triangle, per cell (x,y,z), per type of element (e.g., leaf),..., for direct sun and total illumination,\u2026 and 3D, 2D and 1D. Figure below shows: 3D RB triangle irradiance \\(E_{dir,0.55\\mu m}\\) (a), \\(E_{total,0.55\\mu m}\\) (b), and absorbed image (c). Here, the RB of DART-Lux is only for the ground and the house because its simulation is less computationally efficient than for DART-FT.</p> <p><p>DART-FT 3D RB (unit %). Facet irradiance: a) DART-FT facet direct sun \\(E_{sun direct ,0.55\\mu m}\\) and final \\(E_{total,0.55\\mu m}\\) irradiance. b) DART-FT image \"Absorbed Energy\". c) DART-LUX facet \\(E_{final}^{ground}\\) and \\(E_{final}^{ground}\\).\\(0.55 \\mu m\\). Unit % </p></p> <p>The choice of methods and products can greatly influence CT, RAM and hard disk (HD) memory, especially for DART-FT, as illustrated by the table below.</p> <p><p>CT, RAM and HD needed by dart module for WP0A-FT, depending on input parameters and selected products.</p></p> <p><code>View dart.txt</code>: \"View / Report files / Dart file\" (see below)</p> <p>The file dart.txt stores major input parameters, results and log data useful to check simulations. For DART-Lux:</p> <ul> <li> <p>Input data: scene size, number of scene repetitions, upward sun direction, light radiation mode, maximal scattering order, Russian roulette depth, sampler, image pixel size, number of samples per pixel, number of samples per direction, maximum simulation time per image, number of threads, spectral bands , atmosphere geometry ,\u2026</p> </li> <li> <p>Results: illumination (irradiance and SKYL per band ), scene exitance and albedo / brightness temperature .</p> </li> <li> <p>Memory usage and processing time. They depend on the scene model and the requested products.</p> </li> </ul> <p><p>File dart.txt file of WP0A-Lux.</p></p>"},{"location":"Tutorials/T0/t0.html#2-boa-and-toa-scene-spectra-wp0b-ft-ct-7-wp0b-lux-ct-7","title":"2) BOA and TOA scene spectra: WP0B-FT (CT: 7\"), WP0B-Lux (CT: 7\")","text":"<p>Objective : to simulate scen TOA and BOA spectra.</p> <ul> <li> <p>Copy WP0A-LUX as WP0B-LUX with DART tool <code>Simulation / Save as</code>.</p> </li> <li> <p>Simulation editor:</p> <ul> <li>\"Passive RS &amp; RB\" menu: set \" Analytic model\" It is faster than with \"Atmosphere RT\", but is less accurate and does not give TOA data. For DART-FT, set \"Illumination mesh D: 0.015m\".</li> <li>\"Spectral intervals\" menu ( right click: ): add 200 bands over [\\(0.4\\mu m\\: 0.8\\mu m\\)] (\\(\\implies \\Delta \\lambda=2nm\\)) in mode R.</li> <li>\"Products\" menu: remove the RB product.</li> <li>\"Products/BRF\" set \"Image No\" and \"Product per type of Earth scene element: \\(\\Box\\)\" (\\(\\implies\\) results only in the LUT).</li> <li>\"Sensors\" menu: remove the 2 frame cameras (i.e., delete \"\").</li> <li>\"Directions\" menu: remove the 2 added directions.</li> <li>Optical properties / Lambertian\" menu: unset or remove the property 'Specular'. Then, all surfaces are lambertian.</li> <li>\"Earth scene\" menu: set 'Lambertian: ground' for the \"Earth scene\" (DART-FT: set \\(\\Delta x_{cell} = \\Delta y_{cell} = 1m\\)).</li> <li>\"Plots\" menu: hide the 2 plots with the option </li> <li>\"3D imported object\" menu: hide objects \"DEM\" and \"Cherry tree\" with </li> <li>\"Atmosphere\": unselect the product \"TOA atmosphere radiance\" and display (Gas \u2192 Optical properties\": ) the transmittance (see the image a. below) of scattering gases and absorbing gas</li> </ul> </li> <li> <p>Run WP0B-FT: <code>Run / DART</code></p> </li> <li> <p>DART spectra from the LUT: <code>View / LUT</code>  DART-Lux and DART-FT differ because specular optical properties differ. The image b. below shows:</p> <ul> <li>TOA irradiance \\(E_{TOA}\\), BOA irradiance EBOA, BOA exitance \\(M_{BOA}\\). \\(E_{BOA}(\\lambda) \\ll E_{TOA}(\\lambda)\\) at \\(\\approx\\) 760nm, 700nm, 720nm. \\(\\implies\\) Why?</li> <li>BOA radiance \\(L_{BOA}(\\lambda)\\) for 3 directions \\((\\theta_v=0\u00b0, 22\u00b0,41\u00b0)\\)kj. It illustrates the anisotropy of Earth surface radiance.</li> <li>BOA scene reflectance \\(\\rho_{BOA}\\). TOA scene \\(\\rho_{TOA}\\) / atmosphere \u03c1atm reflectance (only if 'Atmosphere RT' is run; not to do)</li> </ul> </li> </ul> <p>Question</p> <p>\\(\\rho_{TOA} &gt; \\rho_{BOA}\\) for small \\(\\lambda\\) and \\(\\rho_{TOA} &lt; \\rho_{BOA}\\) for large \\(\\lambda\\). Why? (\\(\\rho_{TOA} \\approx \\rho_{atm} + T_{atm}.\\rho_{BOA}\\))</p> <p>Note</p> <p>DART-Lux directional data \\(L_{BOA}(\\lambda)\\) and data integrated over \\(2\\pi^+\\) (i.e., albedo and exitance) are derived from the BRF map. The later is simulated if user-specified or if the LUT has the option \"Only for added directions \\(\\Box\\)\". </p> <ul> <li> <p>\"Analytic model\" vs. \"Atmosphere RT\": with 200 bands, the \"Analytic model\" is accurate for BOA albedo \\(A_{BOA}\\), approximate for \\(E_{*BOA}\\) and greatly faster (phase module: 37\" \\(\\rightarrow\\) 8\"; dart module: 244\" (43\" without option 'Coupling') \\(\\rightarrow\\) 6\"). \\(E_{BOA}\\), SKYL and \\(A_{BOA}\\) at 0.4 and \\(0.8\\mu m\\) for \"Atmosphere RT\" after / before coupling \\(\\rightarrow\\) \"Analytic model\" are:</p> <ul> <li>\\(0.4\\mu m\\): \\(E_{BOA}: 1265 / 1244\\) (coupling \\(\\implies \\approx 2\\%\\) increase) \\(\\rightarrow\\) \\(1197 W/m^2/\\mu m, SKYL: 50.3 / 49.5 \\rightarrow 47.6\\%\\), \\(A_{BOA}: 7.21 / 7.21 \\rightarrow 7.17\\%\\)</li> <li>\\(0.8\\mu m\\): \\(E_{BOA}: 947 / 938\\) (coupling \\(\\implies \\approx 0.9\\%\\) increase) \\(\\rightarrow 910 W/m^2/\\mu m, SKYL: 20.2 / 19.5 \\rightarrow 17.1\\%, A_{BOA}: 30.1 / 30.1 \\rightarrow 30.1\\%\\).</li> </ul> </li> </ul> <p><p>a) <code>dart_atmosphere.db</code>: atmosphere transmittance (scattering gases, O2 and O3 / H2O absorption). b) LUT: TOA &amp; BOA irradiance/exitance, radiance \\(L_{BOA}(\\Omega)\\) for 3 directions, and TOA/BOA scene and TOA atmosphere reflectance.</p></p> <p>Note</p> <p>TOA scene and atmosphere reflectance need the \"Atmosphere RT\" mode.</p>"},{"location":"Tutorials/T0/t0.html#3-vegetation-reflectance-as-a-function-of-lai-wp0c-ft-ct24-simulations-10-wp0c-lux-ct-24-simulations-16","title":"3) Vegetation reflectance as a function of LAI: WP0C-FT (CT24 simulations: 10\"), WP0C-Lux (CT 24 simulations: 16\")","text":"<ul> <li> <p>Objective  1) \\(\\rho_{plot}(LAI,\\rho_{ground})\\) of a DART vegetation at \\(0.4\\mu m\\) and \\(1\\mu m\\).  2) Use of the DART sequencer of simulations.</p> </li> <li> <p>Copy WP0B-FT as WP0C-FT with DART tool <code>Simulation / Save as</code>.</p> </li> <li> <p>Simulation editor: </p> <ul> <li>'Spectral intervals' in 'Passive RS &amp; RB parameters': to create 2 bands. right click +  (spectral range: \\(0.4-0.4\\mu m\\), 1 band). Then, create the 2 band with \"Add\" \\((1\\mu m, \\Delta \\lambda=0\\mu m\\)).</li> <li>\"Products\": remove all products. Then, results are stored only in the LUT of the simulation / sequence.</li> <li>\"Directions\": add a single direction \"Nadir\" direction.</li> <li>\"Optical properties\": set \"Multiplicative factor for database: \\(\\checkmark\\)\" for the 1st lambertian property \"ground\".</li> <li>\"Earth scene\": set \"Whole: sub\"  and  Points 2D   and  .DART-FT: \\(\\Delta x_{cell}=\\Delta y_{cell}=5m, \\Delta z_{cell}=0.1m\\).</li> <li>\"Earth scene plots\": unset \"Ignore this plot in mock-up creation\" for the 1st plot.</li> </ul> </li> </ul> <p>Note</p> <p>CT of DART-FT is greatly reduced if in \"Passive RS &amp; RB\", we set: Illumination step: D=0.5m</p> <ul> <li>Create the sequence <code>seq_ground_LAI.xml</code> {\\(LAI \\in [0 \\:6]\\), \\(\\Delta_{LAI}=0.5\\); \\(\\rho_{ground}(\\lambda)=0\\) and 0.5 x loam_sandy_brown\u2026}  Use the method <code>Run / SequenceLauncher / Create Sequence</code>(Figure below), then in the Sequence menu:<ul> <li>Click on  then add the group \"Rground\" {mode Enumerate, 2 cases \\(\\rho_{ground}\\) defined by \"value 1=0\" and \"value 2=0.5\"} and the group \"LAI\" {mode linear, 13 \"LAI\" defined by an initial value 0 and a step 0.5}.</li> <li><code>Preferences / Process\u2026</code>: define the processes and number of simulations to run in parallel.</li> <li><code>Preferences / Delete\u2026</code>: set the files to delete / keep; here, it deletes all files, apart the LUT.</li> <li><code>Preferences / LUT generation</code>: set the data to store and \"Only added directions\" (\\(\\implies\\) BRF not simulated).</li> </ul> </li> </ul> <p><p>Sequence creation. The 2 variables are \\(\\rho_{ground}\\) (2 values: 0 and 0.5) and LAI (13 values: 0 to 6; step=1).</p></p> <ul> <li> <p>Run the sequence: <code>Run / SequenceLauncher / Prepare and run sequence</code>.</p> </li> <li> <p>Display \\(\\rho_{plot}(LAI)\\) with {\\(\\rho_{ground}=0\\) and \\(\\rho_{ground}=0.5\\)x'loam_sandy_brown...' at \\(0.4\\mu m\\) and \\(1\\mu m\\)} with <code>View / LUT</code> (see below). As expected, if \\(\\rho_{ground} &gt;0\\), \\(\\rho_{plot}(\\lambda,LAI)\\) increases if LAI increases. It decreases at \\(4\\mu m\\) if \\(\\rho_{ground} =0\\).</p> </li> </ul> <p>Note</p> <p>Sequences can be run for any parametrs and any landscape. </p> <p><p>Nadir \u03c1plot (LAI) at \\(0.4\\mu m\\) and \\(1\\mu m\\), with \\(\\rho_{ground}(\\lambda)=0\\) and 0.5 x \"loam\u2026\".</p></p>"},{"location":"Tutorials/T0/t0.html#4-time-series-wp0d-ft-ct-29-simulations-13-wp0d-lux-ct-29-simulations-34","title":"4) Time series: WP0D-FT (CT 29 simulations = 13\"), WP0D-Lux (CT 29 simulations = 34\")","text":"<ul> <li> <p>Objective: variation of \\(E_{TOA}(t), E_{BOA}(t)\\) and \\(\\rho_{plot}(t)\\) from 6h to 20h with 30min time steps.</p> </li> <li> <p>Copy WP0C-LUX as WP0D-LUX with DART tool <code>Simulation / Save as</code>.</p> </li> <li> <p>Simulation editor:</p> <ul> <li>\"Passive RS &amp; RB parameters / Spectral intervals\": set only band \\((0.4\\mu m, \\Delta \\lambda=0\\mu m\\)).</li> <li>\"Directions\": set sun direction (option \"Exact date\": 5 am on 22/07/2018, Local time, Time zone 0: Figure below).</li> </ul> </li> </ul> <p><p>Definition of sun direction with the option \"Exact date\".</p></p> <ul> <li>Create the sequence [5h 19h30] {29 steps, \\(\\Delta t=30mn\\)}: <code>Run / SequenceLauncher / Create Sequence</code> (see below)</li> </ul> <p><p>Sequence creation {t \\(\\in\\) [5h  19h], \\(\\Delta t\\)=30mn} (a) with specification of data to store in the LUT (b).</p></p> <ul> <li> <p>Run the sequence: <code>Run / SequenceLauncher / Prepare and Run\u2026</code></p> </li> <li> <p>Display LUT results: <code>View / LUT / File / Choose Simulation</code> and select \"Exact date\" for the Ox axis. The images a and b show {\\(E_{TOA}(t)\\), \\(E_{BOA}(t)\\), \\(E_{BOA,dir}(t)\\), \\(E_{BOA,diff}(t)\\)} and \\(\\rho_{plot}(0\u00b0,t)\\) at \\(0.4\\mu m\\). \\(\\rho_{plot}\\) is larger early and late in the day because at that time \\(E_{BOA,diff}(t) &gt; E_{BOA,dir}(t)\\), whereas \\(\\rho_{plot,diff}(t) &gt; \\rho_{plot,dir}(t)\\).</p> </li> </ul> <p><p>a) Menu for LUT creation {\\(t\\in[6h \\:18h]\\), \\(\\Delta t=30mn\\)}. b) TOA/BOA irradiance. c) Nadir reflectance. \\(0.4\\mu m\\).</p></p>"},{"location":"Tutorials/T0/t0.html#5-topography-and-trees-wp0e-ft-ct9-wp0e-lux-ct2","title":"5) Topography and trees: WP0E-FT (CT=9\"), WP0E-Lux (CT=2\")","text":"<p>Objective to simulate topography and trees, and their nadir reflectance.</p> <ul> <li> <p>Copy WP0D as WP0E. Then, remove the sub-zone (\\(\\implies\\) scene = 30m x 30m).</p> </li> <li> <p>Spectral intervals: set 2 bands: \\(0.67\\mu m, 1\\mu m\\); \\(\\Delta \\lambda=0\\mu m\\). Sun angles: \\(\\theta_s=30\u00b0, \\phi_s=225\u00b0\\). Illumination step: 0.015m.</p> </li> <li> <p>Direction: set sun angles \"Viewing angle \\(\\theta s = 30\u00b0 , \\phi s= 225\u00b0\\)\". (DART-FT: illumination step = 0.015m).</p> </li> <li> <p>Earth scene: set \"Whole: whole\". \\(\\Delta x_{cell}=\\Delta y_{cell}=0.25m\\) and \\(\\Delta z_{cell}=0.5m\\).</p> </li> <li> <p>Earth scene: Plots, set \"Ignore this plot in mock-up creation\" for the 2 plots.</p> </li> <li> <p>\"Earth scene: trees\"</p> <ul> <li>Set option \"Exact tree location + random trunk/crown dimensions (mean, standard deviation) per tree specie\". </li> <li>Set \"Ignore trees in mock-up creation: \\(\\Box\\)\".</li> <li>Create and import the file  (see the table below) in folder 'input': 4 trees of 2 tree species.</li> <li>Species 1: default species, \\(LAI_{species1}=0.6\\). </li> <li>Species 2: create it with <code>right click</code> Species / Duplicate on Species 1. Then set LAI=0.2 and Crown= truncated cone with Bottom radius= 3m and top radius= 0.5m. Trees will be simulated with facet-crowns (, \\(Area_{triangle}\\): \\(0.1m^2\\)), then turbid-crowns.</li> </ul> </li> <li> <p>Import 3D object : Digital Elevation Model(DEM) <code>dsm_gauss 50cm.obj</code> (3D object): </p> <ul> <li>right click on <code>3D imported object / Punctual object</code> and replace <code>dsm_50cm.obj</code>by <code>dsm_gauss_50cm.obj</code>.</li> <li>Set \"Ignore the Digital Elevation Model (DEM): \\(\\Box\\)\".</li> <li>Set \"DEM mode: Used as DEM\"; then, scene elements are automatically above this 3D object.</li> <li>\"Geometric properties: Position\". Center the DEM at (15m, 15m). </li> <li>Set the DEM optical property \\(\\rho_{ground}\\), temperature property to (Tmineral) and color. </li> </ul> </li> <li>Import 3D object : windows have new altitudes because of the DEM (window 1: 6.8m, window 2: 5.6m).</li> </ul> <p>Note</p> <p>Same or different scene in repeated simulations. Scenes defined by standard deviations (e.g., dimensions of DART created tree) are identical or not in repeated simulations depending on option .</p> <p>Note</p> <p>DEM. Raster and vector (i.e.,3D object treated as a DEM) DEM can be imported. The option ( (Figure below) + user-defined pixel dimensions) creates schematic raster DEMs (e.g., plane, gaussian).</p> <p>Note</p> <p>3D object creation: {Maket module + option   + raster DEM} creates a 3D object dsm.obj with all facets of the scene. It can be the DSM (Digital Surface Model) or the DEM if the scene is a pure ground surface. </p> <p>Note</p> <p>High spatial resolution RBground. The DART default horizontal ground surface is made of 2 triangles. It must contain many small facets to simulate a spatially accurate RBground. A solution is to use a fine resolution vector or raster \"plane\" DEM. For horizontal scenes, this can be done through the creation of an horizontal DEM (e.g.,   with small cell dimensions) that is later vectorized or not as a 3D object.</p> <p><p>Creation of a 3D object (a) that results of a \"schematic DEM\" (b) created with resolution: \\(\\Delta x_{cell}=\\Delta y_{cell}=0.5m\\) (c) and shape (b) that can be horizontal, gaussian,\u2026 </p></p> <p><p>File <code>trees_WP0E.txt</code>: Species (tree optical properties,\u2026), Location, Trunk, Crown. The header of the file <code>trees.txt</code> in DART database lists all possible parameters. Here the option \"Exact tree location + random dimensions\", only uses \"Species, X, Y\" of the tree file; all other parameters are set in the GUI.</p></p> <p>Figure below shows DART-Lux and DART-FT nadir reflectance images simulated at \\(0.67\\mu m\\) and \\(1\\mu m\\), with a \\(0.25m\\) spatial resolution, for 2scene simulations (i.e., tree crowns filled with 1m2 facets or turbid medium). DART-Lux and DART-FT mean reflectance images are very close. However, DART-Lux is much faster. It is also more accurate if Nsample/pixel is large enough. The similarity of results with facet and turbid tree crowns stresses that here, with trees occupying a small part of the scene, the transformation \"Turbid  Facets\" is interesting as it leads to faster results.  DART-FT: </p> <ul> <li>CT increases if cell size \\(\\Delta r\\) decreases, more for \"turbid trees\" than for \"triangle trees\". Ex.: for \\(\\Delta r\\) from 1m to 0.25m, CT increases \\(\\approx 5\\) fold for \"triangle trees\" and \\(\\approx 100\\) fold for \"turbid trees\" (see below).</li> <li>the <code>dart.txt</code> file informs if a different (more optimal) number of iterations should be used.</li> </ul> <p><p>Nadir DART-FT images. Facet (a,b) and Turbid (c,d) trees. \\(0.67\\mu m\\), \\(1\\mu m\\). e) \\(1\\mu m\\) element images. \\(\\Delta r=1m.\\)</p></p> <p><p>DART-FT (a,b) &amp; DART-Lux (c,d) images: \\(0.67\\mu m\\), \\(1\\mu m\\). \\(\\Delta r=0.25m\\). a,c) Turbid trees. b,d) Triangle trees.</p></p> <p>Monte Carlo noise and uncertainty in the simulation of the 3D scene are the 2 usual sources of uncertainty in DART-Lux reflectance. Here, this is illustrated for the case of nadir reflectance \\(\\rho(0\u00b0)\\) at \\(0.67\\mu m\\) and \\(\\mu m\\) (Figure below): </p> <ul> <li> <p>Pure Monte Carlo noise: here, it is assessed by running \\(N_{MC} = 5\\) times the same simulation with an identical 3D scene both for tree crowns filled with turbid medium and facets. It is done with a sequence that does not run the maket module and that gives 5 values to a DART parameter (e.g., SENSOR altitude) that does not influence \\(\\rho(0\u00b0)\\). </p> </li> <li> <p>3D scene uncertainty with combined Monte Carlo noise: here, the 3D scene uncertainty is cause by the facet random position and orientation around the spherical angular distribution. It is assessed with the above sequence, but with a re-simulation of the 3D scene with option \"Use random seed for random operations: \\(\\checkmark\\)\" at each simulation. </p> </li> </ul> <p>Although the trees occupy a small portion of the scene, the variability of \\(\\rho(0\u00b0)\\) caused by the 3D scene uncertainty is larger than that caused by the Monte Carlo noise by a factor of just under 2.  </p> <p><p>DART-Lux uncertainty. a) Turbid crowns. b) Facet crowns with same facet distribution. c) Facet crowns with variable distribution of facets in the tree crowns. 0.67\u00b5m (top) and 1\u00b5m (bottom).</p></p>"},{"location":"Tutorials/T0/t0.html#6-presence-of-a-cloud-wp0f-ft-ct211-wp0f-lux-6s","title":"6) Presence of a cloud: WP0F-FT (CT=211\"), WP0F-Lux (6s)","text":"<p>Objective : impact of cloud in images with very schematic cloud simulation</p> <p>Scene: 3 bands (0.4, 0.55, \\(0.68\\mu m\\); \\(\\Delta \\lambda=0\\mu m\\)). \\(\\Delta r=0.1m\\). Cloud: ellipsoidal (33m altitude, reflectance: \\(\\rho_{ellips}=0.4\\); diffuse transmittance: \\(t_{ellips}\\)=0.3. Facet trees.</p> <p>Warning</p> <p>The ellipsoidal should be filled with fluids in order to get realistic results! This is being implemented. CT will greatly increase for DART-FT, and much less for DART-Lux.</p> <p>Note</p> <p>DART-FT's greatly decreases with option \"1st scattering order, Only for stored image\"</p> <p><p>DART-Lux: scene + cloud.</p></p>"},{"location":"Tutorials/T0/t0.html#7-lidar-wp0g","title":"7) LiDAR: WP0G","text":""},{"location":"Tutorials/T0/t0.html#a-lidar-mono-pulse-wp0ga-rc-ct1-wp0ga-lux-ct1","title":"a) LiDAR mono-pulse: WP0Ga-RC (CT=1\"), WP0Ga-Lux (CT=1\")","text":"<p>Objective: LiDAR signal of DART-Lux (bi-directional MC) &amp; DART-RC (forward MC)</p> <ul> <li>Copy WP0E-Lux as WP0Ga-Lux and select \"Radiation / Objective\": LiDAR</li> <li>\"LiDAR parameters\": Energy of each pulse : \\(1 mJ\\) (\\(\\approx 5.35 10^{15}\\)); Number of rays used to sample photons : \\(10^6\\).<ul> <li>\"Spectral intervals\": 1.064\u00b5m </li> <li>\"LiDAR geometry \": <ul> <li>Stored waveform for height above/below minimum altitude : 50m</li> <li>Footprint / FOV central direction  \\((0\u00b0)\\), center  (15m, 15m)</li> <li>\"Radii\" : footprint: 12m, FOV: 15m. </li> <li>\"ALS\" : altitude: 10km. </li> </ul> </li> </ul> </li> <li>\"Products\": convolved waveform, photon image, per scene element type and photon information (Figure below).</li> <li>\"Scene\": \\(\\Delta x = \\Delta y = 1m\\). \"Urban\", \"Plots\", \"Trees\", \"3D objects\": ignore all elements; then, the scene is bare ground.</li> </ul> <p><p>LiDAR mono pulse: menu.</p></p> <p>1) Bare ground  The bare ground scene is simulated without and with the DEM. The figure below shows the resulting LiDAR images:</p> <ul> <li>BOA incident LiDAR pulse: 2D distribution of photons in footprint. We have: \\(N_{photons} \\approx 5.35 10^{15} (N_{pixels} = 448)\\).</li> <li>BOA backscattered LiDAR signal: \\(N_{photons} = 0\\) in the part of the FOV outside the footprint.</li> <li>BOA equivalent LiDAR reflectance: its mean value is \\(0.45825\\) that is very close to the actual \\(\\rho_{ground} = 0.48578\\). The slight vertical dissymmetry is being corrected. </li> </ul> <p>Figure 141 shows two types of waveforms without and with the DEM:</p> <ul> <li>Raw waveform: theoretical case where all photons are launched at the same time (\\(\\Delta t_{pulse} = 0s\\)). It is stored in output / file <code>LIDAR_DART_wave.txt</code>. </li> <li>Convolved waveforms: convolution of the raw waveforms with the realistic pulse signal (\\(\\Delta t_{pulse} &gt; 0s\\)).</li> </ul> <p>The raw and convolved waveforms have the same number of photons: \\(8.28 10^5\\) with no DEM and \\(8.09 10^5\\) with the DEM. The number of photons is smaller in presence of the DEM because its sloppy surfaces are less illuminated than the horizontal ground surface.</p> <p><p>LiDAR mono pulse:LiDAR images ffor bare ground without DEM and with DEM.</p></p> <p><p>LiDAR mono pulse of bare ground. a) Without DEM. b) With DEM. </p></p> <p>2) 3D scene plus trees, house and DEM</p> <p>The scene is simulated with the DART created trees, house (with its skylights) and the DEM (Figure below). Here, the number of rays used to sample photons is \\(10^5\\). Figure below shows the waveforms of the scene and per type of scene element (i.e., ground, roof, vegetation, etc.), where the scene element is the last scatterer. Their shapes depend on the altitudes of scene elements, including the DEM, on single and multiple scattering by and between scene elements, and also on the laser pulse duration. These interaction explain that the waveform of the ground is not a Dirac function and has non null values for negative time on the horizontal axis (i.e., time = 0 ns for horizontal ground without scattering). </p> <p><p>LiDAR mono pulse: a) DART editor: scene with footprint and FOV. b) 2D view. c) 3D view.</p></p> <p><p>LiDAR mono pulse: raw waveform per type of scene element.</p></p> <p>DART-Lux and DART-RC results are very similar. The figure below shows images at the scene level (i.e., BOA): incident LiDAR pulse, backscattered LiDAR signal and equivalent LiDAR reflectance. The two skylights appear with dark tones because their reflectance is very low. </p> <p><p>LiDAR mono pulse: LiDAR pulse, Photons reached ground, LiDAR BOA signal and LiDAR BOA signal reflectance. Top:DART-Lux. Bottom: DART-RC.</p></p> <p>DART-RC simulates the exact and apparent location of 3D last scattering per volume and scatterer (Figure below). This is not yet implemented in DART-Lux.</p> <p><p>a) 1st and multiple order 1D waveform. b) Exact scattering location: c) Apparent scattering location. d) Backscattered energy per volume unitThe energy can be thresholded. </p></p>"},{"location":"Tutorials/T0/t0.html#b-lidar-multi-pulse-wp0gb-ft-ct-40-and-dart-lux-143","title":"b) LiDAR multi-pulse: WP0Gb-FT (CT= 40\") and DART-Lux (1'43\")","text":"<p>Objectve: to illustrate the simulation of ALS.</p> <p>DART-Lux input parameters are given below. They are the same for DART-FT. Presently, DART-RC is advised because DART-Lux is slower. It will be improved soon. </p> <ul> <li>Copy WP0Ga-Lux as WP0Gb-Lux.</li> <li>DART-Lux: LiDAR / LiDAR parameters: <ul> <li>Number of rays used to sample photons : Nphotons=4 104.</li> <li>/ Geometry / Radii : footprint= 0.3m, FOV=0.4m</li> <li>/ ALS / Swath :  altitude=1km</li> <li>/ Swath:  swath width,  Start (7m, 7m) /  end (23m, 23m) points,   control point (0m, 0m),   azimuth / range resolutions: 1m.</li> </ul> </li> </ul> <p><p>Multi-pulse menu.</p></p> <p><p>ALS. Waveform of pulse 254 and 3D view of all waveforms.</p></p>"},{"location":"Tutorials/T0/t0.html#c-lidar-discrte-return-wp0gc-ct23","title":"c) LiDAR Discrte return: WP0Gc (CT=23\")","text":"<p>With option \"LiDAR Type\": Discrete Return\", a discrete points cloud is derived from a Gaussian decomposition (GD) of DART waveforms. To ensure that all discrete points are detected by GD, set \"Number of points per pulse\" to 10 or larger. File DetectedPoints.txt stores the point cloud. The open source code CloudCompare (Figure below) can display it. </p> <p><p>Point cloud <code>DetectedPoints.txt</code>.</p></p>"},{"location":"Tutorials/T0/t0.html#8-large-scene-and-dart-lux-parameters-wp0h-lux","title":"8) Large scene and DART-Lux parameters: WP0H-Lux","text":"<p>Objective: to illustrate the type of sensitivity study to perform in order to determine the values for \\(N_{scattering}, N_{sample/direction},\\) and \\(N_{sample/pixel}\\) given the Monte Carlo noise of DART-Lux. This question is considered below for scene reflectance derived from BRF maps and also from images.</p> <ul> <li>Scene: (Figure below) 100m x 100m schematic DEM (3D object) with the J\u00e4rvselja birch stand from the RAMI experiment (rami-benchmark.jrc.ec.europa.eu) that consists of 1047 trees in 18 species (acer, populus,\u2026). All trees are simulated as clones of 18 tree obj trees stored in \"input\\trees_simplified\". Sun direction: \\(\\theta s=36.6\u00b0, \\phi s=180\u00b0\\). </li> </ul> <p><p>DEM, a few trees of the RAMI J\u00e4rvselja birch forest, with the DART-Lux simulated 3D scene.</p></p> <ul> <li> <p>Rectangular (BRF map) and derived polar plot of \\(\\rho(\\theta,\\phi)\\)  Figure below shows the BRF map at \\(0.44\\mu m\\) and polar plots of \\(\\rho(\\theta,\\phi)\\) derived from BRF maps at \\(0.44\\mu m, 0.57\\mu m, 0.66\\mu m\\) and \\(1\\mu m\\). These results are for \\(N_{sample/direction} = 100, N_{scattering} = 80\\) and BRF maps simulated with 1\u00b0 view zenith and azimuth resolution over the whole angular range (i.e., the BRF map has 90 lines and 360 rows). Two features can be noted in the BRF map at \\(0.44\\mu m\\):</p> <ul> <li> <p>Maximal values around the hot spot direction (i.e., \\(\\theta s=36.6\u00b0, \\phi s=180\u00b0\\)). This maximum also appears in the polar plots for the 4 spectral bands. It is not only due to vegetation because it also appears with \"bare ground + DEM\". </p> </li> <li> <p>Absence of reflectance values (yellow color) for viewing directions \\(\\bar{\\Omega}_V\\)  with \"large view zenith angles combined and small or large view azimuth angles\" such that \\(\\bar{\\Omega}_V.\\bar{\\Omega}_{slope}   &lt; 0\\).</p> </li> </ul> </li> </ul> <p><p>Directional reflectance of RAMI J\u00e4rvselja birch forest. Top: BRF map (90 lines x 360 rows) at \\(0.44\\mu m\\). Bottom: polar plots at \\(0.44\\mu m, 0.57\u00b5m, 0.66\\mu m\\) and \\(1\\mu m\\). \\(N_{sample/direction} = 100\\). \\(N_{scattering} = 80\\).</p></p> <ul> <li>Scene nadir reflectance \\(\\rho(0\u00b0)\\) at \\(0.44\\mu m\\) and \\(1\\mu m\\) (Figure below), as derived from 2 independent products:<ul> <li>BRF map. \\(\\rho(0\u00b0)\\) is the mean value of the 1st line of the BRF map. Here, \\(N_{sample/direction}\\) is from 1 to 100 with 25 intermediate results using \\(\\Delta _{BRF\\ map}^{save} = 4\\). </li> <li>Reflectance image of the scene. \\(\\rho(0\u00b0)\\) is the mean value of the nadir reflectance image. Here, \\(N_{sample/pixel}\\) is from 1 to 20 with 20 intermediate results using \\(\\Delta _{image}^{save} = 4\\). </li> </ul> </li> </ul> <p>Each product is simulated \\(N_{MC} = 5\\) times to evaluate the Monte Carlo noise. Here, it is done by setting 5 distinct values to a DART parameter (e.g., SENSOR altitude) that does not influence \\(\\rho(0\u00b0)\\). Each product is also simulated for \\(3\\ N_{scattering}\\) (i.e., \\(10, 20\\) and \\(80\\)) values to evaluate the influence of the scattering order on \\(\\rho(0\u00b0)\\). It leads to 30 simulations (i.e., \\(2\\) x \\(N_{MC}\\) x \\(N_{scattering}\\)) computed by 2 sequences: one sequence simulates 15 spectral nadir images at \\(0.05m\\) with 20 saving steps each, and one sequence simulates 15 spectral BRF maps with 25 saving steps each. Here, the mean value of any image is computed with a number of samples (i.e., \\(N_{pixel}\\) x \\(N_{sample/pixel}\\) where \\(N_{pixel} = 4 10^6\\) as \\(\\Delta r = 0.5m\\)) much larger than the BRF map (i.e., \\(N_{sample/direction}\\)). Therefore, the nadir image leads to a more accurate \\(\\rho(0\u00b0)\\) than the BRF map. </p> <p>For \\(\\rho(0\u00b0)\\) derived from the nadir image, \\(\\rho(0\u00b0)\\) at 0.44\u00b5m is nearly the same at \\(N_{scattering} = 10, 20\\) and \\(80\\). At \\(1\\mu m\\), \\(\\rho(0\u00b0)\\) increases from \\(N_{scattering} = 10\\) to \\(N_{scattering} = 20\\), whereas its change from \\(N_{scattering} = 10\\) to \\(N_{scattering} = 20\\) is within the Monte Carlo noise.</p> <p>Figure below shows relative errors on \\(\\rho(0\u00b0)\\) derived from BRF maps and images. The reference \\(\\rho(0\u00b0)\\) is the average of all images simulated with {\"\\(N_{sample/pixel} = 20\\)\", \\(N_{scattering} = 80\\)}; it is \\(0.013294\\) at \\(0.44\\mu m\\) and \\(0.250654 at 1\\mu m\\). The relative error of \\(\\rho(0\u00b0)\\) derived from the BRF map with \\(N_{sample/direction} = 100\\) is \\(\\approx 0.01\\) at \\(0.44\\mu m\\) and \\(1\\mu m\\); it decreases down to \\(0.002\\) with \\(N_{sample/direction} = 1000\\). The relative error of \\(\\rho(0\u00b0)\\) derived from the nadir image is much smaller because \\(N_{pixel}\\) is much larger than \\(N_{sample/direction}\\). It is less than \\(0.0013\\) with \\(N_{sample/pixel} = 1\\).</p> <p><p>Variation of nadir reflectance \\(\\rho(0\u00b0)\\) with \\(5\\ N_{MC}\\) and 3 \\(N_{scattering} (10, 20, 80)\\) values. Top: \\(\\rho(0\u00b0)\\) from the BRF map with \\(N_{sample/direction} = 100\\) and \\(\\Delta _{BRF\\ map}^{save}  = 4\\). Bottom: \\(\\rho(0\u00b0)\\) = mean value of nadir image with \\(N_{sample/pixel} = 20\\) and \\(\\Delta _{image}^{save} = 1\\). Left: \\(0.44\\mu m\\). Right: \\(1\\mu m\\).</p></p> <p><p>Relative error of \\(\\rho(0\u00b0)\\) at \\(0.44\\mu m\\) (blue) and \\(1\\mu m\\) (red) derived from image (solid line) and BRF map (dotted line).</p></p> <ul> <li>Nadir images: DART-Lux accuracy increases with \\(N_{sample/pixel}\\), and therefore with simulation time. Figure below illustrates this increase with images simulated at \\(0.44\\mu m\\) with \\(N_{sample/pixel}\\) equal to 1 and 20 and \\(N_{scattering} = 80\\): reflectance improves considerably at the pixel level, but its average value over the whole image is nearly constant (i.e., relative difference \\(\\approx 3.9 10^{-4}\\)). On the other hand, computation time (CT) is multiplied by 20. With resolution \\(\\Delta r = 0.05m\\), DART-Lux needs less than 3 Gb of RAM for the maket module and \\(\\approx\\) 3.8 Gb for the dart module. On the other hand, DART-FT needs more than 400Gb of RAM if \\(\\Delta r = 0.125m\\), and much more if \\(\\Delta r = 0.05m\\). In addition, DART-FT is much slower. It explains why only DART-Lux results are showned here. Figure below shows DART-FT and Lux color composites with indication of the corresponding CT and RAM. </li> </ul> <p><p>DART-Lux images of J\u00e4rvselja forest. a) \\(N_{sample/pixel} = 1\\). b) \\(N_{sample/pixel} = 20\\). \\(\\lambda = 0.44\\mu m\\).</p></p> <p><p>DART images of RAMI J\u00e4rvselja birch forest. a,d) DART-FT: CT=24h; \\(\\Delta r=12.5cm\\); RAM &gt; 400Gb. b,e) DART-Lux: CT=1'; \\(\\Delta r=5cm\\). c,f) DART-Lux: CT=5'; \\(\\Delta r=5cm\\).</p></p>"},{"location":"Tutorials/T1/t1.html","title":"WP1 - Reflectance","text":"<p>Objective: </p> <ul> <li> <p>To manipulate lambertian surfaces (i.e., isotropic radiance and reflectance) and spectral / broadband terms: radiance \\(L_{\\lambda}(\\Omega)\\) / \\(L_{\\Delta \\lambda}(\\Omega)\\), exitance \\(M_{\\lambda}\\) / \\(M_{\\Delta \\lambda}\\), irradiance \\(E_{\\lambda}\\) / \\(E_{\\Delta \\lambda}\\), bi-directional reflectance factor (BRF): \\(\\rho_{\\lambda}(\\Omega)=\\frac {\\pi.L_{\\lambda}(\\Omega)} {E_{\\lambda}}\\) / \\(\\rho_{\\Delta \\lambda}(\\Omega)=\\frac {\\pi.L_{\\Delta \\lambda}(\\Omega)} {E_{\\Delta \\lambda}}\\), ...</p> </li> <li> <p>To create mono-band (1 band) &amp; multi-band (N bands) simulations of 2D scenes and display images {\\(\\rho_{xy,\\lambda}(\\Omega), L_{xy,\\lambda}(\\Omega)\\),...} and 2D/1D plots: \\(\\overline{\\rho}_{xy,\\lambda}(\\Omega),\\overline{\\rho}_{xy,\\lambda}(\\theta, \\phi=cst)\\), LUT...</p> </li> <li> <p>To create a spectral sequence (cf. III.5.3 ) of mono-band simulations and its LUT.</p> </li> </ul> <p></p> <p>The 2 DART modes (Bi-Directional Monte Carlo, Forward: initial mode) give similar image and radiative budget (RB) products. 'Forward' (i.e., 'DART-FT: Passive RS &amp; RB' uses the DOM; 'DART-RC: LiDAR' uses the RC method) is optimal for simple scenes and RB. Being optimal for complex 3D scenes, 'Bi-Directional' (i.e., DART-Lux) is advised here. Screen copies show how to create WP1-Lux and WP1-FT simulations with parameters in Table below. </p> <p><p>WP1A parameters with those specific to the Forward (DART-FT) and Bi-Directional (DART-LUX) modes. They are stored in xml files (i.e., text files) in the simulation 'input' folder. After entering them in the GUI, save the simulation (command <code>File / Save simulation</code>). Then, the symbol \" * \" on top of the editor menu panel disappears.</p></p>"},{"location":"Tutorials/T1/t1.html#1-preparation-and-run-of-a-dart-simulation-wp1a-ft-ct3-wp1a-lux-ct19","title":"1) Preparation and run of a DART simulation: WP1A-FT (CT=3\"), WP1A-Lux (CT=19\")","text":"<p>Objective: to get started with the edition and run of a DART simulation, 1D and 2D displays,...</p> <ul> <li> <p>Create WP1A-*  (<code>Simulation / New simulation</code>): * = FT or LUX. It creates 2 empty folders (input, output) in folder WP1A-*.</p> </li> <li> <p>Enter data of the table above into the simulation (GUI command <code>Parameters / Editor</code>)</p> </li> </ul> <p> Light propagation mode: Bi-Directional (\\(\\implies\\) DART-LUX *.Lux simulations) or Forward  (DART-FT)</p> <p><p>Radiation menu. Light propagation mode: 'Forward' to create WP * -FT simulations and 'Bi-Directional' to create WP * -Lux simulations.  'Transition:TOA \\(\\leftrightarrow\\) BOA\": Analytic model'.</p></p> <ul> <li>Irradiance or radiance (see below): here, an analytic model (option: \"TOA \\(\\rightarrow\\) BOA transfer\") derives BOA irradiance {\\(E_{BOA,\\lambda}, SKYL_{\\lambda}\\)} from \"Thuiller-Kurucz\" TOA spectral irradiance \\(E_{TOA,\\lambda}\\) in database '<code>solar_constant.db</code>; \\(W/m^2/\\mu m\\)) and atmosphere properties in DART database '<code>dart_atmosphere.db</code>. It does not compute the BOA \\(\\rightarrow\\) TOA transfer and therefore the TOA data (\\(\\implies\\) in the LUT: \\(L_{TOA}^{\\uparrow}(\\Omega)=L_{BOA}^{\\uparrow}(\\Omega) \\:\\forall \\Omega\\) and \\(M_{BOA} = M_{TOA}\\).</li> </ul> <p>Note</p> <p>Other scene illumination: \"spectral radiance \\(L_{BOA,\\lambda}(\\Omega)\\)\", band irradiance/solar constant \\(E_{BOA,\\Delta \\lambda}\\): \\(W/m^2\\), \\(SKYL_{\\Delta \\lambda}\\) (1: cloud cover = 100%; 0: atmosphere does not scatter), or \"spectral irradiance \\(E_{BOA,\\lambda}\\) \\((W/m^2/\\mu m) + SKYL_{\\lambda}=\\frac {E_{sky,\\lambda}} {E_{BOA,\\lambda}}\\)\".</p> <p>Question</p> <p>The analytical model is less accurate than atmosphere RT, and is more accurate for \\(\\rho_{scene}\\) than for \\(L_{scene}\\). Why ? </p> <p><p>Specification of TOA irradiance using the spectral irradiance table ThKur.</p></p> <ul> <li> <p>Forward parameters: DART-FT iterates N times (here, N=5). IterX is the extrapolated data from last 4 iterations.</p> </li> <li> <p>BI-directional parameters:  Max scattering order,  Pixel size,  Number of samplings/pixel,...</p> </li> </ul> <p><p>Parameters specific to the Bi-directional mode  (a) and Forward mode (b).</p></p> <ul> <li>Spectral intervals (see below): {central wavelength \\(\\lambda_m\\), bandwidth \\(\\Delta \\lambda\\); \\(\\mu m\\)}. A mouse right click on 'Spectral intervals' adds single bands or a range of bands. The index () indicates the number of user defined intervals.</li> </ul> <p><p>Setting the spectral band [0.70 0.71] and its mode R.</p></p> <ul> <li>DART products (see below)</li> </ul> <p><p>BRF/BTF menu: products. a)  Forward mode (left) and  Bi-Directional mode (right). Here, \\(\\theta _{max} = 25\u00b0 \\implies\\) only images with \\(\\theta _v &lt;25\u00b0\\) are stored to save computer memory.</p></p> <ul> <li>Optical property (see below): create reflectance \\(\\rho=0.5\\), called \"Lamb_ro=0.50\", by multiplying reflectance \\(\\rho=1\\) of model \"reflect_equal_1_trans_equal_0_0\" in database <code>lambertian_mineral.db</code> by 0.5 for all bands.</li> </ul> <p><p>Setting the optical property \"Lamb_ro=0.50\": \\(\\rho=0.50\\). a) For 1 band only. b) For all bands.</p></p> <p>The Earth scene (see below): infinitely repetitive horizontal 50m x 50m ground scene, with 1m x 1m discrete cells. The ground optical property is \"Lamb_ro=0.50. For DART-Lux, spatial resolution is in Bi-directional parameters.</p> <p>DART input data are stored in xml files (i.e., text files) in the simulation 'input' folder. Once they are all entered, save the simulation (option <code>File / Save simulation</code>). Then, the symbol \"*\" on top of the editor menu panel disappears.</p> <p><p>Scene geometry.:  The scene is repetitive. It could be isolated or with an infinite continuous topography (slope). In DART-Lux, the number of scene repetitions is set in \"Bi-directional\" parameters. : \\(\\Delta x=\\Delta y, \\Delta z\\); For DART-FT: the cell size of the scene mock-up is the pixel size of the simulated images. For DART-Lux: cells are only used to simulate the 3D turbid elements elements and 3D RB.  Scene dimensions .   Ground optical properties.</p></p> <p>Run DART: menu <code>Run / DART</code> runs sequentially 4 modules (directions, phase, maket, dart) and modules set in the \"Properties\" menu. Modules can be run 1 per 1. The GUI \"Console\" shows log data.</p> <p>Display DART discrete directions: menu <code>View / Directions 3D View</code></p> <p>This 3D view shows the user-defined \\(U\\) upward and \\(D\\) downward discrete directions that sub-divide the \\(4\\pi\\) space, and \\(V\\) user-added viewing directions. DART-FT tracks radiation in the \\(U+D\\) discrete directions, whereas DART-Lux tracks it in Monte Carlo derived directions. Images \\(X_{xy}(\\Omega_V)\\), with \\(X =\\) radiance \\(L\\), reflectance \\(\\rho\\) or brightness temperature \\(T_B\\), are stored for all \\(V + U\\) * directions, with \\(U\\) * a user-defined subset of the \\(U\\) directions. DART-FT simulates them for all U + V directions, and DART-Lux for \\(V + U\\) * directions. Text files (<code>brf</code>, <code>radiance</code>, <code>tapp</code>) store {\\(\\theta _V, \\phi _V\\), mean value \\(\\bar{X}_{xy}(\\Omega_V)\\) per simulated image \\(X_{xy}(\\Omega_V,\\Delta\\Omega_V)\\). For the (\\(U - U\\) * ) directions where DART-Lux does not simulate images, they store \\(\\bar{X}_{xy}(\\Omega_V)\\) as an interpolation of data of the BRF map over \\(\\Delta\\Omega_V\\).  Image <code>BRF map</code>: \\(X_{xy}(\\theta_V \\in [0;89], \\phi_V \\in [359]; \\Delta\\theta_V=\\Delta\\phi_V=1\u00b0\\)). Only DART-Lux (bi-directional mode) creates it, if one sets the option  in the Editor or option  in the LUT.</p> <p><p>a) 3D view of directions. b) Simulated and stored images, and stored brf file. \\(X = \\rho, L\\) or \\(T_B\\).</p></p> <p>2D display of the scene (only DART-FT : menu <code>View/ Scene 2D</code>) It shows xy, xz and yz cross sections of the scene (see below). 3D data (e.g., scene temperature) can be overlaid.</p> <p>3D view of the scene (menu <code>View/ Scene 3D</code>) It shows a 3D view of the scene, including the Ox, Oy and Oz axes and sun rays (Figure below).</p> <p><p>The simulated scene. a) 2D view: xy, xz, yz planes. Here: \\(1^{st}\\) xy plane. b) 3D view: axes, sun direction and the scene.</p></p> <p><code>Display dart.txt</code> and <code>simulation.properties.txt</code> (output folder): menu <code>View/Report-Data files</code></p> <ul> <li>dart.txt: sIt stores input data ( band irradiance \\(E_{TOA,\\lambda}\\) , \\(E_{BOA,\\lambda}\\), \\(SKYL_{\\lambda}\\),\u2026)and a few results: <ul> <li>DART-Lux: exitance \\(M_\\lambda\\) and albedo \\(A_\\lambda\\) or brightness temperature \\(T_{B,_\\lambda}\\), possibly per time step i.</li> <li>DART-FT. 3 data per iteration i \\(\\in [1\\ 1]\\) and extrapolation \\(X\\) from \\(I-3\\) to \\(I\\). <ul> <li>1) Albedo \\(A_{\\lambda,i}\\) / \\(A_{\\lambda,X}\\) if band mode = R or Brightness temperature \\(T_{B,\\lambda,i}\\) / \\(T_{B,\\lambda,X}\\) if band mode = T or R+T; </li> <li>2) \\(A_{\\lambda,X(i)}\\)/\\(T_{B,\\lambda,X(i)}\\) extrapolated from \\(i-4\\) to \\(i-1\\) </li> <li>3) Exitance \\(M_{BOA,\\lambda,i}\\) / \\(M_{BOA,\\lambda,X}\\). Convergence if  \\(\\frac{A_{\\lambda,X(i)}}{T_{B,\\lambda,X(i)}} \\approx \\frac{A_{\\lambda,X}}{T_{B,\\lambda,X}}\\).</li> </ul> </li> </ul> </li> </ul> <p>Question</p> <p>Verify that \\(M_\\lambda =A_\\lambda\\) x \\(E_{BOA,\\lambda}\\)</p> <ul> <li>simulation.properties.txt (see below): input data of DART modules.</li> </ul> <p><p><code>SimulationProperties</code> file: input parameters of DART modules. Although designed for \"computer usage\", this file is useful to check DART input parameters. Here, the \\(1^{st}\\) (index o) lambertian property stores reflectance \\(R_0 = 0.5\\), Diffuse transmittance TauDiffus=0, direct transmittance TauDirect = 0.</p></p> <p>Display DART images: menu <code>View / Image</code> (see below) A reflectance / radiance directional image <code>imaN_VZ=xx_VA=y.mp#</code> is a scene parallel projection onto a plane perpendicular to the viewing direction number N with zenith xx and azimuth yy angles. Hence, for an oblique direction it has a diamond shape (see below). Its ortho image (i.e., scene rectangular reference) is in the folder 'IMAGE PROJETEE'. Ortho images 'Exitance', 'Irradiance' and 'Albedo' are angular integrals of ortho images over \\(2\\pi^{+}\\).</p> <p>Note</p> <p>Option 'Save as': to copy a current simulation as a new simulation with the same input folder. Here, WP1A-FT can be created from WP1A-Lux, then replacing light mode 'Bi-directional' by 'Forward'.</p> <p>Question</p> <p>Tool'Stats' of 'Mask Editor' (Figure 165.a): check that scene reflectance \\(\\rho(x,y)\\) fluctuates around 0.5 in all DART-Lux images and is exactly 0.5 in all DART-FT images (Figure below .b). Why?</p> <p>Question</p> <p>\"Simulation / Simulation explorer\": short-cut to the files of the simulation. Example: check that the \"output\" folder of the simulation stores DART products per spectral band q, in folders BANDq in folders 'BRF' and 'Radiance', and per iteration i in folders ITERi, each one with a folder 'IMAGES_DART' that stores DART images.</p> <p>Question</p> <p>The BRF map {\\(\\rho_{scene}(\\theta,\\phi), \\theta \\in [0 89], \\phi \\in [0 359], \\Delta\\theta=\\Delta\\phi=1\u00b0\\)} (90 lines x 360 columns) of DART-Lux has \\(\\bar{\\rho}_{scene}= 0.5001\\) and \\(\\sigma_{\\rho_{scene}} = 5 10^{-2}\\). In theory, \\(\\bar{\\rho}_{scene}= 0\\) and \\(\\sigma_{\\rho_{scene}}= 0\\). How to decrease \\(\\sigma_{\\rho_{scene}}\\)? </p> <p>Question</p> <p>Check: \\(M_{xy,\\lambda}^{DART-FT}=A_{xy,\\lambda}^{DART-FT}. E_{BOA,\\lambda}  =\\pi . L_{xy,\\lambda}^{DART-FT}\\). Conversely to DART-FT, DART-Lux does not simulate \\(M_{xy,\\lambda}\\)  images.</p> <p><p>DART images  and menus 'View' / 'Image' to display images and image statistics. a) DART-Lux: nadir image (correct mean value (i.e., 0.5); Monte Carlo noisy aspect) and BRF map. b) DART-FT: nadir and oblique (\\(\\theta_v=22.4\u00b0, \\phi_v=30\u00b0\\)) images. Pixels outside the simulated scene have a NaN value (yellow color).</p></p> <p>Plot 1D and 2D scene reflectance: </p> <p> View/Directonal R.../1D \\(\\rho_{scene}(\\theta_V , \\phi_V = cst)\\). Plot of file BRF \\((\\theta_V,\\phi_V,\\rho_{scene}(\\theta_V , \\phi_V))\\) with or without interpolation. </p> <p> View/Directonal R.../2D \\(\\rho_{scene}(\\theta_V , \\phi_V = cst)\\). Plot of file BRF \\((\\theta_V,\\phi_V,\\rho_{scene}(\\theta_V , \\phi_V))\\) with interpolation. </p> <p> View BRF map: \\(\\rho_{scene}(\\theta_V , \\phi_V)\\). Plot from \\(\\rho_{scene}(\\theta_V , \\phi_V )\\) in the BRF map with \\(\\theta_V \\in [0;89]\\) and \\(\\phi_V \\in [0;359]\\).</p> <p> Extract &amp; View from LUT: \\(\\rho_{scene}(\\theta_V , \\phi_V)\\). Plot from \\(\\rho_{scene}(\\theta_V , \\phi_V )\\) in the BRF</p> <p>Question</p> <p>\\(\\rho_{scene}^{DART-FT}(\\Omega_V) = 0.5 \\forall Omega_V\\) and pixel \\((x,y)\\), while \\(\\rho_{scene}^{DART-Lux}(\\Omega_V)\\) has slignt fluctuation that decrase with \\(N_{sample,BRF}\\). Why?</p> <p><p>a) Folder IMAGES_DART of DART images. b) File brf: mean image reflectance {\\(\\theta_v, \\phi_v, \\rho(\\theta_v, \\phi_v)\\)}.</p></p> <p><p>DART-Lux and DART-FT plots of 1D \\(\\rho_{scene}(\\theta,\\phi=cst)\\) &amp; 2D \\(\\rho_{scene}(\\theta,\\phi)\\) with discrete (x) and sun (\u2022) directions. DART-FT and DART-Lux</p></p>"},{"location":"Tutorials/T1/t1.html#2-scene-spectral-broadband-terms-8-bands-04-08mu-m-delta-lambda005mu-m","title":"2) Scene spectral &amp; broadband terms (8 bands: \\([0.4 \\:0.8\\mu m]\\), \\(\\Delta \\lambda=0.05\\mu m\\))","text":"<p>Objective: to create a sequence of 8 mono-band simulations {\\(\\lambda_n\\), \\(\\Delta \\lambda_n=0.05\\mu m\\), \\(n \\in [1 \\:8]\\)} and LUT stores results (\\(E_{BOA,\\lambda}\\) , \\(M_{BOA,\\Delta \\lambda,\u2026}\\))</p> <p>The broadband module transforms results into broadband data (\\(E_{BOA,\\Delta \\lambda}\\) , \\(M_{BOA,\\Delta \\lambda}\\) \u2026 with \\(\\Delta \\lambda=\\sum_n \\Delta \\lambda_n\\)).</p> <p>Note</p> <p>Create WP1B- * from WP1A- * , with * = Lux or FT, with the option <code>Save as</code>. </p> <p>Editor (to reduce CT): 2m x 2m scene, only nadir image (<code>Maximalzenith angle of image</code>: 1), no ortho-image(<code>OrthoImage</code>: No)</p> <p>Run menu: create / edit and run the sequence (Sequence Launcher) WP1B-FT (CT=3s), WP1B-Lux (18s).</p> <p>Warning</p> <p>The root simulation must be \"mono-band\" (i.e., 1 spectral band) in spectral sequences (i.e., \\(\\lambda\\) is a varying variable).</p> <ul> <li>Create a sequence (file <code>*.xml</code>; here: <code>spectral_seq.xml</code>)</li> </ul> <p> Process &amp; threads to run: to reduce computer time, run N simulations in parallel and only needed processes. Total number of threads is M.N if each simulation uses M threads.</p> <p> Delete (not used here): reduce hard disk memory (automatic deletion or zip of products)</p> <p> LUT: SQL database that can store most DART non imaging products (\\(\\rho_{scene}, L_{scene}\\),...).</p> <p> Add the variable parameters. Here: {\"Central wavelength \\(\\lambda_{mean}\\)\" and \"Spectral bandwidth \\(\\Delta \\lambda\\)\" equal to \\(0.5\\mu m\\)} with \"Linear\" variation mode to define 8 adjacent bands in \\([0.4\\mu m\\: 0.8\\mu m]\\).</p> <ul> <li> <p>Edit a sequence: to edit an already created sequence. </p> </li> <li> <p>Prepare / Run Sequence: it creates the <code>*_Launcher.xml</code> file (here: <code>spectral_seq_Launcher.xml</code>) that stores the definition of all simulations (e.g., spectral_seq_0, spectral_seq_1,\u2026), then creates the folder 'sequence' in the root simulation with all simulations and input folders, then runs the <code>*launcher.xml</code> file.</p> </li> <li>Start/Continue Sequence. : used to continue a sequence previously stopped with the command <code>Stop sequence</code>.</li> </ul> <p>Question</p> <p>Verify with the plotsof the LUT: \\(M_{scene,\\lambda}\\) = \\(\\rho_{scene,\\lambda}.E_{scene,\\lambda}, M_{scene,\\lambda} = \\pi.L_{scene,\\lambda}\\).</p> <p>Multi-band simulation (8 bands [0.4 0.45],...,[0.75 0.8]): WP1B-Lux_multi</p> <ul> <li>Editor menu (option \"Add range of\"): set the 8 bands \\(\\iff\\) </li> <li>Set the LUT creation in the \"Run\" menu.</li> </ul> <p>Question</p> <p>The multi-band has the same results as the sequence of mono-band simulations and is much faster. Why?</p> <p><p>Sequence of 8 mono-band simulations: \\([0.4 \\:0.45\\mu m]\\), \\([0.45 \\:0.5\\mu m]\\),...</p></p> <p>a) General menu. b) Preferences and display options for the run of the sequence:  Processes to run with N simulations in parallel (larger N \\(\\implies\\) larger RAM).  To delete products.  Data to store in the LUT.  Values (here : \\(\\overline{\\lambda}\\), \\(\\Delta \\lambda\\)) and variation mode (here : linear) of the variable parameters (they vary together in a same group, and independently if not).</p> <p><p>Data from the LUT: a) Plots: \\(E_{TOA,\\lambda}, E_{BOA_\\lambda}, E_{BOA_\\lambda}^{direct}, E_{BOA_\\lambda}^{diffuse}, M_{BOA,\\lambda}, L_{BOA,\\lambda}\\) Top of atmosphere (TOA) spectral irradiance: \\(E_{TOA,\\lambda}\\) = spectral solar cst x cos(sun zenith angle). Bottom of atmosphere (BOA) spectral irradiance: \\(E_{BOA,\\lambda} = [t_{sun,dir}(\\Omega_s) + t_{sun,dif}].E_{TOA,\\lambda}\\), with direct (along \\(\\Omega_s\\)) \\(t_{sun,dir}\\) and diffuse \\(t_{sun,dif}\\) transmittance atmosphere that is simulated here as {gas: US Standard; aerosol: Rural 23km}. b) Values: reflectance, irradiance,\u2026 per spectral band.</p></p> <p>Apply <code>Tools / Band calculation tools / Broadband / Spectral sequence of monoband simulations</code> to the sequence. The Broadband folder stores broadband \\(\\rho_{BOA,\\Delta \\lambda}, E_{TOA,\\Delta \\lambda}\\),... with \\(\\Delta \\lambda = 0.4\\mu m\\). </p> <p><p>Broadband (Tools / Band calculation tools).Broadband data \\(E_{BOA,\\Delta\\lambda}, M_{BOA,\\Delta\\lambda} and A_{\\Delta\\lambda}\\). They can be computed (not here) using a sensor spectral sensitivity and sub-zones (i.e., masks) possibly created in <code>DART View image</code> menu. The Broadband folder also stores \\(\\rho_{\\Delta\\lambda}\\) and \\(L_{\\Delta\\lambda}\\). </p></p> <p><p>Names and locations of files that store BroadBand and Scene spectra data in simulation WP1B.</p></p> <p>Note</p> <p>Other method for Broadband (see below): run broadband.py with <code>Tools / Python Script Launcher</code>.</p> <p><p>Tools / Python Script Launcher. It runs DART python modules. To run the Broadband.py module, get its command in the Broadband console , copy its script parameters in the bottom window  and set paths between apostrophes (').</p></p>"},{"location":"Tutorials/T1/t1.html#3-vegetation-spectra","title":"3) Vegetation spectra","text":"<p>(12 bands: \\([0.4\\mu m \\:1\\mu m]\\), \\(\\Delta \\lambda=0.05\\mu m\\)): WP1C</p> <p>Objective: sequence and multi-band simulations as in WP1B with \\(\\rho_{ground}=\\rho_{vegetation}\\) instead of 0.5.</p> <ul> <li>Editor: Set \\(\\rho_{ground}(\\lambda) = \\rho_{grass\\: rye}(\\lambda)\\) from database <code>Lambertian_vegetation.db</code>; unset its multiplicative factor since it is equal to 1 (\\(\\implies\\) simpler visual aspect of the menu), and use  to plot \\(\\rho_{ground}(\\lambda)\\) (see below).</li> </ul> <p><p>Menu \"Optical &amp; Temperatures properties\": spectral reflectance \"grass_rye\" of database \"Lambertian_vegetation\".</p></p> <p>Sequence of 12 mono-band simulations: WP1C-FT (CT=5\"), WP1C-Lux (CT=28\")</p> <p>Plot the LUT spectral data (tool <code>View / LUT</code> to view): \\(\\rho_{scene}(\\lambda)\\), \\(M_{scene}(\\lambda)\\), \\(L_{scene}(\\lambda)\\),\u2026 (see below).</p> <p>Question</p> <p>Exitance \\(M_{scene}(\\lambda)\\) and radiance \\(L_{scene}(\\lambda)\\) spectra are proportional. Why? What is the factor?</p> <p>Question</p> <p>\\(\\frac {\\partial E_{BOA}(\\lambda)} {\\partial \\lambda}\\) and \\(\\frac {\\partial M_{BOA}(\\lambda)} {\\partial \\lambda}\\) vary differently; example: at \\(\\lambda \\approx 0.7\\mu m\\), \\(\\frac {\\partial M_{BOA}(\\lambda)} {\\partial \\lambda} &gt; 0\\) and \\(\\frac {\\partial E_{BOA}(\\lambda)} {\\partial \\lambda} &lt; 0\\). Why ?</p> <p><p>Tool <code>View / LUT</code>: scene reflectance (a), and irradiance / exitance / radiance (b).</p></p> <p>Multi-band simulation (12 bands): WP1C-FT_multi (CT=1\"), WP1C-Lux_multi (CT=2\")</p> <p>Question</p> <p>The multi-band simulation gives the same results as the sequence, but is much faster. Why? </p>"},{"location":"Tutorials/T1/t1.html#4-atmosphere-analytic-model-vs-atmosphere-rt","title":"4) Atmosphere analytic model vs. Atmosphere RT","text":"<p>(270 bands: \\([0.3\\mu m \\:3\\mu m]\\), \\(\\Delta \\lambda=0.01\\mu m\\)): WP1D-FT (CT=1\")</p> <p>Objective: to compare \\(E_{BOA}\\) simulated with the \"Analytical model\" and \"Atmosphere radiative transfer (RT)\" modes.</p> <p>Default atmosphere: gas model: US Standard, aerosol model: Rural (VIS=23km). The Analytic model (Figure 158.a) (DART-FT: CT=1\"; DART-Lux: CT=7\") is less accurate and faster than the atmosphere RT (Figure 158.b) (DART-FT-RT: CT=5'30\"; DART-Lux-RT: CT=5'40\"). The file atmosphereMaket.nc stores atmosphere properties: transmittance per absorbing gas, for all scattering gases and aerosols, etc. </p> <p><p>Irradiance / exitance LUT spectra (\\([0.3 - 3\\mu m]\\), \\(\\Delta \\lambda=0.01\\mu m\\)) from the LUT. The irradiance spectra of the analytic model (a) is close to that of the \"exact\" atmosphere RT (b).</p></p> <p>Sun irradiance calculator: www.pvlighthouse.com.au/calculators/solar%20spectrum%20calculator/solar%20spectrum%20cal culator.aspx.</p>"},{"location":"Tutorials/T1/t1.html#5-scene-uvvis-ir-radiative-budget-wp1e","title":"5) Scene UV/VIS/ IR radiative budget: WP1E","text":"<p>Objective: to assess with sequence and multi-band simulations the accuracy of surface (\\(\\rho_{ground}=\\rho_{grass\\: rye}\\)) radiative budget \\(RB_{BOA}= E_{BOA}- M_{BOA}\\) over \\(\\Delta \\lambda_{sun} =[0.3\\: 2.5\\mu m]\\), for different numbers \\(N_{band}\\) of bands to sample \\(\\Delta \\lambda_{sun}\\) , with \\(N_{band} = 1\\), 3 (UV \\([0.3\\: 0.4\\mu m]\\), VIS \\([0.4\\: 0.7\\mu m]\\), SWIR \\([0.7\\: 2.5\\mu m]\\)), 30 (10 bands for UV, VIS, SWIR). </p> <p>\\(RB_{BOA,\\Delta \\lambda}\\): the LUT and <code>dart.txt</code> file store it if \\(N_{band} = 1\\); the tool <code>Band calculation \\ BroadBand</code> computes it if \\(N_{band} &gt; 1\\), possibly with wieghts \\(g(\\lambda)\\) on ground reflectance and atmosphere terms \\(X(\\lambda)\\) (\\(\\implies X_{\\Delta \\lambda} = \\frac {\\int_{\\Delta \\lambda} X(\\lambda).g(\\lambda).d\\lambda} {g_{\\Delta \\lambda}=\\int_{\\Delta \\lambda} g(\\lambda).d\\lambda}\\); see below):</p> <p>Weighting of reflectance: for a lambertian surface, the DART product \\(M_{BOA,\\Delta \\lambda}^{DART}=\\rho_{ground,\\Delta \\lambda}.E_{BOA,\\Delta \\lambda}\\) is equal to the actual value \\(M_{BOA,\\Delta \\lambda} = \\int_{\\Delta \\lambda} \\rho_{ground}(\\lambda).E_{BOA}(\\lambda).d\\lambda\\) if \\(\\rho_{ground,\\Delta \\lambda}\\) is computed with the spectral weight \\(g(\\lambda) = E_{sun,BOA}(\\lambda)\\): </p> <p>\\(\\rho_{ground,\\Delta \\lambda} = \\frac {1} {\\Delta \\lambda}.\\frac {\\int_{\\Delta \\lambda} \\rho_{ground}(\\lambda).E_{sun,BOA}(\\lambda).d\\lambda} {\\int_{\\Delta \\lambda} E_{sun,BOA}(\\lambda).d\\lambda} \\neq \\frac {\\int_{\\Delta \\lambda} \\rho_{ground}(\\lambda).d\\lambda} {\\Delta \\lambda}\\) with \\(E_{sun, BOA}(\\lambda)\\) from the DART atmosphere analytic model.</p> <p>Weighting of atmosphere terms \\(X_{\\Delta \\lambda}\\) (in <code>atmosphere.txt</code> file) with the weight \\(E_{sun, TOA}(\\lambda): X_{\\Delta \\lambda} = \\frac {\\int_{\\Delta \\lambda} X(\\lambda).E_{sun,BOA}(\\lambda).d\\lambda} {\\int_{\\Delta \\lambda} E_{sun,BOA}(\\lambda).d\\lambda}\\) with X={\\(T_{g,abs},T_{g,scat},\\omega_{aer}\\)}; \\(\\Delta \\tau_{aer}^{*}=\\frac {\\int_{\\Delta \\lambda} \\Delta \\tau_{aer}(\\lambda).E_{sun,BOA}(\\lambda).d\\lambda} {\\int_{\\Delta \\lambda} E_{sun,BOA}(\\lambda).d\\lambda}\\). DART gives \\(\\Delta \\tau_{aer}^{*}\\) but \\(\\Delta \\tau_{aer}^{**}=-ln(\\frac {\\int_{\\Delta \\lambda} e^{\\Delta \\tau_{aer}(\\lambda)}.E_{sun,BOA}(\\lambda).d\\lambda} {\\int_{\\Delta \\lambda} E_{sun,BOA}(\\lambda).d\\lambda})\\) is a bit better.</p> <p><p>Weighting of atmosphere terms  and reflectance .</p></p>"},{"location":"Tutorials/T1/t1.html#wp1ea-multiband-with-3-bands-uv-vis-swir","title":"WP1Ea: multiband with 3 bands (UV, VIS, SWIR)","text":"<p>The 3 spectral TOA irradiance \\(E_{BOA,\\Delta \\lambda_i}\\) , BOA exitance \\(M_{BOA,\\Delta \\lambda_i}\\) ,... from the LUT and <code>dart.txt</code> file (see below) show that \\(E_{TOA,\\Delta \\lambda}\\) is larger in the VIS band, \"Total back-scattered to BOA\" is null in the absence of atmosphere RT,\u2026</p> <ul> <li>\\(M_{BOA,\\Delta \\lambda_i}\\) can greatly change if \\(E_{BOA}(\\lambda)\\) weight is used or not for computing \\(\\rho_{ground,\\Delta \\lambda}\\) . For example, over \\([0.7\\: 2.5\\mu m]\\), \\(M_{BOA,\\lambda} =70.1 \\:W/m^2/\\mu m\\) without weight and 100.1 \\(W/m^2/\\mu m\\) with weight (table below). Why?</li> </ul> <p><p>\\(E_{\\Delta \\lambda}\\) and \\(M_{\\Delta \\lambda}\\) per band: <code>dart.txt</code> file (left) and LUT (right).</p></p>"},{"location":"Tutorials/T1/t1.html#wp1eb-1-sequence-of-3-mono-band-simulations-uv-visir","title":"WP1Eb: 1 sequence of 3 mono-band simulations (UV, VIS,IR)","text":"<p>Set the sequencer: 2 variable parameters (central wavelength, bandwidth) with the 'Enumerate' mode.</p> <p>Question</p> <p>Use the sequence's LUT or <code>dart.txt</code> per simulation to check that \\(E_{TOA,\\Delta \\lambda}\\), \\(E_{BOA,\\Delta \\lambda}\\) and \\(M_{BOA,\\Delta \\lambda}\\) are as for WP1Ea.</p> <p>WP1Ec: 3 sequences (UV, VIS, IR) of 10 mono-band simulations each (see below).</p> <p>Apply the tool \"BroadBand\" per sequence to get \\(E_{BOA,\\Delta \\lambda}\\) and \\(M_{BOA,\\Delta \\lambda}\\) for each broadband UV, VIS and SWIR.</p> <p>Question</p> <p>Verify that \\(E_{TOA,\\Delta \\lambda}\\)$, \\(E_{BOA,\\Delta \\lambda}\\) are identical as in WP1Ea.</p> <p>Question</p> <p>Unlike in WP1Ea, \\(M_{BOA,\\Delta \\lambda}\\) varies very little if \\(\\rho_{ground,\\Delta \\lambda}\\) is computed with or without \\(E_{sun,BOA}(\\lambda)\\) weight. Why?</p> <p><p>Sequencer menu. Definition of the 10 spectral bands (i.e., \\(\\lambda_i\\), \\(\\Delta \\lambda_i\\), \\(i \\in [0\\: 9]\\)) that sample the spectral band UV).</p></p> <p><p>TOA and BOA spectral irradiance and BOA exitance of the UV, VIS and SWIR LUTs. Analytic model.</p></p>"},{"location":"Tutorials/T1/t1.html#wp1ed-1-band-03mu-m-25mu-m","title":"WP1Ed: 1 band \\(([0.3\\mu m \\:2.5\\mu m])\\)","text":"<p>Question</p> <p>\\(M_{BOA,\\Delta \\lambda}\\) is exact if \\(\\rho_{ground,\\Delta \\lambda}\\) is computed with the \\(E_{sun,BOA}(\\lambda)\\) weight, and less accurate otherwise. Why?</p>"},{"location":"Tutorials/T1/t1.html#wp1ee-wp1ef-wp1eg-same-as-wp1ea-wp1ec-and-wp1ed-where-atmosphere-rt-replaces-analytic-model","title":"WP1Ee, WP1Ef, WP1Eg: same as WP1Ea, WP1Ec and WP1Ed where \"Atmosphere RT\" replaces \"Analytic model\"","text":"<p>Compared to the \"exact\" atmosphere radiative transfer, the analytic model gives \\(E_{BOA,\\Delta \\lambda}\\) and \\(M_{BOA,\\Delta \\lambda}\\) with a relative error less than 4%.The relative error can increase with larger sun zenith angle.</p> <p><p>TOA and BOA spectral irradiance / exitance \\((W/m^2/\\mu m\\), \\(W/m^2\\)) from BroadBand and <code>dart.txt</code> file:</p></p> <p>a) Analytic model. b) Atmosphere RT. \\(\\theta_s =30\u00b0\\). US standard gas model. RuralV23 aerosol model. Symbol 'nw' stands for 'no weight' for reflectance and atmosphere. Atmosphere backscattering increases BOA irradiance by \\(\\approx 1.2%\\) in UV and \\(\\approx 0.8%\\) in VIS and SWIR. Most irradiance and exitance data are from the LUT and <code>dart.txt</code> files.</p>"},{"location":"Tutorials/T10/t10.html","title":"WP10 - RAMI Experiment - run of DART using python scripts","text":"<p>Objective: to run DART simulations with Python scripts and to compare results with those of RAMI 3 experiment https://rami-benchmark.jrc.ec.europa.eu/_www/index.php.</p> <p>Comparison of radiative transfer models applied to RAMI-3 scenes: angular reflectance products (ground, vegetation 1st and multiple scattering), for 3 spectral bands (NR1, red: 650nm, NIR: 860nm), a few sun zenith angles (usually: 0\u00b0, 30\u00b0, 60\u00b0), 4 LAI (1, 2, 3, 5) and 3 LADs (erectophile: ERE, planophile: PLA, uniform: UNI). Scenes are turbid (i.e., \"ground + vegetation plot\") and discrete (i.e., tree = set of turbid cells or 3D distribution of disks: see below). We have {\\(\\rho_{g,nr1} = 1, \\rho_{l,nr1} = \\tau_{l,red} = 0.5\\)}, {\\(\\rho_{g,red} = 0.127, \\rho_{l,red} = 0.0546, \\tau_{l,red} = 0.0149\\)}, {\\(\\rho_{g,nir} = 0.159, \\rho_{l,nir} = 0.4957, \\tau_{l,nir} = 0.4409\\)}.</p> <p><p>RAMI 3D scenes: turbid (top) and discrete (bottom). DART provided scripts simulate / manage all RAMI scenes except the conifer forest and the real zoom-in scene.</p></p> <ol> <li>Copy Python scripts (CreateRamiSimulations, LaunchRamiSimulations, ExtractDataROMC, SavePlotsRomc) from folder <code>\\bin\\python_script\\ScriptsRami</code> to the level of provided DART simulation <code>RAMI\\core</code>, and modify their settings: <code>set DART_LOCAL=*</code>, <code>set DART_HOME=*</code>, <code>set RamiSimulationFolder=*</code> to specify correct paths. Names of all RAMI cases that DART scripts manage are in <code>ListRamiSimulations.py</code>.</li> <li>Run <code>CreateRamiSimulations.bat</code>: it creates 3.N simulations that are copies of the root simulation, with N resulting from the variable input parameters that you specify (see below). Each simulation among the N simulations corresponds to a specific combination of these variable input parameters.  </li> </ol> <p>Note</p> <p>for Linux, the file extension of the scripts is <code>*.sh</code> instead of <code>*.bat</code> for windows.</p> <ol> <li>Run <code>LaunchRamiSimulations.bat</code>: it launches the N simulations.</li> <li>Run <code>ExtractDataROMC.bat</code>: it extracts the reflectance products of the N simulations, stores them in the folder <code>RomcResults</code> with ROMC (RAMI) format. Python script <code>SavePlotsRomc.bat</code> can create graphs (pdf format).</li> <li>Zip files in folder <code>RomcResults</code>, upload the zip file on https://romc.jrc.ec.europa.eu/_www/index.php and follow steps given in <code>\\bin\\python_script\\ScriptsRAMI\\Doc\\RAMI_Submit_Results_ROMC.pdf</code>.</li> </ol> <p><p>Parameters. Valid combinations are in https://romc.jrc.ec.europa.eu/_www/index.php</p></p> <p><p>Example of automatic comparison of DART results with RAMI 3 \"mean reflectance\" values.</p></p>"},{"location":"Tutorials/T11/t11.html","title":"WP11 - Mapping global sun radiometric quantities (out of date)","text":"<p>Objectives: to map TOA / BOA / Sensor radiometric quantities for any date and world region, and to compute their time variation (hourly, daily,..) for any world coordinates. These quantities correspond to sensor measurements (i.e., radiance, reflectance, brightness temperature) or terms of the Earth-Atmosphere radiation budget (e.g., irradiance, exitance, albedo).</p>"},{"location":"Tutorials/T11/t11.html#1-africa-radiance-maps-measured-by-a-geostationary-satellite","title":"1) Africa radiance maps measured by a geostationary satellite","text":"<p>The mapping method has 2 steps:</p> <ul> <li> <p>Step 1. Create a root simulation (e.g., 1m x 1m bare ground scene, 1m resolution). Sensor view direction is defined by satellite location which allows its automatic up-date with new scene location.</p> </li> <li> <p>Step 2. Run the python script <code>worldGlobalMap.py</code> (see below) to run scripts that create / run sequences of simulations and store results in text files and png images. Run run.bat command with Windows operating system. Python scripts are in folder \"DART\\bin\\python_script\\RadiometricMaps\":</p> <ul> <li><code>DARTDao.py</code>: it reads DART input and output parameters in the simulation.properties.txt file.</li> <li><code>worldGlobalMapSequenceLauncher.py</code>: runs the sequence, sets parameters, radiance data,\u2026</li> <li><code>worldGlobalMapImageGenerator.py</code>: it creates PNG images with the world Python basemap.</li> <li><code>worldGlobalMapUtility.py</code>: utilities for all Python scripts</li> </ul> </li> </ul> <p><p>Python command line and Python libraries and extensions that are used.</p></p> <p>Parameters of <code>worldGlobalMap.py</code>:</p> <ul> <li>Name of the root simulation: baseSimulationName = 'simulation_name'</li> <li>Coordinates of the region to map: minimal / maximal latitude and longitude1.</li> <li>Number of steps in latitude and longitude. Computation time increases with the number of steps.</li> <li>List of dates (year, month, day): dateList = [RGMDate(year = 2012, month = 3, day = 21),\u2026]</li> <li>List of time (hour, minute, second) in UTC: timeList = [Time(hour=5,minute=44,second=37),\u2026]</li> <li>Flag (True or False) to create / run sequences of simulations, and flag to create images</li> <li>Number of simulations to run in parallel</li> <li>Results to map (BOA.irradiance,\u2026 ; see below). Their names are in the simulation.properties file.</li> </ul> <p><p>Some DART products that can be mapped. Their names are in the simulation.properties file)</p></p> <p><p>Part of script worldGlobalMap.py that sets the region coordinates (here, Africa), dates, products,...</p></p>"},{"location":"Tutorials/T11/t11.html#1a-creation-of-a-root-simulation-see-below","title":"1.a - Creation of a root simulation (see below).","text":"<p><p>Parameters to modify in the root simulation.</p></p> <p>The satellite view direction is added as a single (fictive) direction. It is derived from the user specified scene and satellite coordinates (altitude, longitude, latitude).</p> <p>Folder <code>simulation_name\\results\\coordinate_values\\date_value\\time_value</code> in the root simulation stores the products. Its name indicates the region coordinates, date and time. It stores (see below) all spectral bands bounds (bands.txt file), the coordinates all DART simulations (<code>latlon.txt</code> file) and 1 folder per product (text file + png image: interpolated map) per spectral band:</p> <ul> <li>3 satellite (default) products: TOA, BOA and atmosphere radiance for the satellite view direction.</li> <li>user selected radiometric products: BOA / TOA / Sensor irradiance, Coupl_exitance, radiance,\u2026</li> </ul> <p>Note</p> <ul> <li>NOAA module (www.esrl.noaa.gov/gmd/grad/solcalc/) computes sun direction for any date and location.</li> <li>Module (www.solar-noon.com/) gives UTC time of solar noon anywhere. At (Lat 0\u00b0, Lon 0\u00b0) it is \\(\\pm 15'\\).</li> </ul> <p><p>Folders that store the 6 user required results.</p></p> <p><p>The satellite viewing direction is added by setting its location (Latitude, Longitude, Altitude).</p></p>"},{"location":"Tutorials/T11/t11.html#1b-create-radiometric-maps-of-africa","title":"1.b - Create radiometric maps of Africa","text":"<ul> <li>i. Modify the script <code>worldGlobalMap.py</code> to set: region (Africa: [-35S 38N], [-18E 52E]), date (e.g., June 21, 2012), time (e.g., 12h UTC), products (e.g., TOA irradiance, BOA irradiance, atmosphere radiance) in addition to TOA / Sensor / BOA upward radiance (satellite view direction).  </li> </ul> <p>Question</p> <p>First, use 4 steps in latitude and longitude for testing the method with short computation times.</p> <ul> <li>ii. Run the command: python <code>worldGlobalMap.py</code>, and tyhen, display results.</li> </ul> <p></p> <p><p>BOA (top), atmosphere (middle) and TOA (bottom) radiance \\((W/m^2/\\mu m\\)), for a geostationary satellite. a) \\(0.45\\mu m\\). b) \\(0.65\\mu m\\). c) \\(0.9\\mu m\\).</p></p> <p>Application of the mapping method to Europe (35N-72N, -25E-50E) is shown on the image below.</p> <p><p>Atmosphere (top) and satellite TOA (bottom) radiance \\((W/m^2/\\mu m)\\). a) \\(0.45\\mu m\\). b) \\(0.65\\mu m\\). c) \\(0.9\\mu m\\).</p></p>"},{"location":"Tutorials/T11/t11.html#2-time-evolution-of-toa-radiance-for-some-african-cities","title":"2) Time evolution of TOA radiance for some African cities","text":"<p>DART can compute the time variation of reflectance and radiance associated to a satellite with a given position, for any Earth location. Here, this is illustrated with African cities: Algiers (36.42\u00b0N, 3.13\u00b0E. UTC+1), Cairo (30.2\u00b0N, 31.13\u00b0E. UTC+2), Dakar (14.4\u00b0N, 17.25\u00b0W. UTC), Pretoria (25.45\u00b0S, 28.11\u00b0E. UTC+2), Mogadiscio (2.02\u00b0N, 45.21\u00b0E. UTC+3) and Luanda (8.50\u00b0S, 13.14\u00b0E. UTC+1).</p> <ul> <li>Step 1: create the sequences of interest. The screenshot below shows the sequence associated to Algiers at 8hUTC.</li> </ul> <p><p>Sequence Algiers at 8h UTC.</p></p> <ul> <li>Step 2: run the sequences, using the script <code>dart-sequence.bat</code> in folder \"tool\" (as in the screenshot below).</li> </ul> <p><p>Command line (a) that launches the sequences Algiers8h and Algiers12h.</p></p> <ul> <li>Step 3: run the python script that extracts \\(L_{TOA}\\), \\(L_{sensor}\\), \\(L_{BOA}\\), atmosphere Latm and useful (\\(L_u = L_{TOA} - L_{atm}\\)) radiance values from all sequences (as shown below), and stores them in the \"results\" folder (1 folder per sequence).</li> </ul> <p><p>Python script that retrieves radiance values.</p></p> <p>The graph below shows \\(L_{TOA}, L_{atm}\\) and \\(L_u\\) at 16hUTC for the African cities, as measured by a geostionary satellite. The \"Sensor\" curve corresponds to the Earth site at satellite nadir.</p> <p><p>Python script that retrieves radiance values.</p></p> <p>The above method processes automatically several sequences. If few sequences are run, then retrieving results directly from the DART SQL database may be faster and simpler. The image below displays results that are stored in the DART SQL database: TOA (red), atmosphere (green), \\(1^{st}\\) order atmosphere (blue) and BOA radiance (cyan) and reflectance values for for Algiers city and a sequence of 365 days at 16hUTC. BOA reflectance is constant, because the Earth surface has a lambertian and constant reflectance.</p> <p>Question</p> <p>In the graph above, during summer in northern hemisphere, radiance is larger. It is coherent with smaller local sun zenith angle. Why \\(\\rho_{TOA}, \\rho_{atm}, \\rho_{atm,1}\\) are smaller?</p> <p><p>Daily radiance (a) and reflectance (b) for a geostationary satellite, at 16hUC. Algiers.</p></p>"},{"location":"Tutorials/T11/t11.html#3-update-of-atmosphere-database-with-aeronet-and-ecmwf-data","title":"3) Update of atmosphere database with AERONET and ECMWF data","text":"<p>Here, we use atmosphere files that are in the folder Atmosphere of the DART database: 3 files from AERONET and 12 temperature files from ECMWF database.</p> <p><p>Parameters to modify in the root simulation.</p></p> <p><p>Selected spectral bands. Bands 0 to 6 are Sentinel-2 bands.</p></p> <p>The image below illustrates an application of DART simulations. It shows hourly \\(L_u, L_{sensor\\:noise}\\) and \\(L_u\\) relative change due to sensor noise \\(\\eta_{SNR} =\\frac {\\delta L_u(SNR)} {L_u}\\) with \\(SNR_{ref} = 129\\) at \\(\\lambda_{ref}\\) (Sentinel 2 data), for a grass savannah. These values allow one to compute the domain of validity of \\(L_u\\), acquired by a geostationary satellite, for given sensor SNR (Signal to Noise Ratio) and relative accuracy of radiance measurements. Here, \\(L_u\\) is valid over [8h 17h30] (vertical red lines), if the expected radiance accuracy is 3%.</p> <p><p>Hourly \\(L_u, L_{sensor\\: noise}\\) and \\(\\eta_{SNR}\\) and the domain of validity of \\(L_u\\) acquired by a geostationary satellite. February 7, 2005. Grass savanah (7\u00b041'N, 5\u00b001'W, altitude: 376 m))</p></p> <p>Note</p> <p>Work funded by CNES for studying the potential of a high spatial resolution geostationary satellite.</p> <ol> <li> <p>France: [42N 52N], [-5E 9E]. USA: [24N 49N], [-125E -65E]. Africa: [-35S 38N], [-18E 52E]. Europe: [35N 72N], [-25E 50E]\u00a0\u21a9</p> </li> </ol>"},{"location":"Tutorials/T12/t12.html","title":"WP12 - Satellite image inversion (under development)","text":""},{"location":"Tutorials/T12/t12.html#1-inversion-of-vegetation-rs-image","title":"1) Inversion of vegetation RS image","text":"<p>LAI and \\(\\rho_{ground}\\): WP12A</p> <p>Here, the inversion is made in 3 steps:</p> <ul> <li> <p>1) To create the image to invert. The scene {20m x20m, \\(\\Delta x=\\Delta y=1m, \\Delta z=0.25m\\) } is made of 4 plots with plot height = 1m and plot LAI = 0, 1, 3 and 5. Leaf spectral properties are defined by \"Leaf_deciduous\" database. Ground reflectance is \\(\\rho_{ground} = 0.22\\) in all bands. We have 3 spectral bands: \\(0.55\\mu m\\), \\(0.65\\mu m\\) and \\(0.9\\mu m\\) Sun direction is vertical. DART images are created without any oversampling.</p> </li> <li> <p>2) To create a LUT with a sequence ({LAI, \\(\\rho_{ground}\\) values encompass the {LAI, \\(\\rho_{ground}\\) of the image to invert) Root simulation: {1mx1m. \\(\\Delta x=\\Delta y=1m. \\Delta z=0.25m\\). 3 bands: \\(0.55\\mu m, 0.65\\mu m, 0.9\\mu m.\\) 1 vegetation plot}. 330 simulations: 11 values of \\(\\rho_{ground}\\) from 0 to 1 (\\(\\Delta=0.1\\)) and 30 values of \\(LAI_{plot}\\) from 0 to 6 (\\(\\Delta=0.2\\)).  Once the LUT of scene reflectances \u03c1scene is created during the sequence, create the LUT of coefficients that is used by the inversion procedure. (cf. Module_User_manual), LUT_Coefficient).</p> </li> </ul> <p>Note</p> <p>In order to reduce computer time and memory, do not store images and all iteration orders.  </p> <ul> <li>3) Inversion of the image created in step 1, with the LUT_Coefficient created in step 2. For that, the 3 images of step 1 are renamed \"Green\", \"Red\" and \"NIR\" and are copied in the input directory of the current simulation.</li> </ul> <p><p>a) Scene that is used for creating the image to invert. DART images at \\(0.55\\mu m\\) (a), \\(0.65\\mu m\\) (c) and \\(0.9\\mu m\\) (d).</p></p>"},{"location":"Tutorials/T12/t12.html#2-inversion-of-urban-rs-image-urban-material-optical-properties-wp12b","title":"2) Inversion of urban RS image: urban material optical properties: WP12B","text":""},{"location":"Tutorials/T2/t2.html","title":"WP2 - Temperature","text":"<p>Objective (theory):</p> <ul> <li>Stephan-Boltzmann law: \\(M=\\sigma.T^4\\), with \\(\\sigma=5.6704\\times10^{-8}\\: W/m^2/K^4\\) (cf. Chapter VI)</li> <li>Planck law: \\(L_{B,\\lambda}(T)=\\frac {2.h.c^2} {\\lambda^5.(e^{\\frac {h.c} {\\lambda .k.T}} - 1)}\\) \\(W/m^2/sr/m\\) (\\(h=6.63\\times 10^{-34}\\:J.s\\), \\(k=1.3807\\times 10^{-23}\\: J/K\\))</li> <li>Brightness temperature \\(T_B\\): ground, Bottom (BOA) / Top (TOA) of the Atmosphere,...</li> <li>Scene emissivity: \\(\\epsilon(\\Omega)=1 - \\rho(2\\pi \\rightarrow \\Omega)\\): isotropic (\\(\\epsilon(\\Omega) = \\epsilon\\)) for lambertian scene \\((\\rho(\\Omega)=\\rho)\\)</li> <li>Scene not a blackbody if:<ul> <li>scene {\\(\\epsilon_{scene} \\neq 1,T_{scene}\\)}: \\(\\nexists T | L_{B}(\\lambda, T)=\\epsilon_{scene}.L_B(\\lambda,T_{scene}) \\:\\: \\forall \\lambda \\implies T_{B,scene}(\\lambda_1) \\neq T_{B,scene}(\\lambda_2) \\: if \\: \\lambda_1 \\neq \\lambda_2\\)</li> <li>scene made of 2 blackbodies: \\(\\nexists T | L_{B}(\\lambda, T)=L_{B}(\\lambda, T_1) + L_{B}(\\lambda, T_2) \\:\\: \\forall \\lambda \\implies T_{B}(\\lambda_1) \\neq T_{B}(\\lambda_2) \\: if \\: \\lambda_1 \\neq \\lambda_2\\)</li> </ul> </li> </ul> <p>Objective (DART): to manage DART sequences and LUT, and to learn DART modes T (atmosphere / earth thermal emission) and R+T (sun illumination + atmosphere / earth thermal emission).</p> <p><p>Sun and blackbody (5800K and 5900K) emission.</p></p> <p>The wavelength \\(\\lambda_{max}\\) at which maximal emission occurs decreases with temperature T (Wien law).</p> <p>\\(\\lambda_{max} \\approx 0.5\\mu m\\) if T=5800K and \\(\\lambda_{max} \\approx 9.7\\mu m\\) if T=300K</p> <p><p>WP2A parameters with those specific to the Forward (DART-FT) and Bi-directional (DART-Lux) modes.</p></p> <p><p>DART simulated scene with \"ground plot.</p></p> <p>The scene is a ground plot surrounded by ground. In DART scenes, the Ox axis is along vertical downward. Enter the corners in the anti clockwise direction. \\(Area_{plot} = 36m^2, Area_{ground} = 64m^2\\).</p>"},{"location":"Tutorials/T2/t2.html#1-brightness-temperature-of-a-homogeneous-landscape-wp2a","title":"1) Brightness temperature of a homogeneous landscape: WP2A","text":"<p>Objective: to study the impact of scene elements reflectance on scene brightness temperature..</p>"},{"location":"Tutorials/T2/t2.html#1a-wp2a-ft-ct1-and-wp2a-lux-ct9","title":"1.a - WP2A-FT (CT=1\") and WP2A-Lux (CT=9\")","text":"<p>Note</p> <p>Create the mono-band simulation WP2A-FT, then save it as WP2A-Lux.</p> <p>Display images \\(T_{B}(x,y)\\): tool <code>View / Image</code> for nadir and oblique (\\(\\theta_V=22\u00b0,\\phi_V=30\u00b0\\))</p> <p>Display 1D plot \\(T_B(\\theta_v,\\phi_v =cst)\\): with  <code>View / Directional R... / 1D</code> + file <code>WP2A.../Output/BAND0/Tapp/ITERX/</code> \\(T_{app}\\) </p> <p>Question</p> <p>Why TB,scene is isotropic and equal to 300K?</p> <p>Repeat the above steps for the 2 following cases:</p> <ul> <li>\\(\\rho_{ground} = \\rho_{plot} = 1\\). Why \\(T_{B,scene} = 0K\\)?</li> <li>\\(\\rho_{ground} = \\rho_{plot} = 0.5\\). Thus: \\(\\epsilon=0.5\\) and \\(L_{scene}=\\frac {L_B} {2}\\). Why does \\(T_{B,scene}(262K)\\) differ from \\(\\frac {T_{B,scene}} {2} = 150K\\) ?</li> </ul> <p>Note</p> <p>WP2A_Lux gives most WP2A_FT products, plus the 360\u00b0 x 90\u00b0 BTF map \\(T_{B,scene}(\\theta,\\phi)\\), used to create the \\(T_{app}\\) file.</p> <p>Question</p> <p>DART-Lux, below: add the nadir viewing direction, unset all items of \"Products\" (\\(\\implies\\) no creation of BTF map), and create a LUT with products for the option \"Only for the added directions\". It will decrease CT. </p> <p><p>\\(T_B\\). a) DART-FT and DART-Lux nadir and oblique (\\(\\theta=22\u00b0, \\phi=30\u00b0\\)) images. b) 1D and 2D plots.</p></p>"},{"location":"Tutorials/T2/t2.html#2-impact-of-sun-reflected-radiation-on-ground-brightness-temperature-wp2ba-and-wp2bb-ct1","title":"2) Impact of sun reflected radiation on ground brightness temperature: WP2Ba and WP2Bb (CT=1\")","text":"<p>Objective: to study how sun reflected radiation affects the scene brightness temperature \\(T_{B,scene}\\), at different \\(\\lambda\\).</p> <p>Copy WP2A as WP2Ba: set 3 bands {\\(3\\mu m\\): mode T+R, \\(3\\mu m\\): mode T, \\(10\\mu m\\): mode T; \\(\\Delta \\lambda=0\\)} and \\(\\rho_{ground} = \\rho_{plot} = 0\\).</p> <p>Question</p> <p>Why TB,scene = 300K for 3\u00b5m (mode T+R), 3\u00b5m (mode T) and 10\u00b5m (mode T)?</p> <p>Copy WP2Ba as WP2Bb: \\(\\rho_{ground} = \\rho_{plot}^{top\\ face} = 0.5\\).</p> <p>Question</p> <p>Why \\(T_{B,scene}(3\\mu m, mode\\: T) =288K&lt;300K\\), and \\(T_{B,scene}(3\\mu m, mode \\:R+T)=376K \\gg 300K\\)?</p> <p>Question</p> <p>Why \\(T_{B,scene}(3\\mu m, mode\\: T) &gt; T_{B,scene}(10\\mu m, mode \\:T) = 262K\\) whereas \\(\\epsilon_{3\\mu m} = \\epsilon_{10\u00b5m}\\) ?</p> <p>Question</p> <p>Why \\(T_{B,scene}(\\theta,\\phi=cst)=cst \\forall \\theta, \\phi\\)? \\(T_{B,scene}\\) is displayed with the tool <code>View / Directional\u2026 / 1D</code> (see below)?</p> <p>Here, the tool displays the DART file \\(T_{app}\\).</p> <p><p>Scene brightness temperature \\(T_{B,scene}\\). \\(\\rho_{plot} = \\rho_{ground} =0.5, T_{plot} =300K, T_{ground} =300K\\). a) WP2Bb-FT: \\(T_B(\\theta,\\phi=cst)\\). Display tool: <code>View /Direct\u2026/ 1D</code> + file \\(T_{app}\\). b) WP2Bb-Lux: \\(T_{B,scene}(\\theta=0\u00b0)\\) in the LUT.</p></p> <p>Note</p> <p> to add curves (i.e., additional files Tapp)</p>"},{"location":"Tutorials/T2/t2.html#3-brightness-temperature-of-2-adjacent-blackbodies-at-different-temperatures-wp2c-ct1","title":"3) Brightness temperature of 2 adjacent blackbodies at different temperatures: WP2C (CT=1\")","text":"<p>Objective: to show that the juxtaposition of 2 blackbodies at different temperatures is not a blackbody.</p> <p>Copy WP2A as WP2C ({\\(3\\mu m, 6\\mu m, 10\\mu m, \\Delta \\lambda=0\\), mode T}; \\(T_{ground} =300K\\), \\(T_{plot} =500K\\), \\(\\rho_{ground}= \\rho_{plot} = 0\\)) and run it</p> <p>Scneradiance is \\(L_{scene}(\\lambda)=0.36 L_B(\\lambda,T_{B,plot}) + 0.64 L_{B,ground}\\).</p> <p>Question</p> <p>The scene is not a blackbody (Figure below). Indeed, its brightness temperature \\(T_{B,scene}\\), defined by \\(L_B(\\lambda,T_{B,scene}) = L_{scene}(\\lambda)\\), varies with \\(\\lambda\\). File <code>dart.txt</code> gives: \\(T_{B,scene,3\\mu m}=452K &gt; T_{B,scene,6\\mu m}=418K &gt; T_{B,scene,10\\mu m}=395K\\). </p> <p>Question</p> <p>\\(T_{B,scene}\\) differs from the spatial average of \\(T_{B,x,y}\\). Verify it with the nadir image \\(T_{B,scene}(\\lambda)\\)  (2nd figure below). The tool <code>Stats</code> of <code>View Image</code> menu gives \\(T_{B,x,y}= \\frac{Area_{plot}.T_{B,plot}(\\lambda)+Area_{ground}.T_{B,ground}(\\lambda)}{Area_{plot}+Area_{ground}} =372K\\), for the 3 bands.</p> <p>Proof: Scene = 2 blackbodies (\\(T_1,T_2\\)) of same area \\(\\implies L_{scene}=L_B(T_{B,scene})=\\frac {L_B(T_1)+L_B(T_2)}{2} &gt; L_B(\\frac{T_1+T_2}{2})\\implies T_{B,scene} &gt; \\frac{T_1+T_2}{2}\\)</p> <p><p>Brightness temperature \\(T_{B,scene(\\lambda)}\\) (<code>Scene_Brightness_Temperature.xlsx</code>).</p></p> <ol> <li> <p>\\(L_B(\\lambda, T=300K, 395K, 418K, 452K)\\), \\(L_{B,scene}(\\lambda)\\) and \\(T_{B,scene}(\\lambda)\\): 452K at \\(3\\mu m\\) (: \\(L_{B,scene}(3\\mu m)=L_B(452K)\\), 418K at \\(6\\mu m\\) (: \\(L_{B,scene}(6\\mu m)=L_B(418K))\\) and 395K at \\(10\\mu m\\) (: \\(L_{B,scene}(10\\mu m)=L_B(395K)\\)).</p> </li> <li> <p>\\(T_{B,ground}(\\theta_v)\\), \\(T_{B,plot}(\\theta_v)\\). Plot them at a few \\(\\phi_v\\) to check their isotropy (i.e., \\(T_{B,scene}(\\theta_v,\\phi_v=cst) \\forall (\\theta_v,\\phi_v))\\).</p> </li> </ol> <p><p>Computation of \\(\\overline{T}\\) with tool 'Stats'.</p></p>"},{"location":"Tutorials/T2/t2.html#4-simulation-of-spectral-and-broadband-quantities-wp2d","title":"4) Simulation of spectral and broadband quantities: WP2D","text":"<p>Objective: scene thermal infrared (TIR) spectra and broadband (\\(E,T_B\\),\u2026) over [\\(3\\mu m \\:15\\mu m\\)] in mode (R+T).</p> <p>Scene: 2 blackbodies {\\(\\rho_{ground} = \\rho_{plot} = 0, T_{ground} = 300K, T_{plot} = 400K\\)}.\\(T_{atm}=280K\\) (Figure below). Results are in the LUT.</p> <p>2 methods: multi-band simulation (12 bands) }and sequence of 12 mono-band simulations, followed by BroadBand.</p> <p><p>Atmosphere defined as an isotropic plane surface with \\(T_B=280K\\) where it is a black body (e.g.,\\(6.5\\mu m\\)).</p></p>"},{"location":"Tutorials/T2/t2.html#4a-multi-band-simulation","title":"4.a - Multi-band simulation","text":"<p>(12 bands: \\([3\\mu m \\:4\\mu m]\\),\u2026,\\([14\\mu m \\:15\\mu m]\\); mode \"R+T\"): WP2D_multi (CT=1\")</p> <p>The simulation stores spectral data (index \\(\\lambda\\)) in the file <code>dart.txt</code> (see the table below) and in a LUT (see the table below):</p> <ul> <li>TOA direct sun irradiance \\(E_{TOA}(W/m^2/\\mu m)\\): irradiance of an horizontal plane. \\(E_{TOA \\rightarrow 0}\\) if \\(\\lambda \\gg 1\\) (e.g., \\(10\\mu m\\)).</li> <li>BOA direct sun irradiance \\(E_{BOA,dir}(W/m^2/\\mu m)\\): irradiance of an horizontal plane.</li> <li>BOA diffuse irradiance \\(E_{BOA,diff}(W/m^2/\\mu m)\\): atmosphere thermal emission and scattering of sun radiation.</li> <li>BOA total \\((W/m^2/\\mu m)\\): \\(E_{BOA} = E_{BOA,dir} + E_{BOA,diff}\\) (horizontal plane).</li> <li>Total back-scattered to BOA: here, it is null because there is no atmosphere R.T.</li> <li>Absorption \\(E_{TOA} - E_{BOA}\\) , \\(skyl = \\frac {BOA\\:diffuse\\:irradiance} {BOA\\:total\\:irradiance}\\), \\(T_{b,scene}(K)\\) and \\(M_{scene, \\Delta \\lambda} \\:(W/m^2/\\mu m)\\).</li> </ul> <p><p>Part of dart.txt file: multi-band simulation (12 bands).</p></p> <p>Question</p> <p>Verify the relationship between the BOA spectral radiance \\(L_{BOA}(\\lambda)\\) and exitance \\(M_{BOA}(\\lambda)\\) for lambertian surfaces.</p> <p>Question</p> <p>The scene direct irradiance \\(E_{BOA,dir}(\\lambda)\\) decrease irregularly with \\(\\lambda\\)? \\(E_{BOA,dir}(6.5\\mu m)=0\\), \\(E_{BOA,dir}(7.5\\mu m)=0.028\\). Why?</p> <p>Question</p> <p>The scene irradiance varie decrease erratically from \\(3\\mu m\\) to \\(15\\mu m\\). Why?</p> <p>Question</p> <p>The exitance \\(M_{BOA}(\\lambda)\\) increase, from \\(3\\mu m\\) to \\(\\approx 8\\mu m\\) then decreases. Why?</p> <p>Question</p> <p>\\(T_B(\\lambda)\\) decrease from 364K to 340K when \\(\\overline{\\lambda}\\) increases from \\(3.5\\mu m\\) up to \\(14.5\\mu m\\). Why?</p> <p>Question</p> <p>The BroadBand tool indicates \\(T_{B,\\Delta\\lambda}\\) over \\([0.4\\mu m ; 15\\mu m] = 339K\\) whereas \\(T_B(\\lambda) &gt; 340K\\) \\(\\forall \\lambda\\). Why?</p> <p><p>Scene spectral and broadband quantities over [\\(3\\mu m \\:15\\mu m\\)]. a) LUT menu and spectral irradiance &amp; exitance. b) Spectral brightness temperature. c) Values and Broadband data.</p></p>"},{"location":"Tutorials/T2/t2.html#4b-spectral-sequence","title":"4.b - Spectral sequence","text":"<p>(12 mono-band simulations: [\\(3\\mu m \\:4\\mu m\\)],\u2026,[\\(14\\mu m \\:15\\mu m\\)]; mode \"R+T\"): WP2D_seq (CT=6\")</p> <p>Copy <code>WP2D_multi as WP2D_seq</code>, keep 1 band only. Then, create and run a sequence of 12 bands (see below).</p> <p>Question</p> <p>Verify for a few values, that spectral and broadband quantities of the table above are correct.</p> <p>Question</p> <p>Is it preferable to use the sequence of mono-band simulations or the multi-band simulation?</p> <p><p>Sequence of 12 mono-band simulations (\\(\\lambda_{mean}= 3.5\\mu m, 4.5\\mu m,..., \\Delta \\lambda=1\\mu m\\)).</p></p> <p>The BroadBand and SceneSpectra tools use a few output files. Hence, in order to use them, set the option \"Using scene spectra &amp; broadband\" in the Delete sub-menu of the Sequencer menu..</p>"},{"location":"Tutorials/T2/t2.html#5-non-spectral-sequences","title":"5) Non spectral sequences","text":""},{"location":"Tutorials/T2/t2.html#5a-detection-of-ice-vs-ground-pixels-at-2-atmosphere-temperatures-wp2e-ct10","title":"5.a - Detection of ice vs ground pixels, at 2 atmosphere temperatures: WP2E (CT=10\")","text":"<p>Objective: for which \\(\\rho_{ground}\\) values, a low flying nadir imaging TIR sensor (\\(10\\mu m\\), \\(\\Delta \\lambda=0.2\\mu m; 10K\\) equivalent sensitivity) flying at 0km can set apart pure ice (\\(\\rho_{ice}=0.273K \\implies T_{B,ice}=273K\\)) and pure ground (\\(\\rho_{ground}, 273K\\)) pixels, if \\(T_{B,atm}= 280K\\) and \\(240K\\).</p> <p>Approach: \\(\\rho_{ground}\\) for which \\(T_{B,scene} &gt; T_{B,scene} + 10K\\) on the plot \\(T_{B,scene} (\\rho_{ground}, T_{B,atm}=280k\\) and \\(240K\\)) from the LUT.</p> <p>Note</p> <p>Do not simulate products (images, BRF / BTF files and map) for the discrete directions, add the nadir direction, and set the option \"Store only for added direction\" in the LUT menu. Results are only stored in the LUT.</p> <p>Create a root mono-band simulation {Scene 1x1, no atmosphere RT, only LUT}</p> <p>Create / run the sequence (see below) {\\(\\rho_{ground} \\in [0\\:1]\\), \\(\\Delta \\rho_{ground} = 0.1\\)}, \\(T_{atm} = 280K\\) and \\(240K \\implies\\) LUT.</p> <p>Plot \\(T_B(\\rho_{ground},T_{atm})\\) using the tool <code>View/LUT</code>(see below).</p> <p>Question</p> <p>For which \\(\\rho_{ground}\\) values can we discriminate pure ice and ground pixels at \\(T_{atm} = 280K\\) and 240K? </p> <p>Question</p> <p>Why does \\(T_B(ground)\\) increase with \\(\\rho_{ground}\\) if \\(T_{atm} = 280K\\) and decrease with </p> <p>\\(\\rho_{ground}\\) if \\(T_{atm} = 240K\\) ?</p> <p><p>Sequence \"Seq_ground\" with 2 groups: \\(\\rho_{ground}\\) from 0 to 1 with step=0.1, and \\(T_{atm}=240K\\) and \\(280K\\).</p></p> <p><p>LUT display: \\(T_{B}(\\rho_{ground}, T_{atm})\\), with the selection of fixed and free parameters. The values of each curve are shown.</p></p>"},{"location":"Tutorials/T2/t2.html#5b-detecting-a-fire-in-a-pixel-depending-on-the-fire-area-wp2f-ct8","title":"5.b - Detecting a fire in a pixel, depending on the fire area: WP2F (CT=8\")","text":"<p>Objective: what pixel fraction a fire must cover to be detected by a low flying sensor (10m pixel size; 2 TIR bands: \\(3\\mu m\\), \\(10\\mu m\\), \\(\\Delta \\lambda=0\\)), knowing that it is detected only if \\(T_{B,scene} &gt; T_{B,ground} +40K\\)?</p> <ul> <li>Scene: 10m x 10m (\\(\\Delta x,y=\\Delta z=1m\\). No product, apart the added nadir image for DART-Lux. No atmosphere RT. \\(T_{B,atm}=280K\\)}. The fire is simulated by a 1m x 1m imported 3D object (square: <code>square.obj</code>), located slightly above the ground (e.g., 0.01m) in order not to confuse it with the ground (see below). \\(T_{ground} = 300K\\), \\(T_{fire} =500K\\), \\(\\rho_{fire}= \\rho_{ground} =0\\).</li> </ul> <p><p>Importation of the 3D object \"square\". a) Setting reflectance and temperature. b) Setting geometry.</p></p> <ul> <li>Sequence: 33 simulations with scale factors of the <code>square.obj</code> sides {\\(a_x \\in [1 \\:3]\\), \\(a_y \\in [0\\: 10]\\), \\(\\Delta a_x= \\Delta a_y=1\\)} in distinct groups (see below). The LUT stores \\(T_{B,scene}(fire \\;area\\; A_{fire}=a_x.a_y)\\) (see below). It can be exported as a <code>csv</code> file.</li> </ul> <p>Question</p> <p>What is the smaller detectable fire area, with 1% precision in terms of area?</p> <p>Question</p> <p>Why detection is better at \\(3\\mu m\\) than at \\(10\\mu m\\)?</p> <p><p>2 groups (X, Y) sequence that varies the area of the imported square.</p></p> <p>Menu \"Process and threads to run\": set \"Triangle File Processor\" because each simulation modifies a 3D object made of triangles; \"Direction\" and \"Phase\" can be unset if the DART root simulation already computed DART directions and phase products since the sequence does not modify DART directions and Phase products.  A click on a selected parameter (), followed by a click on , highlights the selected \"availailable parameter\" ().</p> <p><p>\\(T_B(y \\:scale)\\) for \\(\\lambda=3\\mu m\\) with x scale = 1, and \\(10\\mu m\\), with x scale = 1 and 2.</p></p>"},{"location":"Tutorials/T2/t2.html#5c-detecting-a-fire-area-depending-on-its-temperature-wp2g-ct11","title":"5.c - Detecting a fire area, depending on its temperature: WP2G (CT=11\")","text":"<p>Simulation: \\(100m^2\\) scene with a \\(1m^2\\) fire. \\(T_{ground} = 300K\\), \\(\\rho_{fire} = \\rho_{ground} = 0\\). \\(T_{atm} = 280K\\).</p> <p>Sequence: \\(T_{fire}\\) increases from 300K with \\(\\Delta T_{fire} =20K\\) and \\(N_{steps}=40\\).</p> <p>Question</p> <p>Above which Temperature of fire \\(T_{fire}\\) the fire is detected at \\(10\\mu m\\) and \\(3\\mu m\\) (detection threshold \\(\\Delta T=40K\\))?</p> <p><p>\\(T_{B,scene}(T_{fire})\\). \\(\\lambda=3\\mu m\\), \\(10\\mu m\\)</p></p>"},{"location":"Tutorials/T2/t2.html#6-stephan-boltzmann-law-vs-planck-law-wp2h","title":"6) Stephan Boltzmann law vs. Planck law: WP2H","text":"<p>Objective: to test DART simulation of Boltzmann law for 2 spectral ranges ([\\(1\\mu m \\:99\\mu m\\)], [\\(1\\mu m \\:201\\mu m\\)]).</p> <p>Theory : thermal exitance \\(M_g =\\epsilon_g.\\sigma.T_g^4=\\pi.\\int_{0}^{\\infty} \\epsilon_g(\\lambda).L_B(\\lambda,T).d\\lambda\\) with \\(\\epsilon_g=\\frac {\\int_{0}^{\\infty} \\epsilon_g(\\lambda).L_B(\\lambda,T).d\\lambda} {\\int_{0}^{\\infty} L_B(\\lambda,T).d\\lambda} = \\frac {\\pi.\\int_{0}^{\\infty} \\epsilon_g(\\lambda).L_B(\\lambda,T).d\\lambda} {\\sigma.T_g^4}\\) and Planck radiance \\(L_B(\\lambda,T)\\). For a perfectly emitting surface (i.e. black body): \\(\\epsilon=1, M(T=300K)=459.3W/m^2\\).</p> <p>Scene {\\(\\Delta X=\\Delta Y=1m\\), \\(\\Delta x = \\Delta y= \\Delta z= 1m\\), \\(T_g=300K\\), \\(\\rho_g(\\lambda) =0\\), No atmosphere RT, \\(T_{atm}=0K\\)} with 3 configurations:</p>"},{"location":"Tutorials/T2/t2.html#6a-mono-band-simulation","title":"6.a - Mono-band simulation","text":"<p>{mode T, [\\(\\lambda_{min} \\:\\lambda_{max}\\)], option \"Boltzmann\"} (see below) (CT=1\")</p> <p>\\(M_g =459.3W/m^2\\) (cf. <code>dart.txt</code> file) is exact. DART band (\\(\\overline{\\lambda}=50\\mu m, \\Delta \\lambda=98\\mu m\\)) is only used for computing \\(\\epsilon_g\\). Here, it is useless since \\(\\rho_g\\), and consequently \\(\\epsilon_g\\), are spectral constant. Hence, DART bandwidth should be correctly specified if \\(\\epsilon_g\\) (i.e., \\(\\rho_g\\)) varies with \\(\\lambda\\).</p> <p><p>Mode T with Boltzmann option.</p></p>"},{"location":"Tutorials/T2/t2.html#6b-mono-band-simulation","title":"6.b - Mono-band simulation","text":"<p>Spectral range \\([1\\mu m \\:99\\mu m]\\): \\(M_g(\\lambda) = 4.664125 W/m^2/\\mu m\\) (cf. <code>dart.txt</code> file) \\(\\implies M_g = 457.1 W/m^2\\)</p> <p>Spectral range [\\(1\\mu m \\:201\\mu m\\)]: \\(M_g(\\lambda) = 2.29508 W/m^2/\\mu m\\) (cf. <code>dart.txt</code> file) \\(\\implies M_g = 459 W/m^2\\)</p>"},{"location":"Tutorials/T2/t2.html#6c-multi-band-simulation","title":"6.c - Multi-band simulation","text":"<p>The mono-band approach becomes inaccurate if \\(\\epsilon_g\\) varies with \\(\\lambda\\). Then, the solution is to divide the spectral domain into N spectral bands, and to apply the 'BroadBand' tool to these N bands. Here, the accuracy in term of N is assessed for a grass cover (spectral property: grass_rye), with \\(T_{atm} = 0K\\) and with N = {1, 10, 100, 1000}.</p> <p>Warning</p> <p>Canstant bandwidth is not optimal: spectral sampling should be denser at Max{\\(\\epsilon_g(\\lambda).L_B(\\lambda,T)\\)}</p> <p><p>a) \\(M_g(\\lambda \\in [1\\mu m \\:99\\mu m])\\) of a grass cover simulated with 1, 10, 102, 103 bands. b) \\(M_{ground}(\\lambda)\\).</p></p>"},{"location":"Tutorials/T2/t2.html#7-sun-radiation-reflected-by-the-earth-vs-thermal-emission-of-the-earth-wp2i","title":"7) Sun radiation reflected by the Earth vs. Thermal emission of the Earth: WP2I","text":"<p>Objective: to assess the wavelength \\(\\lambda_{threshold}\\) where sun induced Earth exitance \\(M_{BOA,sun}(\\lambda)\\) = Earth thermal exitance \\(M_{BOA,thermal}(\\lambda)\\). This is done by comparing \\(M_{BOA,sun}(\\lambda)\\) and \\(M_{BOA,thermal}(\\lambda)\\), for \\(\\rho_{ground}=0.01\\), \\(0.1\\) and \\(0.5\\).</p> <p>Scene: \\(T_g=300K\\), \\(T_{atm}=280K\\), \\(\\theta_s=30\u00b0\\). [\\(2\\ :5\\mu m\\)], \\(\\Delta \\lambda=30nm\\). USSTD gas model. Rural V23 aerosol. Analytic model.</p> <ul> <li> <p>Run a sequence on \\(\\rho_{ground}(0.01, 0.1, 0.5)\\) with 100 bands in mode (R) and also in mode (T), over [\\(2\\mu m \\:5\\mu m\\)].</p> </li> <li> <p>Plot \\(M_{BOA,sun}(\\lambda)\\) and \\(M_{BOA,thermal}(\\lambda)\\) (i.e., exitance M in mode (R) and (T)) with the LUT viewer.</p> </li> </ul> <p>Question</p> <p>\\(\\lambda_{threshold}\\) depends on \\(\\rho_{ground}\\) (see below): \\(\\rho_{ground}= 0.01, 0.1, 0.5 \\implies \\lambda_{threshold} =2.495\\mu m,3.575\\mu m, 4.115\\mu m.\\)</p> <p>Question</p> <p>\\(\\lambda_{threshold}\\) changes during the day. Why? How?</p> <p><p>BOA exitance: reflexion of sun radiation (red) and thermal emission (blue). \\(\\rho_{ground}=0.01\\), 0.1 and 0.5. The inner graph is a zoom for \\(\\rho_{ground}=0.01\\).</p></p>"},{"location":"Tutorials/T3/t3.html","title":"WP3 - House, Specular and polarized reflectance, atmosphere","text":"<p>Objective: </p> <ul> <li>To understand how the 3D geometry of a scene impacts its observed reflectance \\(\\rho^{*}\\) (e.g., a 3D scene made of lambertian elements is usually not lambertian). For that, we analyze images at scattering order 1 and \"infinite\" (i.e., infinite extrapolation using last DART-FT iterations, stored in folder ITERX, or very high DART-Lux scattering order). Note: {slope (\\(\\overline{\\Omega}_{slope},\\rho_{slope}\\)), sun direction \\(\\overline{\\Omega}_s\\)} \\(\\implies \\rho_1^{*} = \\rho_{slope}.\\frac {\\bar{\\Omega}_s.\\bar{\\Omega}_{slope}} {\\bar{\\Omega}_s.\\bar{\\Omega}_{ground}} = \\rho_{slope}.\\frac{E_{slope}}{E_{BOA}}\\)</li> <li>To create color composites and linear combinations of spectral images.</li> <li>To simulate satellite images with the option \"atmosphere radiative transfer\".</li> <li>To simulate polarization (cf. theory in DART Handbook).</li> </ul> <p><p>Parameters including those specific to \"Forward\" (DART-FT) and \"Bi-directional\" (DART-Lux) sub-modes..</p></p> <p><p>\"Classic\" house in a 20mx20m scene.</p></p> <p>The house geometry is set by points that are input in a anticlockwise direction: 4 points (\\(W_1, W_2, W_3, W_4\\)) for the walls and 2 points (\\(R_1, R_2\\)), for the roof.</p> <p>Height of walls: 4m. Height of the roof ridge: 6m.</p>"},{"location":"Tutorials/T3/t3.html#1-first-and-multiple-scattering-order-reflectance-images-of-a-urban-scene-wp3a-ct4","title":"1) First and multiple scattering order reflectance images of a urban scene: WP3A (CT=4\")","text":"<p>Objective: to understand the differences between 1st and infinite scattering order images.</p> <p>DART-Lux and DART-FT (D=0.05cm) nadir reflectance images \\(\\rho_{xy}\\) and mean values \\(\\overline{\\rho}\\) are very close (Figure below)</p> <ul> <li>DART-Lux:  \\(N_{sample}=200 : \\bar{\\rho} \\approx 0.473\\).  \\(N_{sample} = N_{cores} = 1\\) : few samples \\(\\implies\\) noisier image but same \\(\\bar{\\rho}\\).</li> </ul> <p>Question</p> <p>Why \\(N_{cores}=1\\)?</p> <ul> <li>DART-FT:  Here, we stress the role of the illumination mesh size D, using D=0.5cm (i.e., 1 ray / cell). Then, roof irradiance \\(E_{roof}\\) is spatially periodic, and so \\(\\rho_{1,roof}^*\\) , since \\(\\rho_{1,roof}^* = \\rho_{roof}.\\frac{E_{roof}}{E_{BOA}}\\) . Then: \\(\\rho_{roof} \\in [0.02  0.9]\\) with \\(\\overline{\\rho}=0.474\\). </li> </ul> <p><p>DART image accuracy. DART-Lux:  \\(N_{sample}=200\\) : \\(\\overline{\\rho}=0.473\\) and  \\(N_{sample} = N_{cores} = 1\\) :\\(\\overline{\\rho}=0.473\\).  DART-FT: periodic \\(\\rho_{slope}\\) from 0.02 to 0.9 due to the coarse scene illumination mesh D=0.5cm (i.e., 1 ray / cell).</p></p> <p>Display 1st scattering order DART-FT images (i.e., folder order1):</p> <p>For this schematic scene, DART-Lux is slower than DART-FT, especially if many images are requested In addition, up to now, conversely to DART-FT, it must be run twice with \\(N_{scattering} = 1\\) and large value to get images at order 1 and infinite. The image below shows DART-FT images for nadir, viewing direction (\\(\\theta_v = 41.1\u00b0\\), \\(\\phi_v = 30\u00b0\\)) and (\\(\\phi_v = 90\u00b0\\) with \\(\\theta_v = 10\u00b0\\),\u2026, 70\u00b0. In any displayed image, the tools (, create , store , open ) of the \"Mask Editor\" (here) allow one to define sub-regions and to compute their mean reflectance value.</p> <p>Question</p> <p>Why irradiated ground has a constant reflectance, and why does the shadow have a zero reflectance?</p> <p>Question</p> <p>Why does each roof slope have the same reflectance for any viewing direction (see below)?</p> <p>Question</p> <p>Each roof slope has a specific order 1 reflectance : \\(\\overline{\\rho}_{1, most\\:lit\\:shape}=0.537\\), \\(\\overline{\\rho}_{1, least\\:lit\\:shape}=0.356\\). Why?</p> <p>Note</p> <p>\\(|\\Omega_s \\Omega_{slope}|=|cos(\\theta_s)|.|cos(\\theta_{slope})| + |sin(\\theta_s)|.|sin(\\theta_{slope})|.cos(\\phi_s - \\phi_{slope})\\) and \\(|\\Omega_s \\Omega_{ground}| = |cos(\\theta_s)|\\)</p> <p><p>DART-FT order 1 images. a) Images at nadir and viewing direction \\((\\theta_v = 41.1\u00b0, \\phi_v = 30\u00b0\\)). b) Added directions. c) Images for (\\(\\phi_v = 90\u00b0\\) with \\(\\theta_v = 10\u00b0\\),\u2026, 70\u00b0. The theoretical slope reflectance is 0.5385 and 0.3559 (cf. <code>WP3A.xlsx</code>).</p></p> <p>Display infinite scattering order nadir and oblique (\\(\\theta_v= 41.1\u00b0, \\phi_v = 30\u00b0\\)) images (see below; (i.e., folder ITERX)</p> <p>Question</p> <p>The irradiated ground has a reflectance that depends on location (x, y). Why?</p> <p>Question</p> <p>\\(\\rho_{roof}\\) is nearly isotropic, conversely to \\(\\rho_{scene}\\). Why?</p> <p>Question</p> <p>Neighborhood increases \\(\\rho_{scene}^{DART-Lux}\\) : \\(\\rho_{well \\:sunlit \\:roof} = 0.542\\) if \\(N_{scene \\:repetition} = 5\\) and \\(0.546\\) if \\(N_{scene \\:repetition} =1\\) Why?</p> <p><p>DART infinite scattering order images. a,c) Nadir. b,d) Oblique direction: \\(\\theta_v = 41.1\u00b0, \\phi_v = 30\u00b0\\). a,b) DART-FT (IterX). c,d) DART-Lux (\\(N_{scattering \\:order} = 20, N_{scene \\:repetition} = 5, \\Delta r=0.2m\\)).</p></p> <p>Display the angular variation of the scene reflectance</p> <ul> <li>1D / 2D reflectance graphs (see the images a. and b. below) display the directional behavior of \\(\\rho_{scene}\\).</li> </ul> <p>Question</p> <p>\\(\\rho_{scene}\\) is not lambertian (i.e., anisotropic), whereas all scene elements are lambertian. Why?</p> <p>Question</p> <p>\\(\\rho_{scene}\\) is maximal for the hot spot direction (Figure below .a). Why?</p> <p><p>\\(\\rho_{scene}(\\theta,\\phi)\\) a) 1D plot: solar \\((\\phi_v=225\u00b0)\\) &amp; perpendicular \\((\\phi_v=135\u00b0)\\) planes. b,c) DART-FT and DART-Lux 2D &amp; 3D plots. They slightly differ because their numbers of upward directions differ. 102 for DART-FT and 360x90 for DART-Lux.</p></p> <p>Note</p> <p>DART-FT \"order 1\" is much faster using options  and  (Figure below). DART-Lux \"order 1\" is with \\(N_{scattering} = 1\\).</p> <p><p>Fast  and very fast  1st order mode.  is faster.</p></p>"},{"location":"Tutorials/T3/t3.html#2-components-of-the-simulated-signal-per-type-of-scene-element-wp3b-ft-wp3b-lux-ct1","title":"2) Components of the simulated signal, per type of scene element: WP3B-FT, WP3B-Lux (CT=1\")","text":"<p>Objective: to get image per type of surface element (e.g., wall) such that \"DART image\" = \\(Image_{ground} + Image_{roof} + Image_{wall}\\)</p> <p>Editor:  set the option <code>Image decomposition</code> in <code>Product</code> menu.  To reduce CT: only simulate images with \\(\\theta_v &lt;1\\), and do not simulate \"1st order\" (DART-FT), and BRF (DART-Lux).</p> <p>Display element images. In the menu <code>View images</code>, set the correct directory / folder (<code>output/PerSceneElements</code>) (see the image b. below) or search directly the element images with the option \"Search Image\" or \"Open\".</p> <p>Question</p> <p>Verify that the roof has the same reflectance in the \"roof image\" and in the \"total image\".</p> <p><p>DART component images. a) Product, b) Display menus. c) DART-FT and DART-Lux Roof, Ground and Total images.</p></p>"},{"location":"Tutorials/T3/t3.html#3-time-series-of-scene-reflectance-rho_scene-wp3c","title":"3) Time series of scene reflectance \\(\\rho_{scene}\\): WP3C","text":"<p>Objective: \\(\\rho_{scene}\\) variation with sun direction \\((\\theta_s, \\phi_s)\\), for the nadir and \\((\\theta_v=61\u00b0, \\phi_v=22\u00b0)\\) viewing directions.</p> <p>Editor:</p> <ul> <li>TOA \\(\\leftrightarrow\\) BOA transfert: Analytic model</li> <li>TOA illuumination: Spectral irradiance (database).</li> <li>Results: only in the LUT (i.e., unset 'No product'), and images for the 2 added directions {Nadir, \\((\\theta_v=61\u00b0,\\phi_v=22\u00b0)\\)}</li> </ul> <p>Two methods are used to vary sun direction: \\(\\theta_s\\) change with constant \\(\\phi_s\\), and realistic (\\(\\theta_s(t), \\phi_s(t)\\)) with time t.</p> <p>a) Sequence {\\(\\theta_s: 0 \\rightarrow 80\u00b0, \\Delta \\theta_s = 10\u00b0; \\phi_s = 225\u00b0; \\Delta x=0.2m\\)} (see below): WP3Da-FT (CT=30\"), WP3Da-Lux (CT=35\")</p> <p>Note</p> <p>To view the images of a simulation of a sequence, use </p> <p>Question</p> <p>\\(\\rho_{scene}\\) varies with viewing directions, and nadir \\(\\rho_{scene}\\) decreases if \\(\\theta_s\\) increases. Why?</p> <p><p>DART-FT &amp; DART-Lux \\(\\rho_{scene}(\\theta_s)\\). a) LUT display: \\(\\rho_{scene}(\\theta_s, \\phi_s=225\u00b0)\\) for 2 viewing directions (nadir; (\\(\\theta_v=61\u00b0, \\phi_v=22\u00b0\\))). b) DART nadir images for \\(\\theta_s=70\u00b0\\). Note DART-FT discrete illumination &amp; DART-Lux Monte Carlo noise. $N_{scene\\:repetition}^{DART-Lux} is as large as 50 because the scene is small and some sun and viewing directions are very oblique.</p></p> <p>b) Sequence {time: 5h \\(\\rightarrow\\) 19h, \\(\\Delta t = 1h; \\Delta x=\\Delta y=0.2m\\)} (see below): WP3Db-FT (CT=12s), WP3Db-Lux (CT=36s)</p> <p>Here, the sequence varies 'time' because it is usually more convenient, and realistic, than to vary (\\(\\theta_s, \\phi_s\\)). For that:</p> <ul> <li>Set the scene coordinates in the root simulation. For Toulouse (see the image a. below): 43\u00b036'N, 1\u00b026'E, 200m altitude.</li> </ul> <p><p>a) Coordinates (Toulouse). b) Time.</p></p> <ul> <li>Set: the Date mode in the root simulation with June 14, 2016, then, the range of dates in the sequencer (see below).</li> <li>Create the 'time\" sequence (see below).</li> </ul> <p><p>Setting 15 time steps of 1h time over [5h 19h] in the sequence. displays the selected parameter \"Hours\" in the right panel</p></p> <p>see below shows DART-FT and DART-Lux images at 5 hours for atmosphere RT simulated with DART \"Analytic model\" and \"Atmosphere RT\". The latter gives the most accurate BOA illumination (i.e., downward radiance) and is the only mode to give TOA products. \u03c1scene varies from 5 to 12 am (see below) as the nadir viewed area of shadows: minimal at sunrise and sunset (maximal shadow extent) and maximal at 12 am (minimal shadow extent).</p> <p>Note</p> <p>For very simple landscapes, DART-FT is usually faster than DART-Lux.</p> <p><p>Time series (5, 6, 8, 10, 12 am) of DART-FT (a,b) and DART-Lux (c,d) nadir reflectance images. Atmosphere mode: a,c) Analytical; b,d) RT. Reflectance of the roof East side and a ground zone are indicated.</p></p> <p><p>DART-FT \u03c1scene,BOA and \u03c1scene,TOA time series (5h \\(\\rightarrow\\) 19h) for 2 viewing directions: nadir and (61\u00b0, 22\u00b0). Ox axis is the \"Exact date\" (i.e., \"hour\") index.</p></p>"},{"location":"Tutorials/T3/t3.html#4-toa-sensor-and-boa-spectra-wp3e-ft-ct37s-wp3e-lux-ct53s","title":"4) TOA, sensor and BOA spectra: WP3E-FT (CT=37s), WP3E-Lux (CT=53s)","text":"<p>Objective: TOA / BOA radiance spectra of a 1m x 1m grass scene \\((\\Delta x=1m, \\rho_{ground}=\\)<code>grass_rye</code>, \\(T_{ground}=280K)\\).</p> <p>Multi-band simulation (see below): 113 bands to limit CT. 53 bands in \\([0.35 \\:3\\mu m]\\) (\\(\\Delta \\lambda=50nm\\), mode R), 60 in \\([3 \\:15\\mu m]\\) (\\(\\Delta \\lambda=200nm\\), mode T). Atmosphere: USSTD76 gas, Rural23 aerosol, 'Manual' geometry: Mid Atmosphere [0km 4km] (1km layers), High Atmosphere [4 80km] (5km layers), and Sensor altitude: 3200m. No product apart LUT (radiance and BRF-BTF, atmosphere TOA).</p> <p><p>Creation of the T bands</p></p> <p>Question</p> <p>Long waves: explain the smooth curve \\(L_{BOA}\\), the minima of \\(L_{TOA}\\) and the maxima of \\(L_{atm}\\). Why \\(L_{sensor} \\approx L_{BOA}\\)?</p> <p>Question</p> <p>\\(L_{TOA} \\gg L_{BOA}\\) at \\(0.4-0.6\\mu m\\). Why? Above which \\(\\lambda\\), \\(L_{thermal} &gt; L_{sun\\:reflection}\\), at BOA level, and at TOA level?</p> <p><p>TOA/BOA scene and TOA atmosphere spectra. a) LUT radiance \\([0.35; \\:15\\mu m]\\) and zoom over \\([2 \\:15\\mu m]\\). b) LUT reflectance \\([0.35; \\:3\\mu m]\\). c) LUT brightness temperature \\([3; \\:15\\mu m]\\). d) LUT export (csv file): scene and atmosphere TOA radiance; \\([0.35; \\:3\\mu m]\\), \\(\\Delta \\lambda=2nm\\): sun radiation scattered by the atmosphere and the Earth (attenuated by the atmosphere); \\([3; \\:15\\mu m]\\), \\(\\Delta \\lambda=10nm\\): atmosphere thermal radiance and Earth thermal radiance attenuated by the atmosphere.</p></p>"},{"location":"Tutorials/T3/t3.html#5-skyl-spectral-indices-and-color-composite-wp3f-ft-ct3s-and-wp3f-lux-ct10s","title":"5) SKYL, spectral indices and Color composite: WP3F-FT (CT=3s) and WP3F-Lux (CT=10s)","text":"<p>Objective: SKYL and spectral indices for nadir and (\\(\\theta_v=61\u00b0,\\phi_v=22\u00b0\\)) viewing directions, plus RGB color composite.</p> <p>Simulation (copy of WP3Da): 4 bands \\((0.45\\mu m, 0.55\\mu m, 0.65\\mu m, 0.9\\mu m; \\Delta \\lambda=0\\mu m)\\). \\(\\theta_s=30\u00b0, \\phi_s=225\u00b0\\). \\(\\rho_{ground} =\\) <code>grass_rye</code>, \\(\\rho_{roof} =\\) <code>tile_Capitoul</code>, \\(\\rho_{wall} =\\) <code>concrete_brown</code>. Atmosphere RT. DART-FT: </p> <p>Create RGB color composites: BOA, Sensor and TOA blue/green/red nadir images (see below)</p> <p>Question</p> <p>The ground and roof observed reflectance values change between BOA and TOA (see below). Why?</p> <p>Question</p> <p>The SKYL value decreases if the visibility and / or wavelength increase (see the table below). Why?</p> <p><p>DART color composites: (tool 'DART / Tools / Color composite'). 3 altitudes (a: BOA. b: Sensor (3km). c: TOA) with indication of the spectral TOA and BOA reflectance of the roof and ground.</p></p> <p><p>\\(SKYL_{DART-FT}\\) for 2 aerosol visibilities.</p></p> <p>BOA diffuse sun irradiance, and therefore SKYL, includes direct sun radiation that is scattered along the direct sun direction. SKYL is stored in dart.txt, with radiative coupling (RC) and without (NRC).</p> <p>Compute TOA / BOA vegetation index \\(NDVI= \\frac {\\rho_{NIR} - \\rho_{red}} {\\rho_{NIR} + \\rho_{red}}\\) (see below) with the tool <code>Tools / Band calculation tools / Band Math</code>. Use the pre-defined NDVI expression or type its expression by applying basic math operators (+, -, *, /, &gt;,\u2026) to DART spectral images. Results are stored in folder \"BandCombination\", at folder \"output\" level.</p> <p>Question</p> <p>\\(NDVI_{BOA,grass,sunlit} &gt; NDVI_{BOA,grass, shadow} \\gg NDVI_{TOA,roof}\\). Why?</p> <p>Question</p> <p>Roof and shadow: \\(NDVI_{TOA} &gt; NDVI_{BOA}\\). It is the opposite for grass. Why?</p> <p><p>NDVI images. a) Nadir BOA b) Nadir TOA c) Oblique TOA</p></p>"},{"location":"Tutorials/T3/t3.html#6-impact-of-sky-illumination-on-scene-reflectance-wp3g-1s","title":"6) Impact of sky illumination on scene reflectance: WP3G (1s)","text":"<p>Objective: dependence of \\(\\rho_{scene}\\) on the \\(SKYL = \\frac {E_{BOA,diff}} {E_{BOA}}\\), and also on the number of discrete directions \\(N_{dir}^{\\downarrow}\\) for DART-FT.</p> <p>Simulation: copy of WP3F, with \\(\\lambda=0.45\\mu m\\) only. Atmosphere \"analytic model\" The image below illustrates the dependence of \u03c1scene for SKYL=0 (a), and SKYL=1 with \\(N_{dir}^{\\downarrow} =50\\) (b) and \\(N_{dir}^{\\downarrow} =20\\) (c).</p> <p>Question</p> <p>There is no such effect with DART-Lux. Why?</p> <p>Question</p> <p>SKYL = 0: \\(N_{dir}\\) impacts the image radiometry only for scattering orders larger than 1.</p> <p>Question</p> <p>SKYL = 1:  - the 2 roof slopes have the same reflectance. Why?  - minimal values are much larger than those with \"SKYL=0\". Why?  - \\(\\rho_{ground}^{SKYL=1} &lt; \\rho_{ground}^{SKYL=0}\\) in the central part of the image. Why?  - ground radiance is smaller close to walls than far from walls (see the image b. below). Why?</p> <p><p>Impact of SKYL and \\(N_{dir}\\) discrete directions on \\(\\rho_{scene}\\). \\(\\lambda=0.45\\mu m\\). \\(\\theta_v=0\u00b0\\). a) SKYL= 0: \\(\\rho_{scene} \\in [0;\\: 0.093]\\). b) SKYL=1, \\(N_{dir}=100\\): \\(\\rho_{scene} \\in [0.02;\\:2 0.082]\\). c) SKYL=1, \\(N_{dir}=20\\): \\(\\rho_{scene} \\in [0.025;\\: 0.080]\\)</p></p>"},{"location":"Tutorials/T3/t3.html#7s-specular-reflectance-and-polarization-wp3h-ct24","title":"7s) Specular reflectance and polarization: WP3H (CT=24')","text":"<p>Objective: multi-spectral specular polarized reflectance images of a 3D scene (see below).</p> <p>Simulation: 60 x 60m, \\(\\Delta r=0.25m\\). Flooded ground: lambertian + \"Basic\" specular (\"like Gaussian\" option, intensity x 0.4). 4 bands (mode R: 0.4 / 0.55 / 0.7 / 1\\(\\mu m\\)). 3D trees: cherry, citrus. Direct sun \\((\\theta_s=30\u00b0, \\phi_s=225\u00b0)\\) only (SKYL=0) to better stress the polarization.</p> <p>Note</p> <ul> <li>any ground surface has the same specular configuration in satellite images \\((\\Delta \\Omega_v=0)\\), conversely to camera images where only part of it is in the specular configuration.</li> <li>to simulate specular reflectance, set:  in advanced mode.</li> </ul> <p><p>BOA total (RGB color composite)/polarized images. Nadir / oblique /specular directions. \\(\\theta_s=30\u00b0, \\phi_s=225\u00b0\\).</p></p> <ul> <li>Satellite \\((\\Delta \\Omega_v=0)\\). <ul> <li>Reflectance images: b) nadir, c) oblique (22.4\u00b0, 330\u00b0), d) specular direction (30\u00b0, 45\u00b0).</li> <li>Band 1 polarized reflectance image (Q Stokes element): e) nadir: \\(\\rho_1=0\\), \\(\\rho_{max}=4.9\\times 10^{-7}\\); f) oblique (22.4\u00b0, 330\u00b0): \\(\\rho_1=0\\), \\(\\rho_{max}=1.7\\times 10^{-4}\\). g) Oblique specular direction (30\u00b0, 45\u00b0): \\(\\rho_1 \\approx \\rho_{max}=2.8\\times 10^{-1}\\).</li> </ul> </li> <li>Camera \\((\\Delta \\Omega_v \\neq 0)\\), 30\u00b0 inclined: h) Non specular. i, j) Specular: total and polarized reflectance.</li> </ul>"},{"location":"Tutorials/T3/t3.html#8-house-reflectance-and-spatial-resolution-wp3i","title":"8) House reflectance and spatial resolution: WP3I","text":"<p>Objective: how do spatial resolution \\(\\Delta r\\), illumination mesh \\(\\Delta r_{illum}\\) and computer time \\(\\Delta t\\) impact \\(\\rho_{BOA}\\) (see below)? Here: analytic atmosphere model. \\(\\lambda = 0.4, 055, 0.675\\mu m\\).</p> <ul> <li>DART-FT: \\(\\Delta t\\), RAM and hard disk greatly change with \\(\\Delta r\\) and \\(\\Delta r_{illum}\\). \\(\\rho_{BOA}\\) is accurate even with coarse \\(\\Delta r\\).</li> <li>DART-Lux: \\(\\Delta r=5cm\\). \\(\\rho_{BOA}\\) accuracy increases with \\(\\Delta t\\). If \\(\\Delta t=20s\\), \\(\\rho_{BOA}\\) relative error \\(&lt;4\\times 10^{-5}\\), but the image is noisy. Conversely to DART-FT, its RAM (0.4Gb) does not depend on \\(\\Delta r\\) and \\(\\Delta t\\) is multiplied by n if n images are simulated.</li> </ul> <p></p> <p><p>a) Scene. b) DART-FT images: oblique and nadir for \\(\\Delta r=5cm\\) and nadir for \\(\\Delta r=1m\\) (\\(\\implies \\Delta t\\) is divided by 10). c) DART-Lux images for \\(\\Delta r=5cm\\). 675nm. d) DART-FT with \\(\\Delta r\\) and \\(\\Delta r_{illum}\\). e) DART-Lux \\(\\rho_{675nm}\\) with increasing \\(\\Delta t\\)</p></p>"},{"location":"Tutorials/T3/t3.html#9-boatoa-images-of-a-landscape-wp3j-ct-78","title":"9) BOA/TOA images of a landscape: WP3J (CT: 78\")","text":"<p>Objective: TOA/BOA images of a 100mx100m scene. </p> <p><p>BOA \u03c1nadir and albedo. Atmosphere RT and analytical model, and 1st order. \\(\\lambda=0.55\\mu m\\)</p></p> <p><p>BOA / TOA DART images of countryside. \\(\\Delta r=0.5m\\). DEM \\(z(x,y)=H.[sin(\\frac {y} {y_{max}}.\\frac {5\\pi} {2}).\\frac {y} {y_{max}} + 0.7][1+cos(\\frac {x} {x_{max}}.\\frac {\\pi} {2})]\\)</p></p>"},{"location":"Tutorials/T4/t4.html","title":"WP4 - Radiative Budget (RB) and sun induced fluorescence (SIF)","text":"<p>Objective: RB and SIF of 3D and 1D facet- and turbid-vegetation with DART-Lux and DART-FT.</p> <p><p>Parameters including those specific to \"Forward\" (DART-FT) and \"Bi-directional\" (DART-Lux) sub-modes.</p></p> <p>Note</p> <ul> <li>RB: it s mostly simulated with DART-FT because DART-Lux is advised only if RB data are for part of the scene.</li> <li>RS data: DART-Lux is usually preferred to DART-FT except for schematic scenes as here. For mock-ups with turbid cells, DART-FT decreases if \\(LAI_{cell} &gt; 0.5\\), especially for large scattering bands (note: if needed, decrease \\(LAI_{cell}\\) by decreasing the cell vertical dimension \\(\\Delta z\\)). Here, canopy height = 1m; then, although too large for {DART-FT, LAI &gt;2}, we use \\(\\Delta z=0.25m\\) because it leads to only 4 DART-FT canopy layers, which is convenient to display the RB.</li> <li>Running sequences with the option \"Delete all files except LUT\" reduces the needed hard disk memory.</li> </ul>"},{"location":"Tutorials/T4/t4.html#1-vegetation-spectral-reflectance-as-a-function-of-lai","title":"1) Vegetation spectral reflectance as a function of LAI","text":"<p>(\\(m^2\\) leaves/ \\(m^2\\) ground): WP4A_FT and WP4_Lux</p> <p>Objective: DART-FT and DART-Lux \\(\\rho_{scene}(LAI; \\rho_{ground}=0\\) and 0.8) of 1m high vegetation canopy simulated as turbid medium and \\(0.003m^2\\) facets (see below).</p> <p><p>1m high turbid and equivalent facet canopy. a) DART-FT. b) DART-Lux. c) Leaf deciduous optical properties.</p></p> <p>DART_Lux: influence of input parameters (sequence <code>seq_Repeat_Scat_Sample_LAI.xml</code>): \\(CT_{facets} = 8\\)', \\(CT_{turbid} = 18\\)'</p> <p>DART-Lux input parameters are fewer than for DART-FT (e.g., \\(N_{sub-cell}, N_{sub-face}, N_{iterations}, \\Delta l_{illumation}\\)). The figure below shows how its 3 major parameters (\\(N_{repetitive}, N_{scat}, N_{sample}\\): numbers of scene repetitions, scatterings and samples) impact \\(\\rho_{scene,0.65\\mu m}\\) and \\(\\rho_{scene,0.9\\mu m}(N_{repetitive}: 0, 2, 4,\u2026, 20\\)) for \\(N_{scat}\\) = {5, 10, 20, 50, 80}, \\(N_{sample}\\) = {500, \\(5 \\times10^4, 5 \\times10^5\\)}, LAI = {2, 8}, \\(\\rho_{ground}=0\\), for turbid and facet scenes. \\(\\rho_{scene}(N_{repetitive} = 20, N_{scat} = 80, N_{sample} = 5\\times 10^5\\)) is the reference:</p> <p></p> <ol> <li>\\(N_{repetitive}\\) (0 \\(\\iff\\) isolated scene). Rays onto the 4 scene vertical sides influence \\(\\rho_{scene}\\), in addition to rays  onto the scene top. Their role decreases with smaller sun zenith angle, and larger scene dimensions, LAI and \\(\\rho_{ground}\\):<ul> <li>Sun / atmosphere rays  incident onto the vertical sides of the scene (\\(N_{repetitive} = 0\\)) or the outer repeated scenes, and transmitted through the repeated scenes (\\(N_{repetitive}&gt; 0\\)). Their influence decreases if \\(N_{repetitive}\\) increases.</li> <li>Rays  onto the tops of the repeated scenes, and transmitted through the repeated scenes (\\(N_{repetitive} &gt; 0\\)). Their influence decreases if \\(N_{repetitive}\\) increases.</li> <li>Rays  scattered by the repeated scenes, due to intercepted rays  (lesser role if \\(N_{repetitive}\\) increases) and  (lesser role if \\(N_{repetitive}\\) increases). For this very small scene, \\(\\rho_{scene}(N_{repetitive})\\) decreases and converges for \\(N_{repetitive} \\approx 3\\) at \\(0.65\\mu m\\), whereas it increases at \\(0.9\\mu m\\) and converges at \\(N_{repetitive} \\approx 6\\) at \\(0.9\\mu m\\). For large scenes, the default option \\(N_{repetitive} = 1\\) is usually advised.</li> </ul> </li> <li>\\(N_{sample}\\). The MC noise of \\(\\rho_{scene}\\) decreases if \\(N_{samples} \\times N_{pixels}\\) of DART image increases (\\(\\implies\\) it is smaller for \\(N_{sample}=5\\times 10^5\\)).</li> <li>\\(N_{scat}\\) (\\(\\equiv N_{iterations}\\) in DART-FT). \\(\\rho_{scene}\\) has converged (i.e., \\(\\frac {\\Delta \\rho} {\\rho} &lt; 2\\times 10^{-3}\\)) for \\(N_{scat} \\approx 5\\) at \\(0.65\\mu m\\) and \\(\\approx 40\\) at \\(0.9\\mu m\\).</li> </ol> <p><p>DART-Lux \\(\\rho_{scene}(N_{repetitive}, \\theta_v = 0\u00b0): N_{scat}\\) = {5, 10, 20, 50, 80}, \\(N_{sample} =\\) {5 103, 105, 5 105}, \\(SKYL_{0.65\\mu m}=0.24\\), \\(SKYL_{0.9\\mu m}=0.14\\), \\(\\theta_s=30\u00b0\\). \\(\\rho_{scene,turbid}\\) and \\(\\rho_{scene,facet}\\) slightly differ because facets are large (i.e., \\(0.003m^2\\)). \\(\\rho_{ground}=0\\).</p></p> <p>\\(\\rho_{scene,\\lambda}\\)(LAI: [0 10], step = 0.5; \\(\\rho_{ground}=0\\); 0.8) (sequence <code>seq_LAI.xml</code>) for turbid and facet scenes: \\(CT_{facets}^{DART_Lux}= 8'\\) \\(\\rho_{scene,\\lambda}^{DART-FT}(LAI)\\) and \\(\\rho_{scene,\\lambda}^{DART-Lux}(LAI)\\) at \\(\\lambda =\\) {0.65, 0.9, \\(1.7\\mu m\\)} (see below) slightly differ due to differences in RT algorithms and input parameters. Here, the small size of the scene reinforces the differences and fluctuations.</p> <ul> <li>DART-Lux: \\(N_{scat} = 50, N_{sample} = 5\\times 10^5\\), \\(N_{repetitive} = 10\\). Pixel size = 1m. \\(N_{scat}\\) could be smaller, especially for 0.65 and \\(1.7\\mu m\\). \\(N_{repetitive}\\) is larger than the default value (i.e., 1) because the scene is very small.</li> <li> <p>DART-FT: \\(\\Delta z = 25cm\\) and 1cm, \\(\\Delta x = \\Delta y = 1m\\) for turbid and 0.1m for facet, \\(\\Delta_{illu} = 0.01m\\). Cell dimensions impact \\(\\rho_{scene}\\) through the grouping of rays that exit cells: the larger the cells, the greater the fluctuations in \\(\\rho_{scene}\\).</p> </li> <li> <p>\\(\\rho_{scene,0.9\\mu m} &gt; \\rho_{scene,1.7\\mu m} &gt; \\rho_{scene,0.65\\mu m} \\forall \\rho_{ground}\\), for turbid- and facet-vegetation. Why?</p> </li> </ul> <p><p>\\(\\rho_{scene}(LAI, \\theta_v = 0\u00b0)\\) at 0.65, \\(0.9\\mu m\\) and \\(1.7\\mu m\\). \\(\\rho_{ground}=0\\) and 0.8. Turbid and facet.</p></p>"},{"location":"Tutorials/T4/t4.html#2-radiative-budget-rb-of-a-1d-homogeneous-vegetation-canopy-the-short-waves-wp4b","title":"2) Radiative budget (RB) of a 1D homogeneous vegetation canopy the short waves: WP4B","text":"<p>Objective: \\(RB_{cell,\\Delta \\lambda}\\) and \\(RB_{facet,\\Delta \\lambda}\\) products of a turbid plot (cf. section b) at increasing scattering orders for DART-FT.</p> <p>Scene: 1m x 1m \\((\\Delta x=\\Delta y=1m; \\Delta z=0.25m)\\), ground (\\(\\rho_{ground}= 0.5\\)), turbid vegetation plot (LAI=2, h=1m, \\(\\rho_{leaf\\ deciduous}\\)), 2 bands (0.55 and \\(0.9\\mu m\\), \\(\\Delta \\lambda=0\\); mode R). \"Radiation Budget Products' is the only product (see the image a. below). Most results are for DART-FT because for RB, DART-Lux becomes efficient only if part of the scene RB is simulated.</p> <p>WP4B-FT (1s): select the products to store (see below), run the simulation, then check the top scene and 1D RB</p> <ol> <li>Top scene RB: irradiance, exitance and albedo; check that their values in file dart.txt are those in the table below.</li> <li>1D \\(RB_{\\lambda}\\) (see the table below; unit % of top scene irradiance): profile of intercepted, emitted, scattered and absorbed radiation per iteration, layer z and band. Here, 3D \\(RB_{\\lambda}\\) (RadiativeBudget_3D) = 1D \\(RB_{\\lambda}\\) (RadiativeBudget_profile) because the scene horizontal section is a single cell. The interception profile decreases exponentially with height, except in the lower layer [0 0.25m] where it increases because this layer contains \"Vegetation(i.e., Turbid) + Ground\".</li> </ol> <p>Note</p> <p>RB_3D_Turbid (file RadiativeBudget 3D) = RB_3D_Turbid - RB_3D_Ground (file RadiativeBudget_3D_Ground)</p> <p>Question</p> <p>Top cell: +\\(ZFaceEntry_{\\lambda} = 1\\), and +\\(ZFaceExit_{\\lambda}\\)(see table below) \\(x=\\frac {M_{BOA,\\lambda}} {E_{BOA,\\lambda}}\\) in <code>dart.txt</code> (see the table below).</p> <p>Question</p> <p>\\(RB_{\\lambda}\\) terms increase with iteration k and can become &gt; 1 (e.g. \\(RB_{int}, RB_{abs}\\)), except \\(RB_{abs}=\\sum_{0}^{K} [IntR_k - ScatR_{k+1}]\\).</p> <p>Question</p> <p>%\\(Scat_{ground}\\) and %\\(Abs_{ground}\\) are larger at \\(0.9\\mu m\\) than at \\(0.55\\mu m\\), although \\(\\rho_{ground}(0.9\\mu m)=\\rho_{ground}(0.55\\mu m)\\). Why ?</p> <p><p>RB menu: terms to store. </p></p> <p>a) Folders in 'output / Bandx / RadiativeBudget' (x=0 &amp; 1) store cumulated RB: illudir (direct sun illumination), illudiff ('direct + diffuse' illumination), ITERX and possibly ITER1, 2,\u2026</p> <p>b) Types of RB products (text or binary files; possibly extrapolated for DART-FT): - Total RB (turbid + triangle): 1D profiles (z), images (x,y), 3D distribution (x,y,z). - Per type of triangle: mean value, image (x,y), 3D distribution (x,y,z). - Per individual triangle. with in: InR, out: OutR, intercepted: IntR, absorbed: AbsR, emitted: EmitR, scattered: ScaR radiation. Unit: %, \\(W/m^2/\\mu m, W/m^2, W/\\mu m\\) or W; (x,y): DART cell coordinates.</p> <p>c) Terms of the 3D total RB and terms of the RB of scene elements to store.</p> <p><p>Information from <code>dart.txt</code> file of DART-FT and DART-Lux. Display Menu <code>View Report / Data Files</code>.</p></p> <p><p>DART-FT 1D \\(RB_{\\Delta \\lambda}\\) per iteration. \\(0.55\\mu m\\) (left) and \\(0.9\\mu m\\) (right). Unit: %. <code>WP4/RadiativeBudget_profile.xlsx</code>.</p></p> <p>d) \\(RB_{facet}\\): the scene has 2 triangles (by default, an horizontal ground scene is made of 2 triangles). Check (see below) that:</p> <p>\\(RB_{\\lambda}\\) per type i of facet (RadiativeBudget Triangles ) = mean \\(RB_{\\lambda}\\) per facet face (type i) (<code>RadiativeBudgetFigures.txt</code> ) = ground 3D \\(RB_{\\lambda}\\) (<code>RadiativeBudget_3D_Ground</code> ).</p> <p>\\(RB_k\\) = cumulative over iterations \\(\\le\\) k: Radiation intercepted at iteration k-1 is scattered and absorbed at iteration k</p> <p>\\(\\implies Intercepted_{k-1} = Absorbed_k + Scattered_k\\). Example (ground, \\(0.9\\mu m: IntR_4 = 0.638, AbsR_4 = ScatR_4 = 0.319\\).</p> <p><p>\\(RB_{triangle,0.9\\mu m}\\) at Iter5 and IterX.</p></p> <p> File <code>RadiativeBudgetFigures.txt</code>: RB per triangle \\(\\implies\\) the 2 lines are for the 2 triangles. The RBs of the 2 triangles slightly differ due to DART-FT discrete illumination.  <code>File RadiativeBudget_Triangles</code>: mean values in <code>RadiativeBudgetFigures.txt</code> per type.  <code>File RadiativeBudget_3D_Ground</code>: \\(RB_{ground}\\). At ground level: \\(RB_{vegetation} = RBi{cell} - RB_{ground}\\).</p> <p>e) \\(RB_{\\lambda}\\) images \\((u_{xy} = \\sum_z u_{xy}(z))\\): RB terms of total scene (here: ground + turbid) and per type of facet (i.e., here: ground).</p> <p>Question</p> <p>Display the \\(RB_{\\lambda}\\) images with  in the DART image viewer, and check their values:     - imageInterceptedEnergy (intercepted / \\(m^2\\) scene): \\(W_{int}(x,y)= \\sum_z W_{int}(x,y,z).W_{int,0.55\\mu m}^{iterX} =126\\)%, \\(W_{int,0.9\\mu m}^{iterX}=306\\)%     - imageScatteredEnergy (scattered): \\(W_{scat}(x,y)=\\sum_z W_{scat}(x,y,z).IterX \\implies W_{scat, 0.55\\mu m}=34\\)%, \\(W_{scat,0.9\\mu m}=262\\)%     - imageEmittedEnergy (emitetd): \\(W_{emit}(x,y) = \\sum_z W_{emit}(x,y,z)\\). Here, there is no thermal emission \\(\\implies W_{emit}=0\\)%.     - imageAbsorbedEnergy (absorbed): \\(W_{abs}(x,y)= \\sum_z W_{abs}(x,y,z).IterX \\implies W_{abs,0.55\\mu m}=92\\)%, \\(W_{abs,0.9\\mu m}=45\\)%.     - imageAlbedoEnergy (Albedo): \\(W_{alb}(x,y)=1 - W_{abs}(x,y).IterX \\implies W_{alb,0.55\\mu m}=7.8\\)%, \\(W_{alb, 0.9\\mu m}=54.6\\)%.</p> <p><p><code>Simulation.properties.txt</code> (View / report / Simulation properties file): total \\(RB_{cell}\\) and \\(RB_{facet}\\) per facet area.</p></p> <p>WP4B-Lux (CT: 30\")</p> <p>The table below shows the RB parameters, RB vertical profiles and \\(RB_{facet}\\) for band 1. \\(RB_{profiles}\\) are consistent with DART-FT (reminder here): their accuracy increases with larger \\(N_{sample}\\) and smaller spatial sampling grid. \\(RB_{facet}\\) is accurate.</p> <p><p>RB parameters of DART-Lux, RB vertical profiles and facet RB for band 1.</p></p>"},{"location":"Tutorials/T4/t4.html#3-radiative-budget-of-a-3d-vegetation-cover-wp4c-ft-ct6s-and-wp4c-lux-ct94s","title":"3) Radiative budget of a 3D vegetation cover: WP4C-FT (CT:6s) and WP4C-Lux (CT:94s)","text":"<p>Objective: to use the tool \"Radiative Budget Extractor\" to extract 1D and 2D RB sections from the 3D \\(RB_{\\Delta \\lambda}\\).</p> <p>Scene (see below): \\(\\Delta X = \\Delta Y=6m, \\Delta x = \\Delta y = \\Delta z = 0.2m, \\rho_{ground} = 0.1, \\rho_{leaf} =\\rho_{leaf_deciduous}\\). \\(\u03a4_{leaf}= \u03a4_{ground}=300\u039a\\). Two vegetation plots {A: 1m x 1m x 2m centred at (1.5m, 1.5m); B: 1m x 1m x 3m centred at (3.5m, 4.5m)}, each one with \\(LAI_{plot} = 2\\). Three bands (\\(\\Delta \\lambda =0\\mu m\\)): \\(\\lambda =0.56\\mu m\\) (mode R), \\(0.9\\mu m\\) (mode R), \\(11\\mu m\\)  (mode T). \\(T_{atm} = 260K\\).</p> <p><p>a) DART scene. b) 3D view (X axis: blue, Y axis: red). c) DART nadir image \\((\\lambda=0.56\\mu m\\)).</p></p> <p>Question</p> <p>In the DART nadir image at \\(0.56\\mu m\\), plot A has a darker shadow than plot B (see the image c. below). Why?</p> <ul> <li>DART-FT: add () the 3D \\(RB_{0.56\\mu m}\\) to the scene 2D display in order to display it () (see below).</li> </ul> <p><p>Scene horizontal section XY=1 (), added 3D RB0.56\u00b5m () and cell data (: LAI, RB,\u2026).</p></p> <ul> <li>Apply 'Radiative Budget Tools / 3D Radiative Budget Extractor' (see below) to 3D \\(RB_{\\lambda}\\) to obtain 1D and 2D \\(RB_{\\lambda}\\).</li> </ul> <p><p>'RadiativeBudgetExtractor' tool.</p></p> <p>Using 3D RB, this tool derives () 1D profiles (x, y or z), 2D horizontal / vertical layers, can add / substract layers from 2 3D RB files, and adds and substracts RB files. Here, a 2D horizontal layer at altitude level 0 () is created. The resulting image products can be directly viewed ().</p> <p>Question</p> <p>1D IterX profiles of column (1m-1.25m, 1m-1.25m) of plot A for \\(0.56\\mu m, 0.9\\mu m, 11\\mu m\\) (see below). - Why does exitance (+ZfaceExit) decrease above plot A at \\(0.9\\mu m\\)? - Thermal emission occurs only at iteration 1. How can you verify it?</p> <p>Question</p> <p>2D RB binary images. The curves below show two \"% absorbed radiation\" images: level 0 (\\(z \\in [0;\\: 0.25m[\\)) and vertical sum. Since bottom cells of plot A contain ground (triangles) and turbid vegetation, their vegetation \\(RB_{\\Delta \\lambda}\\) is \"Cell \\(RB_{\\Delta \\lambda}\\)\" - \"Ground \\(RB_{\\Delta \\lambda}\\)\". Plot B absorbs more than plot A, although the 2 plots have the same LAI. Why?</p> <p><p>Vertical profiles (%f) of plot A radiative budget at location (1.5m, 1.5m). a) \\(0.56\\mu m\\). b) \\(0.9\\mu m\\). c) \\(11\\mu m\\).</p></p> <p><p>2D absorption. IterX. \\(\\lambda=0.56\\mu m\\). a) \\(z \\in [0;\\: 0.25m[\\). b) Vertical sum (equal to ImageAbsorbedEnergy).</p></p>"},{"location":"Tutorials/T4/t4.html#4-radiative-budget-of-a-tree-3d-object-wp4d-ft-ct-46s","title":"4) Radiative budget of a tree 3D object: WP4D-FT (CT: 46s)","text":"<p>Objective: to compute and display the 3D \\(RB_{\\Delta \\lambda}\\) per triangle. Only DART-FT because CT of DART-Lux is much larger.</p> <p>Scene: 40m x 40m, \\(\\Delta x=\\Delta y=\\Delta z=0.5m\\), \\(\\rho_{ground}=0.5, \\rho_{trunk}=\\)bark spruce, \\(\\rho_{leaf}=\\)grass rye. \\(\\lambda=0.56\\mu m\\). 3D tree in DART database <code>\\3D_Objects\\Tree\\Accurate_Trees\\Cherry_tree\\Merisier_Adulte.obj</code>; scale factor = 40.</p> <p>Products: DART-FT nadir image + RB per facet (unit: \\(W/m^2/\\mu m\\)); ASCII or binary file 'RadiativeBudgetFigures' where the order of facets is as in the <code>Triangle.txt</code> (binary; export in ASCII with menu 'View/Report/Triangle\u2026') that stores the coordinates, indices of optical and temperature properties and type of triangles (see below).</p> <p><p>a) The tree 3D object. b) DART-FT nadir image: \\(\\Delta r=0.5m\\) c) DART-Lux nadir image: \\(\\Delta r=0.2m\\)</p></p> <p><p>Information per triangle. a) <code>Triangle.txt</code>: coordinates &amp; type (ground: 2,...). b) RadiativeBudgetFigures: \\(RB_{\\Delta \\lambda}\\).</p></p> <p>Display facet and voxel RB with the tool View\\3D Radiative Budget. \\(RB_{ground}\\) has 2 values for default ground (2 triangles: the image a. below); it improves for ground with many facets (e.g., ground = DART created horizontal DEM: the image b. below).</p> <p><p>3D radiative budget. Facet: a) No DEM, b) DEM. \\(E_{int}\\in[0 14639W/m^2/\\mu m]\\). c) Voxel: \\(E_{int} \\in [10^{-7}\\: 2872W/m^2/\\mu m]\\).</p></p>"},{"location":"Tutorials/T4/t4.html#5-sun-induced-fluorescence-sif-of-a-single-leaf-wp4e","title":"5) Sun Induced Fluorescence (SIF) of a single leaf: WP4E","text":"<p>Objective: DART-FT and Lux SIF for 2 photosystems (PS1, PS2) and 1 combined photosystem for 4 cases (see below).</p> <p>Scene: 0.1x0.1m. Horizontal/oblique leaf (<code>square.obj</code>): \\(25 cm^2\\), z=0.1m. 90 bands: \\([0.4;0.85\\mu m]\\). \\(\\Omega_{sun}(30\u00b0, 225\u00b0)\\), SKYL = 0.</p> <p>Products: unset 'BRF products'. DART-FT: \\(1^{st}\\) order, \\(N_{iter}=15\\), added nadir direction (no image creation). DART-Lux: add nadir direction (image creation; default resolution \\(\\implies\\) image = 1 pixel). \\(N_{samples}=10^3\\). \\(N_{scene\\: repetition}=10\\). \\(N_{iter}=1\\); 30.</p> <p>4 sequences: DART- Lux {\\(N_{iter}\\): 1; 30. \\(\\Omega_l\\): nadir ; \\(\\Omega_{sun}.\\rho_{ground}\\) : 0; 1} and DART- FT {\\(\\Omega_l\\): nadir ; \\(\\Omega_{sun}.\\rho_{ground}\\): 0; 1} for 2 &amp; 1 PS.</p> <p>Note</p> <p>The \"phase\" module computes fluorescence matrices. Run it only once, if it is too computer intensive.</p> <p>The curves below show the scene nadir SIF nadir radiance for the 4 cases of the table below.</p> <p>Question</p> <p>At any scattering order with \\(\\rho_{ground}=0\\), the leaf orientation impacts leaf radiance but not scene radiance. Why?</p> <p>Question</p> <p>Relative to the second peak of PS2 radiance, the first peak of PS2 radiance decreases from Iter1 to IterX. Why?</p> <p>Question</p> <p>Relative difference 'DART-FT - DART-Lux' radiance per PS: \\(&lt; 2 \\times10^{-7}\\) at iter1, \\(&gt; 5\\times 10^{-2}\\) at iterX, and tends to 0 with larger \\(N_{directions}\\) and smaller spatial resolution \\(\\Delta x\\) for DART-FT, and larger \\(N_{scene\\: repetition}\\) for DART-Lux (\\(\\implies\\) larger CT). Why?</p> <p>Note</p> <p>Because usual scenes are much larger than 0.1m, the DART-Lux default \\(N_{scene\\: repetition} = 1\\) is usually adequate.</p> <p><p>4 cases: \\(\\Omega_l\\), 1 or 2 PS, \\(\\rho_{ground}\\), leaf biochemistry (e.g., Lopex &amp; Angers.xlsx databases) and fqe.</p></p> <p><p>Scene nadir radiance. a) DART-FT, 2 PS. b) DART-Lux, 2 PS. c) DART-FT, 1 PS. d) DART-Lux, 1 PS.</p></p>"},{"location":"Tutorials/T4/t4.html#6-fluorescence-of-a-maize-field-classification-of-sun-shade-adapted-leaves-wp4f","title":"6) Fluorescence of a maize field classification of sun / shade adapted leaves: WP4F","text":"<p>Scene: </p> <p></p> <ul> <li>1.5 x 1 m. \\(\\Delta x=\\Delta z=0.05m\\). NASA site: 39.03\u00b0N, 76.85\u00b0E (UTC=-5). 2015/06/21, local time. 1 band \\([0.4; \\:0.7 \\mu m]\\). \\(5\\times 10^{-4}\\) m illumination step. Leaf: grass rye. Soil: loam gravelly brown dark. </li> <li>The ground (facet) has a spatially accurate RB only if it has enough facets (default ground is made of 2 triangles). Therefore, import a 3D object 'DEM' (here: product <code>dsm.obj</code> of Maket module, with option 'Horizontal DEM' and \\(\\Delta x=_Delta y=0.05m\\)), then use it as a DEM;</li> <li>Maize field (<code>Maize_field_6.txt</code>) of 6 plants (<code>Maize_InField_1m.obj</code>) from DART database.</li> <li>Atmosphere: analytic model (\\(\\implies\\) no TOA results). Gas: USSTD76. Aerosol: RURALV23.</li> </ul>"},{"location":"Tutorials/T4/t4.html#6a-wp4fa","title":"6.A -  WP4Fa","text":"<p>Objective: to classify leaves (facets) as sun / shade adapted leaves, to assign them specific quantum yields in WP4Fb.</p> <p>Context: a leaf (here: facet) is often classified as sun- (i.e., past high irradiance \\(E_l\\)) or shade- (i.e., low \\(E_l\\)) adapted since its SIF at time t depends on its \\(E_l(t)\\) and biochemistry (Cab, Car, EWT,\u2026) that depends on its past \\(E_l\\).</p> <p>Step 1: compute facet irradiance \\(E_{facet}(W/m^2/\\mu m)\\), in \\(RB_{facet}\\), from 5h to 20h (16 steps of 1h) with DART sequence \"seq_Hour\"; only store \"intercepted radiation\" for facet RB to reduce computer demand. DART-FT: facet order in RB is as in <code>triangles.txt</code>, where it changes per run of Maket module. Since it must be time constant (Q days, M hours / day) to combine \\(E_{facet}\\) data, only run Maket in the sequence \"root\" simulation. DART-Lux \\(RB_{\\lambda}\\) products: the order of facets is fixed. It is given by the *.ply files. Here, DART-FT simulates facet RB because the below classification module is not yet adapted to DART-Lux.</p> <p>Step 2: create a 3D object with classified leaves (sun- and shade-adapted leaves). Apply ClassifySunShadeLeaves.py (folder python_script/Fluorescence) to RBfacet (file RadiativeBudgetFigures that stores Efacet) at Q.M dates. It classifies facets in Nveg type user defined vegetation types into Nclass irradiance classes, then groups all or part of facets as a 3D object as Nclass.Nveg type groups. 2 classification methods exist. Here (see the table below), method 1 is used; it gives shade- and sun-adapted facets using thresholds 350 and 500.</p> <ul> <li>Classification method 1 (Zbynek): 2 thresholds H (high) and L (low). Facet classification per day: number of times \\(E_{facet} &gt; H\\) (\\(\\implies\\) N_H_dayD) or &lt; L (\\(\\implies\\) N_L_dayD) per day.</li> </ul> <p>\\(\\implies\\) If N_H_dayD &gt; N_L_dayD then the facet class for the given day is sun; else it is shade. Facet classification for the Q days: facet status = median value of all \"facet day classes\". Hence, a facet is \"sun\" if its \"day classification\" gave more \"sun class\" than \"shade\"; else, it is \"shade\".</p> <ul> <li>Classification method 2: K thresholds \\(\\implies\\) the Q.M Efacet values per facet \\(\\in\\) K+1 intervals of facet irradiance distribution E(k). It is an histogram if the K thresholds are equally spaced. \\(k_{max}\\) is the interval where E(k) is maximal, and \\(Pop_{below}\\) (\\(Pop_{above]}\\)) the number of elements with \\(k &lt; k_{max}\\) \\((k &gt; k_{max})\\) (see below).</li> </ul> <p>Rule (non biological): if (\\(k_{max} &gt; \\frac {K+1} {3}\\)) and (\\(Pop_{above} &gt; Pop_{below}\\)) then facet is 'sun'; else it is 'shade'.</p> <p>Note</p> <p>The distribution \\(\\mathcal{E}(k)\\) of \\(E_{facet}\\) in K+1 intervals could be used for designing better classification rules.</p> <p>Question</p> <p>Check with <code>\u2026\\WP4Fa_FT\\OBJ_classification\\WP4Fa_FT.txt</code> that threshold [200 350] gives 76% sun adapted leaves.</p> <p>Question</p> <p>Display the 3D RB at 8h, 12h and 17h with threshold (see the image c. below) and the resulting 3D object (see the image d. below).</p> <p><p>Facet classification method 2. It becomes similar to method 1 if K=2. If K=1: \\(k_{max} =1\\).</p></p> <p><p><code>WP4Fa_local.bat</code> (Windows system): example of batch of Python module <code>ClassifySunShadeLeaves.py</code>.</p></p> <p><p>a) Maize field. b) Scene total/direct/diffuse spectral irradiance and exitance. c) 3D \\(RB_{\\lambda}\\) at 8h, 13h and 18h. d) Resulting 3D object with 2 groups: sun adapted leaves (red) and shade adapted leaves (dark green).</p></p>"},{"location":"Tutorials/T4/t4.html#b-wp4fb_lux","title":"b) WP4Fb_Lux","text":"<p>Objective: maize field SIF during a day \\((\\Delta t=1h)\\), using the 3D object <code>sun / shade leaves</code> created by WP4Fa.</p> <ul> <li> <p>Save WP4Fa as WP4Fb. Set 90 bands \\(\\in\\) [400 - 850nm], replace the field of 3D maize plants by the 3D maize field in WP4Fa\\OBJ classification, and assign to its 2 groups the optical properties of sun- / shade-adapted leaves (see below).</p> </li> <li> <p>Run DART-Lux: \"no products\", only add the nadir direction. \\(\\Delta r = 1m\\), \\(N_{samples} = 10^3\\), \\(N_{scat} = 20\\), \\(N_{scene\\: repetition} = 10\\).</p> <ul> <li>Create a LUT that stores the canopy SIF from 5h to 20h \\((\\Delta t=1h\\)), only for the added direction (see the figure below).</li> </ul> </li> </ul> <p>Question</p> <p>Morning and afternoon PSI / PSII SIF radiance is symmetric to 12h. Why?</p> <p><p>Leaf structure (N), biochemistry (Cab, Car, EWT, LMA) and fluorescence quantum efficiency.</p></p> <p><p>PSI / PSII SIF radiance a) Spectra at 7h, 9h, 13h and 17h. b) Daily variation at 745nm. c) 2mm RGB images at 5h and 13h, and PS1 nadir image at 13h at 743nm; they are separately simulated.</p></p> <p>Question</p> <p>SIF simulation of turbid-defined vegetation created as facets: leaf back/front face lambertian optical properties are automatically derived from the turbid-defined vegetation optical property. <code>ClassifySunShadeLeaves.py</code> uses the Lambertian label (i.e., 0) and index of this label; the later ones are in the <code>simulation.properties.txt</code> file.</p>"},{"location":"Tutorials/T4/t4.html#7-coupling-dart-and-scope-models-wp4g","title":"7) Coupling DART and SCOPE models: WP4G","text":"<p>Objective: DART SIF with influence of biophysical conditions (temperature,\u2026) simulated by SCOPE (i.e., Eta factors).</p> <p>Scene: 1 x 1 x 1 m plot: turbid medium (SCOPE, DART-Lux) or \\(10^{-3} m^2\\) facets (DART). Parameters (see below): irradiance file (\\(\\implies\\) no option \"solar constant\"),\u2026 \\(\\theta_{sun}=30\u00b0, \\phi_{sun}=0\u00b0\\). 2 viewing directions: nadir, \\((\\theta_v=30\u00b0, \\phi_{sv}=180\u00b0\\)).</p> <p>DART-FT: \\(\\Delta x=\\Delta y=\\Delta z=0.25m\\). \\(Step_{illumination} = 0.001\\). \\(Threshold_{exitance} = 10^{-4}\\). \\(N_{iterations} = 20\\). CT = 22' (last iteration: 12). DART-Lux: \\(N_{scattering} = 30\\), \\(N_{samples} = 500\\), \\(N_{scene\\: repetition} = 40\\), \\(Pixel_{size} = 1m\\). \\(CT_{facet} = 1'30\"\\). \\(CT_{turbid} = 4'30\"\\) + \\(CT_{phase} = 7'\\).</p> <p>DART and SCOPE: parameters are in the table below, and results are in <code>SCOPE_DART.xlsx</code>.</p> <p><p>DART and SCOPE input parameters.</p></p> <ul> <li>Compute the 3D plot with sun- and shade-adapted facets: WP4Ga</li> </ul> <p>Run Maket module {ground + 1x1x1m turbid plot, \\(3\\times 10^{-5} m^2\\) facets} to create the object <code>turbid.obj</code> whose you you comment out the 2 ground facets using \"// f 1 2 3\" and \"// f 4 5 6\".</p> <ul> <li> <p>Create a 3D object with 2 groups (sunlit- and shaded leaves), using DART-FT: WP4Gb</p> <ul> <li>Run Directions, Phase, and Maket modules; \\(5\\times 10^{-4}\\) m \\(step_{illumination}\\), \\(\\rho_{ground}=0\\), \\(\\Delta x=\\Delta z=0.25m\\).</li> <li>Get facet RB of <code>turbid.obj</code> with sequence {\\(\\theta_s=30\u00b0\\)}. Then, classify it as a 3D object with 2 groups.</li> </ul> </li> <li> <p>Simulate \\(\\rho_{scene}\\) and \\(L_{PS}\\) without / with impacting bioclimatic factors (i.e, SCOPE Eta factors):WP4Gc Results are for turbid medium (SCOPE, DART-Lux) and facets (DART-FT, DART-Lux), using WP4Gb's 3D object.</p> <ul> <li>Without SIF impacting bioclimatic factors:</li> </ul> </li> </ul> <p>The image a. below shows SCOPE, DART-FT and DART-Lux \\(\\rho_{scene} / L_{PS1} / L_{PS2}\\), for the case \"2 photosystems\". Small differences are due to differences in mock-ups (i.e., a set of many small facets is not exactly a turbid medium), parameters and modeling (e.g., \\(turbid_{SCOPE} \\neq turbid_{DART}\\)).</p> <p>The image b. below shows how DART-Lux \\(\\rho_{scene,0.85\\mu m}\\) and computer time CT vary with \\(N_{samples}(50, 10^2, 500, 10^3, 5\\times 10^3, 10^4, 2\\times 10^4, 5\\times 10^4, 10^5)\\) for facet and turbid; e.g., if \\(N_{samples} &gt; 5\\times 10^3\\), DART-Lux relative error and \"DART-Lux - DART-FT\" relative difference are &lt; 10-2. \\(CT_{DART-Lux}\\) greatly increases with the number \\(N_{SIF}\\) of SIF bands, nearly as \\(N_{SIF}^3\\) simulating SIF with \\(N_{SIF} = 451\\) can increase CT by \\(2\\times 10^4\\) !</p> <p>The image c. below shows DART \\(\\rho_{scene} / L_{PS}\\) for the case \"1 photosystem\".</p> <p>Note</p> <p>Convergence is much faster with larger scenes. Indeed, here, the scene size is very small, which implies a large \\(N_{scene\\: repetition}\\) (i.e., 40), which slows down convergence. Resulting accuracy is driven by \\(N_{samples} x N_{pixels}\\) for scene values and \\(N_{samples}\\) for pixel values (here, \\(N_{pixels} = 1\\)). Scene values converge \\(N_{pixels}\\) times faster than pixel values.</p> <ul> <li>With SIF impacting bioclimatic factors:</li> </ul> <p><p>SCOPE and DART-FT/Lux of facet f and turbid t defined vegetation (SCOPE_DART.xlsx)</p></p> <ul> <li>No bioclimate factors: a) \\(\\rho_{scene}\\), \\(L_{PS1}\\) and \\(L_{PS2}\\) (\\(N_{sample} \\approx 500\\)). b) DART-Lux \\(\\rho_{scene}(0.85\\mu m)\\) and computer time with \\(N_{samples}\\). c) DART-Lux: \\(\\rho_{scene}(0.85\\mu m)\\) and \\(L_{PS2}(0.742\\mu m)\\), for facets and turbid medium as a function of \\(N_{samples}\\). d) DART-Lux \\((N_{sample}=5000)\\) with 1 PS (default fqe = 0.012) \"facet\" and \"turbid\" (CT \\(\\approx\\) 8').</li> <li>Bioclimate factors: d).</li> </ul> <p>Work in progress</p>"},{"location":"Tutorials/T5/t5.html","title":"WP5 - Fluids and CoverMap importation","text":"<p>Objective: to import a land/fluid cover map, to manage fluids, etc.</p> <p><p>Only parameters that must be modified are indicated.</p></p> <p>Warning</p> <p>DART-Lux does not import yet ground plots</p>"},{"location":"Tutorials/T5/t5.html#1-cover-map-importation-wp5a-ct10","title":"1) Cover map importation: WP5A (CT=10\")","text":"<p>Objective: to import a CoverMap (i.e., land cover / fluid raster image) with the CoverMapImportation tool.</p> <p>Create the plots: 2 options are possible:</p> <p>Tool \"CoverMapImportation\" (see the image c. below) it creates 1 plot from adjacent pixels in a row of a raster image CoverMap (here: CoverMapExample; value \\(P_i\\) = 1, 3, 5, 7) with same \\(P_i\\) and type \\(i\\) (here: 0: ground, 1: vegetation, 2: ground + vegetation; properties: LAI, \\(\\rho_{ground}\\),\u2026) stored in an information text file (here: <code>CoverMapExample.txt</code>, Table). It stores the created plots into the file plots.xml or the file input/plots.txt, and creates the optical and temperature properties indicated in the information file. It is run before the Maket module with the menu \"Run/Properties:  ), the menu \"Run/  ) or the Editor ().</p> <p>Importation of plots from a <code>plots.txt</code>file. The GUI does not display the plots, which makes it faster if there are many plots. The indices of the optical and temperature properties in the plots.txt must be consistent.</p> <p>Run DART for 2 sun directions: \\((\\theta_s=0\u00b0, \\phi_s=0\u00b0)\\) and \\((\\theta_s=30\u00b0, \\phi_s=225\u00b0\\)) (see below)</p> <p>Question</p> <p>Environmental effects between plots are much larger for \\(\\theta_s=30\u00b0\\) than for \\(\\theta_s=0\u00b0\\). Why?</p> <p><p>CoverMap. a) <code>CoverMapExample.mp#</code>. b) Part of <code>CoverMapExample.txt</code>. c) DART-FT and DART-Lux mock-ups. \\(\\rho_{0.56\\mu m}\\) and \\(T_{10\\mu m}\\) DART-FT nadir images: d,e) \\(\\theta_s = 0\u00b0\\); f,g) \\(\\theta_s = 30\u00b0, \\phi_s = 225\u00b0\\).</p></p>"},{"location":"Tutorials/T5/t5.html#2-cover-map-combined-with-raster-dem","title":"2) Cover map combined with raster DEM","text":"<p>Objective: to illustrate how the 3 DART modes (\"repetitive\", \"isolated\", \"infinite slope\") of scene creation with a Digital Elevation Model (DEM) influence the simulation of remote sensing images (see below):</p>"},{"location":"Tutorials/T5/t5.html#2a-wp5ba_ft-ct16-26","title":"2.a WP5Ba_FT (CT=16\" -26\")","text":"<p>Scene: 4.9 x 5.4km (Bassies, Fr). \\(T_g=273K\\), \\(\\Delta T=10K\\). \\(\\rho_{g,0.56\\mu m}=0.25\\), \\(\\rho_{g,10\\mu m}=0.09\\). \\(\\theta s=30\u00b0\\), \\(\\phi s=0\u00b0\\). TOA \\(\\rightarrow\\) BOA: Analytic. DEM (Figure 216.a): <code>DART/database/Bassies/DEM_Bassies_50.mp#</code>: 98 lines, 108 col, \\(\\Delta x,y=50m\\), double little endian. DART-FT: \\(\\Delta x,y,z: 50m\\). $\\Delta_{illu}: 5m. \\(Area\\ subdivision_{thermal\\ emission}: 10m^2\\). DART-Lux: \\(\\Delta r=50m\\).</p> <p>Figure below shows results for the 3 scene creation modes (\"Repetitive\", \"Infinite\" and \"Isolated\" scenes):</p> <p>1) Computer time (CT), and \\(\\bar{\\rho}_{scene}^{nadir}\\)  and \\(\\bar{\\rho}_{\\blacksquare}^{nadir}\\)  of a sub-zone \\(\\blacksquare\\) (28, 47) - (31,50), stored as a \"mask\", at 0.56\u00b5m.</p> <p>2) The three 3D scenes and their DART-FT nadir images at 0.56\u00b5m and 10\u00b5m.</p> <p>3) Per scene mode: xz section (y=0), and nadir and oblique \\((\\theta_v=75\u00b0, \\phi_v=315\u00b0)\\) images \\(\\rho_{0.56\\mu m}\\) and \\(T_{B,0.56\\mu m}\\). \\(\\rho\\)  and \\(T_B\\)  depend on the scene mode, especially for oblique directions \uf057v since the viewed scene depends on the mode.</p> <p>4) \\(\\overline{\\rho}(\\theta_v,\\phi_v)\\) and \\(\\overline{T}_B(\\theta_v, \\phi_v)\\) at \\(0.56\\mu m\\) and \\(10\\mu m\\).</p> <p>Question</p> <p>DART-Lux: CT decreases if only the nadir image is simulated. Then, there is no BRF map \\(\\bar{\\rho}(\\theta_v,\\phi_v)\\) and \\(\\bar{T}_B(\\theta_v,\\phi_v)\\)\u2026.</p> <p></p> <p><p>DART 3 scene creation modes: 'Repetitive', 'Infinite slope', and 'Isolated'. a) DEM. b) CT, \\(\\overline{\\rho}\\) and \\(\\rho\\) (sub-zone : (28, 47) - (31,50)) at \\(0.56\\mu m\\), using image tool Stats. c) 3D scene view (intrinsic rotation: 280.8\u00b0, nutation: 30\u00b0, precession: -30\u00b0), and DART-FT nadir images \\((0.56\\mu m, 10\\mu m)\\). d) Scene xz section (y=0), DART-FT / Lux images \\((0.56\\mu m, 10\\mu m; \\theta_v=75\u00b0, \\phi_v=315\u00b0)\\). e) \\(\\overline{\\rho}(\\theta_v,\\phi_v)\\), \\(\\overline{T}_B(\\theta_v,\\phi_v)\\); \\(\\phi_{origin} =\\) North-South.</p></p>"},{"location":"Tutorials/T5/t5.html#2b-scene-with-dem-and-covermap-bassies_nosnow50mp-wp5bb_lux-and-wp5bb-ft-ct24","title":"2.b - Scene with DEM and CoverMap Bassies_NoSnow50.mp#: WP5Bb_Lux and WP5Bb-FT (CT=24\")","text":"<p>Import CoverMap <code>Bassies_NoSnow50.mp#</code>: float little endian, description file <code>Bassies_CoverMap_Descriptor.txt</code> (bare rock: 2, vegetation: 3, 273K).</p> <p>Question</p> <p>\\(\\overline{\\rho}_{0.56\\mu m}(\\Omega)\\) and \\(\\overline{T}_{B,10\\mu m}(\\Omega)\\) depend on the scene creation mode (see below). Why?</p> <p></p> <p><p>The 3 scene creation modes. a) Bassies CoverMap. b,c) Same legend as the previous image .</p></p>"},{"location":"Tutorials/T5/t5.html#3-transmittance-reflectance-and-brightness-temperature-of-a-1m-thick-air-layer-wp5c","title":"3) Transmittance, reflectance and brightness temperature of a 1m thick air layer: WP5C","text":"<p>Objective: \\(0.56\\mu m\\) and \\(10\\mu m\\) nadir direct transmittance \\(t_{dir}\\), diffuse transmittance \\(t_{diff}\\), reflectance \\(\\rho_{scene}\\) and brightness temperature \\(T_{B,scene}\\) of a 1m thick layer of Rayleigh gas (molecule: cross section \\(\\sigma_{R,0.56\\mu m}=4.20128 \\times10^{-31} m^2\\), \\(\\sigma_{R,10\\mu m}=3.11543\\times 10^{-36} m^2\\), single scattering albedo \\(\\omega_R =1\\), phase function \\(\\frac {P_r} {4\\pi}\\), density \\(N_{mol}\\), temperature \\(T_{mol}\\)). Here: \\(\\theta_{sun}=0\u00b0\\).</p> <p>Approach: a DART plot filled with air over a lambertian surface (\\(\\rho_{g,0.56\\mu m}=1\\), \\(\\rho_{g,10\\mu m}=0, T_g=300K\\)) simulates a gas layer of depth \\(\\Delta h_{plot}\\). Then: \\(t_{dir,\\lambda} = e^{-\\Delta \\tau_{\\lambda}}\\) with layer optical depth \\(\\Delta \\tau_{\\lambda} = N_{mol}.\\sigma_{\\lambda}.\\Delta h_{plot}\\).</p> <p>Scene: 1x1m. No atmosphere RT (\\(E_{BOA,\\lambda} = E_{TOA,\\lambda}\\), SKYL=0). \\(\\theta_s=0\u00b0\\). Plot 1x1m. \\(h_{bottom}=1m\\), \\(\\Delta h=1m\\)) filled with \"Rayleigh air\". \\(N_{mol}=5.9505674461 \\times 10^{29} m^{-3}\\). DART-FT: \\(\\Delta x=1m, \\Delta z=1m\\). DART-Lux: \\(\\Delta r=1m.\\)</p> <p>Direct transmittance \\(t_{dir,\\lambda}\\): WP5Ca</p> <p>\\(t_{dir,\\lambda}\\) is derived from order 1 reflectance \\(\\rho_{plot,\\lambda}^1 = (t_{1,\\lambda})^2\\) and \\(t_{1,\\lambda} =\\%E_{ground}^{IlluDir}\\) for \\(\\lambda = 0.56\\mu m\\) and \\(10\\mu m\\); for that, we set \\(\\omega_R = 0\\) (i.e., null multiplicative factor) so that order 1 upward radiation from the air layer comes only from the ground.</p> <p>Question</p> <p>Verify: \\(\\Delta \\tau_{0.56\\mu m} = 0.25\\), \\(\\Delta \\tau_{10\\mu m} = 1.85\\times 10^{-6}\\), \\(\\rho_{plot,0.56\\mu m} = 0.6065\\) (\\(\\implies t_{1,0.56\\mu m} = 0.779\\)), \\(\\%E_{ground,0.56\\mu m}^{IlluDir} = 0.779\\), \\(\\rho_{plot,10\\mu m} = 6.86\\times 10^{-7} .6065\\) (\\(\\implies t_{1,10\\mu m} = 0.9999982\\)), \\(\\%E_{ground,10\\mu m}^{IlluDir} = 0.999998\\).</p>"},{"location":"Tutorials/T5/t5.html#4-order-1-reflectance-of-a-scattering-air-layer-copy-of-wp5c-wp5d-ct1","title":"4) Order 1 reflectance of a scattering air layer (copy of WP5C): WP5D (CT=1\")","text":"<p>Objective: to compare order 1 reflectance (see below) of a gas layer (optical depth \\(\\Delta \\tau_{air}\\), Rayleigh molecules: \\(\\omega =1\\)) of a DART plot filled with air (\\(\\rho_{1,plot}\\): WPDa), a DART atmosphere layer (\\(\\rho_{1,atm}\\): WPDb) and an equation (\\(\\rho_{1,eq}\\): <code>WP5.xls</code>).</p> <p>Scene: 20m x 20m. \\(\\rho_{ground} = 0.56\\mu m\\). \\(\\theta_{sun}=0\u00b0\\), SKYL=0. \\(\\lambda = 0.56\\mu m\\). Forward mode: \\(\\Delta x=\\Delta y=20m, \\Delta z=0.05m\\).</p> <ul> <li>WP5Da: plot. \\(\\Delta h_{plot}=1m.\\) 'rayleigh_air'. \\(N_{mol}: 5.9510^{28} m^{-3}\\), \\(5.9510^{29} m^{-3}\\), \\(5.9510^{30} m^{-3}\\) \\(\\implies\\) \\(\\tau_m= \\Delta h.N.\\sigma\\) : 0.025, 0.25, 2.5.</li> <li>WP5Db: atmosphere \\(\\rho_{1,atm,DART}\\) with 3 optical depths of WP5Da; option 'Atmosphere with user defined parameters'.</li> <li>Equation (WP5.xls): \\(\\rho_{1,eq}(\\tau_m, \\Omega_s \\rightarrow \\Omega_v)=\\frac {\\omega.P_m(\\Omega_s \\rightarrow \\Omega_v)} {4.(\\mu_v - \\mu_s)}.(1 - e^{\\frac {\\tau_m} {\\mu_s} - \\frac {\\tau_m} {\\mu_v}})\\), where \\(P_m=a.(1 + cos^2(\\psi_{sv})) + c\\), \\(a=0.719, c=0.04127, \\omega=1\\)</li> </ul> <p><p>Order 1 reflectance: analytical, fluid plot and atmosphere for 3 air optical depths (0.025, 0.25, 2.5).</p></p> <p>Discrete scattering functions \\(\\int_{\\Delta \\Omega_{out}} \\frac {P(\\Omega_{in} ,\\Omega)} {4\\pi}.d\\Omega\\) of volumes (i.e., turbid medium, fluid) are stored as binary files in folder \"output/ lib_phase\". Option <code>View / Scattering functions</code> (see the image a. below) exports them as txt files. Option \"Directions 3D View + Choose \\(X(\\theta,\\phi)\\)\" displays them (see the image b. below): for {\\(\\Omega_{in}= \\Omega_s\\) , \\(\\Omega_{out} = any direction \\Omega_n\\) ; here: \\(\\Delta \\Omega_n \\approx 0.12628\\) except \\(\\Delta \\Omega_0 \\approx 0.09546\\)} and {\\(\\Omega_{in}=\\) angular sector \\(\\Omega_{sector}, \\Omega_{out} = \\Omega_ n\\)).</p> <p>Question</p> <p>Verify that \\(\\int_{\\Delta \\Omega_{out}} \\frac {P(\\Omega_{in} ,\\Omega)} {4\\pi}.d\\Omega \\approx \\frac {P(\\Omega_{in} ,\\Omega_{out})} {4\\pi}.\\Delta \\Omega_{out}\\) and \\(\\frac {P(\\Omega_{sector}, \\Omega_n)} {4\\pi}\\) is azimuthally symmetric (i.e., same value for all directions with same \\(\\Psi_{sector,n}\\)) and symmetric relative to the plane that is perpendicular to the incident direction.</p> <p><p>Discrete Rayleigh scattering function \\(\\int_{\\Delta \\Omega_{out}} \\frac {P(\\Omega_{in} ,\\Omega)} {4\\pi}.d\\Omega\\) (binary file 0.rayleigh_air_ScatteringFunction. a) Option 'View / Scattering functions': scattering from sun direction + 10 sectors (0 - 9) \\(\\rightarrow\\) all DART directions. b) Option 'View / Directions 3D View' + overlay \\(\\frac {P(\\theta, \\phi)} {4\\pi}.\\Delta \\Omega\\) on the sphere. Incident: sun (left), sector 1 (right).</p></p>"},{"location":"Tutorials/T5/t5.html#5-bi-directional-reflectance-of-a-snow-layer-wp5ea-and-wp5eb","title":"5) Bi-directional reflectance of a snow layer: WP5Ea and WP5Eb","text":"<p>Objective: to apply in WP5Eb an analytic \"snow layer bi-directional reflectance factor (BRF)\" computed in WP5Ea.</p> <p>Scene: 1x1m, \\(\\Delta z=0.1m\\), {\\(0.55\\mu m\\), \\(1\\mu m; \\Delta \\lambda=0\\mu m\\)}. Fluid plot: 1x1x1m, snow (fluid.db: \\(\\sigma_{snow}=7.854 \\times10^{-7}m^2\\), \\(\\omega_{0.5\\mu m} \\approx 0.999991\\), \\(\\omega_{1\\mu m} \\approx 0.99646\\)), \\(10^9\\) particles/\\(m^3\\). \\(Max(N_{iterations}): 10^2\\). Threshold: 0 to stop rays/iterations. \\(\\theta_s =50\u00b0\\), \\(\\phi_s =225\u00b0\\). Upward region ( \\(\\Delta \\Omega =6.29sr\\) ): 400 directions (see below). An Henyey Greenstein function simulates snow scattering phase function (asymetric factor: 0.85582 at \\(0.55\\mu m\\), 0.85999 at \\(1\\mu m\\)).</p> <p><p>a) 400 directions (\\(\\Delta \\Omega_{upward \\:region}=6.29sr)\\). b) \"snow\" optical property. c) Fluid plot property.</p></p> <p>Question</p> <p>Check in <code>dart.txt</code> file that scene albedo is 0.999895 at \\(0.55\\mu m\\) and 0.959668 at \\(1\\mu m\\).</p> <p>To decrease computer time and memory, large scenes can be simulated as ground surfaces whose reflectance is an analytic BRF model derived from the fit of the BRF of part of the scene. The tool \"Computation of parametric model coefficients\" does this fit for a few analytic models. The following image b. shows the snow BRF fitted with the Hapke and RPV models, with directions \\(\\theta_v &lt; 60\u00b0\\). WP5Eb illustrates that the BRF of the resulting scene is that of the fitted model.</p> <p><p>BRF of a 1m deep snow layer. \\(\\lambda=0.55\\mu m\\). \\(\\theta_s =50\u00b0, \\phi_s =225\u00b0.\\) DART (x) and sun (\u2022) directions. Initial BRF: a) \\(\\theta_v&lt;60\u00b0\\); b) \\(\\theta_v&lt;60\u00b0\\). c) Hapke coefficients (coefficients Hapke files in Bandx folders). d) Hapke (top) and MRVP (bottom) fitted \\((\\theta_v&lt;60\u00b0)\\) BRF and \"Initial - Fitted\" BRF.</p></p>"},{"location":"Tutorials/T5/t5.html#6-reflectance-of-a-water-volume-wp5f","title":"6) Reflectance of a water volume: WP5F","text":"<p>Objective: to illustrate how to simulate a water volume, including refraction and specular reflectance. The option \"Hidden\" that hides scene elements allows one to quantify the impact of each element on scene reflectance.</p> <p>Scene: 8x12m. Fluid plot: 8x8x1m. <code>Fill Mode</code>: maximum filling altitude=1m, Particle density=\\(5 \\times10^{16} m^{-3}\\). \\(\\lambda=0.75\\mu m\\). \\(\\theta_s =30\u00b0, \\phi_s =270\u00b0.\\) 2 viewing directions: (\\(\\theta_v =0\u00b0, \\phi_v =0\u00b0\\)), \\((\\theta_v =30\u00b0, \\phi_v =90\u00b0)\\).</p> <p></p> <p><p>Water and tree: mock-up (a) and DART images: satellite nadir (b) and oblique camera (c).</p></p>"},{"location":"Tutorials/T6/t6.html","title":"WP6 - Trees - creation and importation","text":"<p>Objective: spatial distribution of DART-created and imported trees, possibly using fields (i.e., xy location,\u2026 per tree).</p> <p><p>a) Parameters to set: Forward (DART-FT) and Bi-directional (DART-Lux) modes. b) File <code>trees_WP6.txt</code> in simulation input folder. It can be the edition of file trees.txt in DART database.</p></p>"},{"location":"Tutorials/T6/t6.html#1-tree-creation-wp6a","title":"1) Tree creation: WP6A","text":"<p>Objective: the 3 DART methods (, , ) to get DART-created trees.</p> <p></p>"},{"location":"Tutorials/T6/t6.html#1a-turbid-tree-option-exact-location-random-dimensions-wp6aa_ft","title":"1.a - Turbid tree + option \"Exact location + Random dimensions\": WP6Aa_FT","text":"<p>Tree creation method  only reads the tree species index (i.e., optical properties, LAI profile,\u2026), xy location, and possibly leaf area (noted LAI!), from a tree file (here: <code>trees_WP6.txt</code>) that can store each tree geometry. Other information is directly specified by the user in the GUI. The figure below shows scene nadir images.</p> <p><p>Nadir images. a) \\(0.4\\mu m\\). b) \\(0.56\\mu m\\). c) \\(0.66\\mu m\\). d) \\(0.9\\mu m\\). e) Color composite (cf. III.7.9, WP3E).</p></p> <p>Create the scene \\(NDVI=\\frac {\\rho_{NIR} - \\rho_{red}} {\\rho_{NIR} + \\rho_{red}}\\) image (see below): tool <code>Tools/Band Combination</code> (cf. WP3H)</p> <p>Question</p> <p>Check the consistency of NDVI image: high value for green vegetation and low for bare ground.</p> <p><p>Scene NDVI image.</p></p> <p>Note</p> <p>In the Forward mode, the information panel of menu \"View\\ Scene 2D\") displays \\(LAI_{scene}\\); here, it is \\(\\frac {leaf\\:area} {scene\\:area} = 3\\).</p> <p>Note</p> <p>For below copies of WP6Aa, the folder \"BandCombination\" can be deleted to reduce computer memory.</p>"},{"location":"Tutorials/T6/t6.html#1b-turbid-tree-exact-location-exact-dimensions-wp6ab_ft-copy-of-wp6aa","title":"1.b - Turbid tree + \"Exact location + Exact dimensions\": WP6Ab_FT (copy of WP6Aa)","text":"<ul> <li>Set DART tree creation method  with WP6Aa's hole distribution. Then, DART uses all available data of file <code>trees_WP6.txt</code> (crown shape,\u2026). Note that the tree geometry slightly differs from WP6Aa.</li> </ul>"},{"location":"Tutorials/T6/t6.html#1c-triangle-tree-exact-location-exact-dimensions-wp6ac_ft-copy-of-wp6ab","title":"1.c - Triangle tree + \"Exact location + Exact dimensions\": WP6Ac_FT (copy of WP6Ab)","text":"<ul> <li>\"Fill\" the tree crown with triangles (\\(area_{triangle}\\): 0.03\\(m^2\\)) instead of turbid medium.</li> <li> <p>Set the Maket product \"Triangles area products\" (i.e., distribution of areatriangle as 3D array, vertical profile, and per type of scene element. Here, we only select \"per type\"; results (i.e., \\(300m^2\\) for leaves and \\(100m^2\\) for the scene) are stored in the \"Maket\" section of <code>SimulationProperties.txt</code> file.</p> </li> <li> <p>Set Maket product  to create the 3D object <code>dsm.obj</code>. It stores all facets of the scene into 3 groups: \"DARTground\",\"DARTcanopy\" and \"DARTtrunk\". Comment its 2 ground facets \"f 1 2 3\" et \"f 4 5 6\" to get the 3D tree object, and name it <code>TreeObjWP6Ac.obj</code>; WP6B_Lux uses it.</p> </li> </ul>"},{"location":"Tutorials/T6/t6.html#2-tree-creation-option-random-location-random-dimensions-wp6b-copy-of-wp6aa","title":"2) Tree creation + option \"Random location + Random dimensions\": WP6B (copy of WP6Aa)","text":"<p>Scene: 20m x 20m. Tree creation method  randomly locates (see below) the WP6Aa tree at nodes of a grid \\((\\Delta x=4m, \\Delta y=5m)\\) inside disks (radius 2m) with 90% probability of presence. Crowns are filled with \\(0.03m^2\\) facets. LAI=3.</p> <p>The figure below illustrates that images of a same scene from successive DART runs differ if the scene is simulated with option  because this option leads to different tree and leaf / hole geometries.</p>"},{"location":"Tutorials/T6/t6.html#2a-dart-ft-wp6b_ft","title":"2.a - DART-FT (WP6B_FT)","text":"<p>computer time (CT) is 2' 39\" with \\(\\Delta r = 0.5m\\) and 32' 14\" with \\(\\Delta r = 0.1m\\).</p> <p><p>Menu of method  \"Random location + Random dimensions\" for creating a tree spatial distribution.</p></p> <p><p>DART-FT simulated with images option . \\(0.56\\mu m\\).</p></p>"},{"location":"Tutorials/T6/t6.html#2b-dart-lux-wp6b-lux","title":"2.b - DART-Lux (WP6b-Lux)","text":"<p>With option \"Conversion of N turbid tree crowns into facets in the tree crown volume\", DART-Lux creates N 3D independent objects (\\(\\implies\\) N ply files). Another approach is shown here.</p> <ul> <li> <p>Edit the file Tree_report (i.e., location xy, \\(N_{triangles}\\) &amp; \\(Area_{triangle}\\) / tree) of WP6B_FT as the field <code>FieldObjWP6B.txt</code> to get the tree xy distribution of WP6B_FT. Specific scaling factors \\((s_x,s_y,s_z)\\) and rotations \\((rot_1,rot_2, rot_3)\\) could be applied per tree to get variable trees, which is more realistic. Note that a factor \\(s=s_x=s_y=s_z\\) multiplies the foliar area by \\(s^2\\). </p> </li> <li> <p>Import the field of 3D objects <code>FieldObjWP6B.txt</code> (see below) and object <code>TreeObjWP6Ac.obj</code>. All trees will be clones of this object (\\(\\implies\\) 1 ply file). Set the correct surface optical properties to the groups DARTcanopy and DARTtrunk.</p> </li> </ul> <p><p>Importation of the 3D object TreeObjWP6Ac.objin the field <code>FieldObjWP6B.txt</code>.</p></p> <p></p> <p>The figure above shows:</p> <ul> <li>Images (WP6B_Lux): \\(0.56\\mu m\\) (a: nadir, b: oblique) and \\(0.9\\mu m\\) (c: nadir), pixel size \\(\\Delta r = 0.1m\\), CT=2' 26\".</li> <li>2D BRF plot:<ul> <li>direct interpolation of the 360 x 90 BRF map. \\(N_{samples}\\): 50 (d: WP6B_Lux) &amp; 103 (e: WP6B_Lux_BRF). (\\(0.56\\mu m\\)) </li> <li>interpolation of <code>brf.txt</code> that stores mean values of DART images and interpolations of the BRF map for all upward discrete directions (here: 103 + plus directions around hot spot). It is usually smoother than the direct 2D BRF plot. \\(N_{samples} = 50\\) (f: WP6B_Lux) and 103 (g: WP6B_Lux_BRF).</li> </ul> </li> <li>1D BRF plot (solar plane, 4 bands): interpolation of <code>brf.txt</code>. \\(N_{samples} = 50\\) (h: WP6B_Lux) &amp; 103 (i: WP6B_Lux_BRF).</li> </ul> <p>Question</p> <p>BRF plots become smoother with increasing \\(N_{samples}\\).</p> <p>Question</p> <p>Due to its 1\u00b0 resolution, the BRF map, and therefore the direct 2D BRF, tends to underestimate the hotspot (by more than 13% at \\(0.56\\mu m\\) with \\(N_{samples}=103\\)).. <code>brf.txt</code>, and therefore its associated 2D BRF plot, is more accurate around the hotspot, if the hotspot image is simulated and if thehotspot direction from the BRF map is removed).</p> <p>Question</p> <p>With small \\(N_{samples}=50\\), the random noise can lead to maximal reflectance in the neighborhood of the hotspot.</p> <p>Question</p> <p>BRF is minimal for very oblique directions. This effect decreases if \\(N_{scene repetition}\\) is increased.</p> <p></p> <p><p>DART-Lux. \\(\\Delta r=0.1m\\). \\(\\theta_s=30\u00b0, \\phi_s=225\u00b0\\). Images: \\(0.56\\mu m\\) (a: nadir, b: oblique), \\(0.9\\mu m\\) (c: nadir); CT=2' 26\". 2D BRF (\\(0.56\\mu m\\) ): d,e) direct interpolation of BRF map; f,g) interpolation of <code>brf.txt</code> (from BRF map + hotspot image; manual removal of BRF map's hotspot direction). h,i) 1D BRF (4 bands, solar plane): interpolation of <code>brf.txt</code>.</p></p>"},{"location":"Tutorials/T6/t6.html#3-creation-of-a-scene-with-different-tree-species-wp6c-copy-of-wp6aa_ft","title":"3) Creation of a scene with different tree species: WP6C (copy of WP6Aa_FT)","text":"<p>Objective: scene with several tree species (i.e., crown shape,..) + Option \"Exact location + Random dimensions\".</p> <p>Scene: 20m x 20m. 4 DART-created trees (2 tree species: 0, 1). The table below shows the tree file  (species, x, y, and possibly Leaf area), the DART-tree GUI menu , and tree parameters  per species.</p> <p>The images below show the scene mock-up and nadir images from DART-FT at \\(\\Delta r=0.5m\\) and DART-Lux at \\(\\Delta r=0.1m\\).</p> <p><p>Setting DART-created trees.  Tree position file.  DART-created trees menu.  Tree species parameters.</p></p> <p><p>a) 3D scene mock-up. Nadir images: b) DART-FT, \\(\\Delta r=0.5m\\); c) DART-Lux: \\(\\Delta r=0.1m\\). \\(0.56\\mu m\\).</p></p>"},{"location":"Tutorials/T6/t6.html#4-importation-of-3d-tree-wp6d-copy-of-wp6aa_ft","title":"4) Importation of 3D tree: WP6D (copy of WP6Aa_FT)","text":"<p>Objective: to import a 3D tree (i.e., 3D object made of facets) (WP6Da) and a field of 3D trees (WP6Db).</p> <p>Scene: 10m x 10m. 4 bands {\\(0.4\\mu m\\), \\(0.56\\mu m\\), \\(0.66\\mu m\\), \\(0.9\\mu m\\)}.</p> <p>Note</p> <p>For DART-FT: the illumination grid must be consistent with facet dimensions for getting accurate results.</p> <ul> <li>DART-created trees can be ignored () or removed (). Here, we remove them (). </li> </ul>"},{"location":"Tutorials/T6/t6.html#4a-wp6da","title":"4.a - WP6Da","text":"<p>Import and display the 3D tree <code>benjamina.obj</code>, and rename its groups (the images a. and b. below)</p> <p>The tree is located in folder <code>Dart\\database\\3D_Objects\\Tree\\Aesthetic_Trees\\Deciduous</code>. It is made of 25800 triangles that belong to 2 groups: 1 group for trunk and branches and 1 group for leaves. Specific properties are assigned per group. To view each group individually, display the tree with the '3D View' option (see the images b. and c. below), then, select a group (see the images a. and d. below). Groups can be named \"Trunk\" and \"Leaf\".</p> <p>Define colors and assign them to the groups: menu \"Colors / Custom colors\" (see the image a. below)</p> <p>The color of a facet sets its material. The file <code>input\\dart.typ</code> lists all defined materials, including DART materials.</p> <p>Set the tree location (x=y=4) and scale factor (1.8 for all axes): menu <code>Object / Geometric properties</code></p> <p>Assign optical properties per group of facets: menu <code>Object / Groups / Group</code> (see the image e. below)</p> <p>The \"double face\" option is needed for the group \"Leaf\" to get scattering on the 2 faces of leaf facets. It is not needed for the group \"Trunk\" because the trunk facets have normals that are oriented towards trunk outside.</p> <p>Run DART and create the color composite image with the RGB nadir images (see the image f. below)</p> <p><p>a,b) Importation of a 3D tree. c,d) The tree mock-up. e) Properties of the trunk. f) Color composite.</p></p>"},{"location":"Tutorials/T6/t6.html#4b-wp6db-copy-of-wp6da","title":"4.b - WP6Db (copy of WP6Da)","text":"<p>Remove the 3D tree. Then, there is no individually imported 3D object (see  the  of the image below)</p> <p>Import a Field of objects  and 2 3D models \"Citrus CISY1\"  and \"CISY4\"  </p> <p>The image below shows the 3D mock-up of the scene and a color composite of DART nadir images.</p> <p><p>Field of 2 types of trees. a) Menu. b) Field file. c) Mock-up. d) DART-Lux nadir image. \\(\\Delta r=2cm\\).</p></p>"},{"location":"Tutorials/T6/t6.html#5-transformation-of-an-imported-3d-triangle-tree-into-a-turbid-tree-wp6e-copy-of-wp6da","title":"5) Transformation of an imported 3D triangle tree into a turbid tree: WP6E (copy of WP6Da)","text":"<p>3D trees made of many facets (e.g., \\(10^6\\) per tree) can need huge CT and RAM. DART-Lux greatly reduces them by simulating trees as clones of several 3D trees, with xyz scalings and rotations per tree. There is another solution presented here with DART-FT: facets are transformed into turbid medium volumes. Note that CT can be much larger for turbid trees than for facet trees if \\(N_{turbid \\:volumes}\\) is huge conversely to \\(N_{facets}\\). For DART-FT, CT and accuracy for \"turbid\" trees usually decrease with coarser spatial resolution, and they mostly depend on \\(N_{facets}\\) for facet trees.</p> <p>WP6E_FT: the 'Triangle \\(\\rightarrow\\) Turbid' transformation can be done at any spatial resolution (see below) with pre-defined turbid optical properties, and user specified or automatically derived LAD and LAI.</p> <p><p>Transformation \"Triangle \\(\\rightarrow\\) Turbid\". 4 spatial resolutions: a) 0.5m, b), 0.25m, c) 0.1m, d) 0.05m.</p></p> <p>The figure above shows nadir reflectance images, \\(\\overline{\\rho}\\) and CT at \\(0.56\\mu m\\) (\\(\\Delta r=0.1m, 0.2m, 0.3m\\)). With \\(\\Delta r\\) decrease, we note:</p> <ul> <li>Turbid tree: CT greatly increases and \\(\\overline{\\rho}\\) accuracy improves mostly due to better shadow simulation. \\(\\overline{\\rho}\\) does not change much if LAD is computed or pre-computed.</li> <li>Facet tree: CT remains much smaller than for the turbid tree, and \\(\\overline{\\rho}\\) remains nearly constant.</li> </ul> <p><p>DART-FT scene reflectance \\(\\overline{\\rho}\\) and computation time \\(\\Delta t\\). Facet and turbid trees. 3 cell sizes: \\(\\Delta r=0.1m\\), 0.25mand 0.5m. Transformation \"Facet \\(\\rightarrow\\) Turbid\" is with pre-defined and computed LAD. \\(0.56\\mu m\\).</p></p> <p>Note</p> <p>The conversion \"Facets \\(\\rightarrow\\) Turbid\" in DART-Lux gives similar results. However, it is not always advised because it can lead to a scene with many turbid volumes, especially if Nscene repetition is large, which in turn leads to many PLY files and very large file <code>scene.scn</code>, which can be unnecessarily too computer demanding.</p> <p>WP6E_Lux: compared to DART-FT, it is usually greatly faster, with much less RAM and radiative transfer modeling parameters (i.e., \\(N_{scat}, N_{scene\\: repetitions}, N_{samples}\\), and Russian Roulette (RR) scattering depth \\(N_{RR,depth}\\) and surviving probability PRR). Depending on 3D scenes, DART default parameters may not be optimal for the best trade-off \"Accuracy of \\(\\rho_{scene}\\) - CT\". This is illustrated here with the 10m x 10m Benjamina scene, especially at \\(0.9\\mu m\\) because convergence is slower for this band due to greater multiple scattering. DART-Lux images (see below) simulated with {\\(N_{scat}=300, N_{scene \\:repetitions}=10\\), \\(N_{samples}=300\\)} (\\(CT_{ref}=207s\\)) are used as references to assess how \\(N_{scat}, N_{samples}\\) and RR impact CT and relative error \\(\\epsilon_{\\rho}\\) of \\(\\overline{\\rho}\\).</p> <ul> <li>\\(0.56\\mu m\\): \\(\\epsilon_{\\rho} &lt; 2 \\times10^{-2}\\:\\: \\forall N_{scat} \\ge 10, N_{sample} \\ge 10\\). CTs greatly vary: 7\" if \\(N_{scat} = N_{sample} = 10; 154\\)\" if \\(N_{scat} = N_{sample} = 10^2\\).</li> <li>\\(0.9\\mu m\\): \\(N_{scat} \\ge 30 \\implies \\epsilon_{\\rho} &lt; 10^{-2} \\:\\: \\forall N_{sample}\\). CT =14s and \\(\\epsilon_{\\rho} = -7\\times 10^{-3}\\) for {\\(N_{scat} = 30, N_{sample} = 10\\)}. RR decreases CT, especially for small \\(N_{depth}\\), but increases the image variance. For {\\(N_{scat}=100\\), \\(N_{sample}=50\\)], CT=18\" if \\(N_{depth}=10\\),CT=24\" if \\(N_{depth}=20\\), and CT=27\" if \\(N_{depth}=30\\), whereas CT=34\" without RR. CT tends to be proportional to \\(N_{sample}\\), and slowly increases with increase of \\(N_{scat}\\). The optimal parameters depend on the expected accuracy on \\(\\rho_{scene}\\) and Monte Carlo noise in images. Here, {\\(N_{scat}=10^2\\), \\(N_{sample}=50\\), \\(N_{depth}=30\\)} can be a good choice.</li> </ul> <p><p>DART-Lux nadir reflectance images. They are used as reference images. CT = 208\".</p></p> <p><p>DART-Lux \\(\\overline{\\rho}(N_{samples})\\) for \\(N_{scat} = 10\\) to \\(10^2\\). a)\\(\\overline{\\rho}_{0.56 \\mu m}\\). b) \\(\\overline{\\rho}_{0.9 \\mu m}\\). c)\\(\\epsilon_{\\overline{\\rho}_{0.9 \\mu m}}\\). d) \\(CT_{0.9 \\mu m}\\). No Russian Roulette</p></p> <p><p>DART-Lux images. No RR: \\(N_{scat}=10\\) , \\(N_{samples} = 10\\) (a), 50 (b), 102 (c). RR: \\(N_{samples} = 10\\) (d), 50 (e). \\(\\Delta r=0.05m\\).</p></p>"},{"location":"Tutorials/T6/t6.html#6-comparison-of-dart-methods-for-simulating-vegetation-wp6f","title":"6) Comparison of DART methods for simulating vegetation: WP6F","text":"<p>DART-FT: vegetation is simulated with facets (triangles) or voxels filled with turbid medium (i.e., turbid voxels) that represent leaves and twigs. Conversely to turbid voxels, facets are independent of DART voxels, which simplifies multi-scale studies. Hence, for vegetation-facet, computation time (CT) depends mostly on the number of facets (\\(N_{facets}\\)). For vegetation simulated with turbid voxels, CT depends mostly on the number of turbid voxels (\\(N_{turbid\\:voxels}\\)). A usual initial step is to determine the optimal vegetation simulation mode. It is a trade-off between \"accuracy\" and \"CT and computer memory\". It mostly depends on \\(N_{facets}\\) and \\(N_{turbid\\: voxels}\\).</p> <p>DART-Lux: no use of voxels, and great CT / RAM decrease, especially if fields of 3D objects are used.</p> <p>Scene: 4 bands (\\(0.4\\mu m, 0.56\\mu m, 0.68\\mu m, 0.9\\mu m\\)). 40mx40m horizontal ground. \\(\\Delta x=\\Delta y=\\Delta z=1m\\). Tree at (20m, 20m). LAI = 2.14. \\(\\rho_{leaf} = \\rho_{grass\\:rye}\\). Four tree simulation methods are considered.</p> <p>CT and scene reflectance \\(\\rho_{scene}\\) depend on the tree simulation mode (see below):</p> <ol> <li>Facet-tree (imported): cherry tree with scale factor 30. It has 2 groups: 'leaf' (15966 facets) and 'wood' (3628 facets). It is the best trade-off for \"CT vs. accuracy\", because \\(N_{facets}\\) is small.</li> <li>Derived turbid-tree: group 'leaf' of facet-tree 'a' is transformed into 'turbid', keeping more or less its geometry.</li> <li>DART-created ellipsoidal turbid tree with dimensions of tree 'a' without trunk (\\(\\Phi_{trunk}=0m\\)): \\(H_{trunk\\: below\\: crown}=1m\\), \\(H_{crown}=33m\\), \\(\\Phi_{crown}=0m\\). The trunk and branches are those of 3D tree 'a'.</li> <li>DART-created ellipsoidal turbid tree 'c' with crown randomly filled with \\(0.03m^2 / 0.3m^2 / 3m^2\\) facets. If facets are very small (\\(\\implies\\) very large \\(N_{facets}\\)), tree 'd' is equivalent to tree 'c' (i.e., \\(\\rho_{scene}(tree\\; d) \\approx \\rho_{scene}(tree\\; c)\\)), but CT can become huge. The ideal \\(N_{facets}\\) is a trade-off between accuracy and CT. Here, with \\(3m^2\\) leaves, CT decreases by a factor 20, while keeping the \u03c1scene relative difference \\(\\approx 0.01\\).</li> </ol> <p>Note</p> <ul> <li>trees 'c' and 'd' cannot exactly mimic facet tree 'a'. For example, here, their dimensions are the extreme dimensions of the facet tree 'a', which is not optimal.</li> <li>facet tree 'd' can be more realistic than turbid tree 'c', although turbid tree 'c' is often considered as a reference.</li> </ul> <p><p>Four tree simulation methods. DART-FT. a) Cherry tree. b) Turbid tree derived from tree 'a'. c) Tree with dimensions of 'a' filled with turbid medium and with \\(0.03m^2\\) (d), \\(0.3m^2\\) (e) and \\(3m^2\\) (f) facets.</p></p>"},{"location":"Tutorials/T7/t7.html","title":"WP7 - Topography","text":"<p>Objective: to study environmental / topographic effects in a satellite image.</p> <p><p>Parameters that must be modified are indicated. The house roof is used to simulate topography.</p></p>"},{"location":"Tutorials/T7/t7.html#1-reflectance-of-a-slope-with-a-given-sun-illumination-direction-wp7a","title":"1) Reflectance of a slope with a given sun illumination direction: WP7A","text":"<p>Objective: to study how slope reflectance varies with the illumination direction (scene = 2 slopes of a roof).</p> <p><p>Parameters that must be modified are indicated. The house roof is used to simulate topography.</p></p> <p>Display DART nadir images at 1st order and iteration X (see below).</p> <p><p>DART simulation of the slopes. a) Order 1. b) Order X.</p></p> <ul> <li>the observed mean 1st order reflectance \\(\\rho_{1,obs,roof}\\) of roof slopes are 0.517 and 1.27, respectively, whereas the reflectance of roof material is \\(\\rho_{roof}=1\\). Why? Note: \\(\\rho_{1,obs,roof} = \\frac {\\bar{\\Omega}_s.\\bar{\\Omega}_{roof}} {\\bar{\\Omega}_s.\\bar{\\Omega}_{nadir}}\\).</li> <li>Why does the reflectance of each roof slope decreases with altitude in image IterX?</li> </ul> <p>Note</p> <p>Option  decreases a lot computer time. It computes 1st order reflectance only.</p>"},{"location":"Tutorials/T7/t7.html#2-reflectance-as-a-function-of-solar-time-wp7b","title":"2) Reflectance as a function of solar time: WP7B","text":"<p>Objective: \\(\\rho_{slope}\\)(solar time), without and with atmosphere R.T.</p> <p>Scene (Toulouse) coordinates (menu \"Earth scene\":see below): Long. = 1.45\u00b0, Lat. = 43.617\u00b0, altitude = 200m. - Solar time (menu \"Direction input parameters\"): June 21, 2019, time = 12h. - Atmosphere: USTD76 gas model, rural aerosol (Vis=5km). Manual / constant geometry: dZ=500m, HMA=4km,...</p> <p>Create the sequence: 7h, 9h, 11h, 13h, 15h, 17h, 19h</p> <p><p>a) Coordinate of the scene (i.e., Toulouse city). b) Date (solar time). Combined with the scene coordinate, it gives the local sun direction. c) A rotation of the sun direction can mimic a scene rotation. Compared to the scene rotation, the advantage is to work with exactly the same mock-up without any geometric distorsion.</p></p> <p>Run the sequence without atmosphere and with atmosphere R.T.</p> <p>Results are stored in the LUT, and its data are displayed with the mode \"Time\". The image below shows nadir reflectance images at 7 solar times for 2 cases: without (SKYL=0) and with atmosphere RT, the angles \\((\\theta_{sun}, \\phi_{sun})\\) of the 7 sun directions, and the time variation of reflectance for nadir and oblique viewing (41\u00b0, 30\u00b0) directions.</p> <p>Question</p> <p>Early morning and late afternoon, \\(\\rho_{North\\: slope,BOA} &gt; \\rho_{South\\: slope,BOA}\\), conversely to the rest of the day. Why?</p> <p>Question</p> <p>At 19h, \\(\\rho_{North\\: slope,BOA} \\approx 0\\), except at the top, if SKYL=0. It is not null if atmosphere R.T. is simulated. Why?</p> <p>Question</p> <p>TOA nadir reflectance is always smaller than BOA nadir reflectance. Why?</p> <p></p> <p><p>Nadir images (BOA without (a) and with (b) atmosphere, TOA (c)) and time variation of TOA and BOA reflectance for nadir and oblique viewing directions. DART 5.7.4 V1085.</p></p>"},{"location":"Tutorials/T7/t7.html#3-dem-creation-with-option-repetitive-scene-and-infinite-slope","title":"3) DEM creation with option \"Repetitive scene\" and \"Infinite slope\"","text":"<p>Objective: to create a slope with the tool DEMGenerator (cf. III.5.1) and to study its reflectance</p> <p>Scene: \\(\\Delta X=40m, \\Delta Y=4m. \\Delta x=\\Delta y=1m, \\Delta z=0.5m\\). No atmosphere (SKYL: 0). \\(\\theta_{sun}=50\u00b0, \\phi_{sun}=225\u00b0\\). Illumination grid: 5mm.</p> <ul> <li>Create a slope (i.e., DEM) with option 'Create Topography' in menu 'Earth scene / DEMGenerator':<ul> <li>DEM kind: select the option \"Theoretical DEM Building\"</li> <li>DEM properties: set option \"Generalized valley\" and parameters of the image below.</li> <li>Create the DEM: run the module \"DEMGenerator\" with  in the Simulation Editor or directly from the menu \"Run\". Then, 2 triangles are created per pixel (x,y) of the DEM (cf. dart handbook.pdf).</li> <li>Set the option \"Presence of topography\". Option \"3D view\" (see below). displays the 3D DEM.</li> </ul> </li> </ul>"},{"location":"Tutorials/T7/t7.html#31-scene-creation-with-option-repetitive-scene-wp7ca-copy-of-wp7a","title":"3.1 Scene creation with option \"Repetitive scene\": WP7Ca (copy of WP7A)","text":"<ul> <li>Select the option \"Repetitive scene\" (default option) in the menu \"Earth scene\" and run the Maket module.</li> </ul> <p>The \"View Scene 2D\" and \"View Scene 2D\" menus display the 2D and 3D views (see below) of the scene created by the \"Maket\" module, respectively. Being infinite with a repetitive pattern, the scene contains a nearly vertical \"wall\" with an altitude range from the scene left side altitude to the scene right side altitude.</p> <p><p>Slope creation with the tool \"DEM_Generator\". a) Menu. b) Input and 3D view of the DEM used for creating the mock-up. 2D x-z (menu 'View Scene 2D') and 3D (menu 'View Scene 2D') views of the 3D scene created with the \"Repetitive scene\" option (c) and with the \"Infinite slope\" option (d).</p></p> <p>The figure above shows the \\(1^{st}\\) scattering order and IterX nadir images.</p> <p>Question</p> <p>Iter 1 image has 2 values only: 0.766 and 0.94. Why?</p> <p>Question</p> <p>In IterX image, slope reflectance increases from lower to higher altitude. Why?</p> <p><p>Nadir images of a slope. Order 1 (a) and iteration X (b).</p></p>"},{"location":"Tutorials/T7/t7.html#32-scene-creation-with-option-infinite-slope-wp7cb-copy-of-wp7ca","title":"3.2 Scene creation with option \"Infinite slope\" WP7Cb (copy of WP7Ca)","text":"<p>Scene: \\(\\Delta Y=10m\\) and \"infinite slope\" option.</p> <p>Question</p> <p>At any iteration, DART images are identical to images at Iter1. The slight spatial variation of slope reflectance \\(\\rho_{slope}^{*}\\) (see below) is due to the finite dimensions of the cells \\(\\Delta r_{cell}\\), triangles \\(\\Delta r_{triangle}\\) (2 triangles per pixel of the raster DEM) and illumination mesh grid \\(\\Delta r_{illumin}\\). Here, \\(\\rho_{slope}^{*} \\in [0.7656;\\: 0.7658]\\) with \\(\\Delta r_{illumin} = 5mm\\).</p> <p><p>Nadir image of a slope. Simulation with \"infinite slope\" option.</p></p>"},{"location":"Tutorials/T7/t7.html#33-scene-creation-with-a3d-object-derived-from-the-option-infinite-slope-wp7cc-copy-of-wp7cb","title":"3.3 Scene creation with a3D object derived from the option \"Infinite slope\" WP7Cc (copy of WP7Cb)","text":"<p>A DART flat ground is made of 2 triangles. Hence, the \"triangle\" ground radiative budget (RB) is represented by 2 triangles only, and there is a unique ground scattering event per cell of the current simulation. Very often, one expects that \\(RB_{ground}\\) and scattering occur at a spatial resolution \\(\\Delta r_{expected}\\) independent of the cell dimension \\(\\Delta r_{cell}\\) of the current simulation. For that, the ground surface should be made of triangles with dimension \\(\\Delta r_{triangle}\\) equal to \\(\\Delta r_{expected}\\). A solution is to import a 3D object made of triangles with \\(\\Delta r_{triangle}=\\Delta r_{expected}\\), and to use it as a DEM. The Maket module with option  creates this 3D object: it creates a DSM (Digital Surface Model) with all triangles of the DART scene. If the scene contains only the ground surface, and if the ground is simulated using a raster DEM with spatial resolution \\(\\Delta r_{expected}\\), then the DSM is a 3D object DEM with spatial resolution \\(\\Delta r_{expected}\\).</p> <ul> <li>Create the DEM 3D object with \"Maket + option \"; then, copy it to the simulation input folder.</li> <li>Import the DEM 3D object, and specify that you use it as a DEM. Remove the use of the raster DEM.</li> </ul> <p>Question</p> <p>DART nadir image is equal to the image directly created with option \"infinite slope\" (see above).</p> <p>Note</p> <p>The tool Topography/Object creation (script <code>convertDEMtoOBJ.py</code>) creates a 3D object from a raster DEM image: <code>Path_to_Python\\python Path_to_Script\\convertDEMtoOBJ.py Path_to_DEM.mp# double 150 1 1 1 1</code></p> <p>Note</p> <p>Softwares as Blender (www.blender.org) create 3D DEM objects. Here, the Excel file <code>Obj_Coordinates.xlsx</code> creates the 3D object <code>Generalized_Valley.obj</code> with facets in different groups, for example for studying facet RB.</p>"},{"location":"Tutorials/T7/t7.html#4-reflectance-of-a-highly-reflective-v-shaped-landscape-69-n-49w-wp7d","title":"4) Reflectance of a highly reflective V shaped landscape (69\u00b0 N, 49\u00b0W): WP7D","text":"<p>Objective: to assess the minimal number of iterations for albedo convergence.</p> <p>Simulation: TOA \\(\\rightarrow\\) BOA transfer: analytic. \\(\\theta_s=30\u00b0, \\phi_s=0\u00b0\\). \\(\\lambda=0.56\\mu m\\). 80 iterations. Scene albedo threshold: \\(10^{-7}\\)s. - \\(\\Delta x=\\Delta y=\\Delta z=1m.\\) \\(\\rho_{ground}=0.95\\).</p> <p>Scene:</p> <ul> <li>\\(\\phi_n=350\u00b0\\): a \\(\\phi_n\\) rotation of the scene would complexify the scene in the xyz reference. In order to avoid that, set the scene along Ox axis (\\(\\phi_n=360\u00b0\\)) and use a 10\u00b0 .</li> <li>Height of the 2 plateaus: \\(\\Delta h_1 = \\Delta h_2 = 350 m\\)</li> <li>Zenith angle of the 2 slopes: \\(\\theta_1 = \\theta_2 = 80\u00b0\\)</li> <li>Distance of valley from origin: AE = 75 m. Valley width: EF = 2 m</li> </ul> <p><p>the DEM</p></p> <p>Question</p> <p>The file <code>dart.txt</code> stores the scene albedo A, the extrapolated scene albedo and the corresponding relative error per iteration n. The image below shows these products. It appears that 14 iterations are needed in order to get the extrapolated albedo with a relative error less than \\(10^{-3}\\).</p> <p><p>Scene albedo as a function of the number of iterations.</p></p>"},{"location":"Tutorials/T7/t7.html#5-brf-and-btf-of-slope-vegetation-plot-simulated-with-facets-wp7e","title":"5) BRF and BTF of \"Slope + Vegetation plot simulated with facets\": WP7E","text":"<p>Note</p> <p>The layer is simulated as facets because the use of turbid cells is often inaccurate. Indeed, some turbid cells are below the slope and cells being either 0% or 100% filled, the layer top has an unrealistic roughness.</p> <p></p>"},{"location":"Tutorials/T7/t7.html#5a-creation-of-a-slope-3d-object-defined-as-an-horizontal-ground-surface-wp7ea","title":"5.a - Creation of a slope 3D object defined as an horizontal ground surface: WP7Ea","text":"<p>Create dsm.obj with \"Maket + option \". Scene \"DX=30m, DY=1m. \\(\\Delta x=\\Delta y=\\Delta z=0.2m\\)\".</p>"},{"location":"Tutorials/T7/t7.html#5b-brfbtflai-sun-direction-slope-of-slope-vegetation-layer-simulated-with-triangles-0003m2-wp7eb","title":"5.b - brf/btf(LAI, sun direction, slope) of \"slope + vegetation layer simulated with triangles (0.003m2)\": WP7Eb","text":"<p>Scene: DX=10m, DY=1m. \\(\\Delta x=\\Delta z=1m\\). \\(0.56\\mu m, 0.9\\mu m, 10\\mu m. \\theta_{sun}=30\u00b0, \\phi_{sun}=0\u00b0\\). Solar plane sampled. M=50 sub-faces for accurate hot spot simulation. DEM = dsm.obj with \\(\\rho_{loam \\:brown \\:intermediate}\\). 10mx1m vegetation plot simulated with facets \\((0.003m^2)\\). \\(\\rho_{leaf}='\\)leaf_deciduous', spherical LAD. \\(T \\in [290K;\\: 310K]\\). LUT=only product.</p> <p>Sequence: LAI: 0, 1, 3; Scene slope: 0, 20\u00b0, 50\u00b0; Scene azimuth angle: 0\u00b0, 45\u00b0. </p> <p><p>2D and 1D graphs. a) \\(\\rho_{scene,0.56\\mu m}(\\theta_{view}, \\phi_{view})\\) and \\(T_{B,scene,10\\mu m}(\\theta_{view}, \\phi_{view})\\) extracted from the LUT by the tool <code>View/Directional</code> refl./Extract. from LUT'. b) LUT plots: \\(\\rho_{slope,0.56\\mu m}(\\theta_{view})\\) and \\(T_{B,slope,10\\mu m}(\\theta_{view})\\) for {LAI: 0, 1, 3; slope: 0\u00b0, 20\u00b0, 50\u00b0; \\(\\phi_{sun}=\\phi_{view}\\)= angle offsets=0\u00b0: solar plane}. Curves are smoother with smaller facets.</p></p>"},{"location":"Tutorials/T7/t7.html#6-inversion-of-satellite-image-in-terms-of-surface-reflectance-wp7f","title":"6) Inversion of satellite image in terms of surface reflectance: WP7F","text":"<p>Objective: to derive material reflectance \\(\\rho_{loc}(x,y)\\) from an atmospherically corrected satellite image \\(\\rho_{sat}(x,y,\\Omega_v)\\).</p> <p>Scene (see the image a. below): 40m x 40m. \\(\\Delta x=\\Delta y=\\Delta z=0.5m\\). Imported pyramid {center: (20m, 20m), scale factor 8, \\(\\rho_{pyramid} =0.2, \\rho_{ground} = 0.1\\)}. \\(\\theta_{sun}=45\u00b0, \\phi_{sun}=90\u00b0\\), SKYL = 0. Illumination grid: 0.02m. Add the satellite direction \\(\\theta_v=0\u00b0\\).</p> <p>Run DART with option \"\": Energy conservation\" to create the ortho-rectified satellite image \\(\\rho_{sat}(x,y,\\Omega_v)\\) (see the image b. below). Store it in the folder <code>WP7F/input/Satellite</code>.</p> <p>Run 'Topography' tool (III.7.6): result in 'WP7F/Corrected'. \\(N_{max \\:iterations} = 4\\). Thresholdmean reflectance = \\(10^{-5}\\).</p> <ul> <li>The procedure stops at iteration 4. The image b. below shows the surface reflectance image \\(\\rho_{loc}(x,y)\\). Verify that: \\(\\overline{\\rho}_{pyramid}=0.2, \\overline{\\sigma}_{pyramid} =1.2\\times 10^{-5}, \\overline{\\rho}_{ground}=0.1, \\overline{\\sigma}_{ground}=3\\times10^{-6}\\)</li> </ul> <p></p> <p><p>a) 3D scene. b) Nadir DART ortho-image \u03c1sat (x,y) and surface reflectance image \\(\\rho_{loc}(x,y)\\). SKYL=0 (WP7F). c) \\(\\theta_v=0\u00b0\\), SKYL=0.3 (WP7F_nadir_SKYL). d) \\(\\theta_v=30\u00b0, \\phi_v=0\u00b0\\), SKYL=0.3 (WP7F_oblique_SKYL).</p></p> <p><p>a) Scene (WP7F_plane): \\(\\rho_{pyramid}=0.2, \\rho_{cone}=0.15, \\rho_{plane}=0.25, \\rho_{ground}=0.1, \\rho_{banana}=0.05\\). SKYL=0.3. b) DART image. c) Surface reflectance image: \\(\\rho_{pyramid}=0.1988, \\rho_{cone}=0.1496, \\rho_{plane}=0.25, \\rho_{ground}=0.0999, \\rho_{banana}=0.05001.\\)</p></p>"},{"location":"Tutorials/T7/t7.html#7-inversion-of-a-satellite-image-bassies-mountain-area","title":"7) Inversion of a satellite image (Bassies mountain area)","text":"<p>as \\(\\rho_{ground}(x,y)\\) (cf. VII.5-WP5Bb): WP7G</p> <p>Scene: \\(\\Delta X=4.9km, \\Delta Y=5.4km, \\Delta x,y,z=50m\\), DEM (\u2026\\CoverMap\\Bassies\\Bassies_DEM50). \\(\\lambda=0.56\\mu m\\). Analytic model.</p> <p>Simulation: add a nadir direction. The image to correct will be created for this direction.</p> <p>WP7Ga:</p> <ul> <li>Import the CoverMap <code>Bassies_nosnow50.mp#</code> (descriptor <code>Bassies_CoverMap_Descriptor.txt</code>). Plots are surfaces (rock (concrete): \\(\\rho_{rock}=0.10975\\), vegetation (grass rye): \\(\\rho_{veg}=0.2626\\)).</li> <li>Run DART to create the image (see the image c. below) to correct: \\(\\rho_{sat} \\in [0.019;\\: 0.288], \\overline{\\rho}_{sat} = 0.118\\)).</li> </ul> <p>WP7Gb:</p> <ul> <li>Save WP7Ga as. Then, keep the DEM only and set \\(\\rho_{ground}=1\\) with a multiplicative factor, because the image result is the \"multiplicative factor\" image. Plots can be removed by deleting the <code>plots.xml</code> file.</li> <li>Run the \"Topography correction\" tool. The image of surface reflectance has 2 peaks centred on \\(\\rho_{sat,rock} \\approx 0.1105 and \\rho_{veg} \\approx 0.2635\\) (see the image e. below), as expected.</li> </ul> <p><p>Inversion of Bassies satellite image. a) DEM. b) Cover map. c) Satellite image to correct and its histogram. d) DART image at \\(1^{st}\\) iteration (\\(\\rho_{loc}=\\overline{\\rho}_{sat} =0.118\\)). e) Surface reflectance image and its histogram.</p></p>"},{"location":"Tutorials/T8/t8.html","title":"WP8 - LiDAR","text":""},{"location":"Tutorials/T8/t8.html#1-horizontal-ground-surface-wp8a","title":"1) Horizontal ground surface: WP8A","text":"<p>Objective: waveform of a single Lidar pulse for an horizontal ground surface.</p> <p><p>Parameters for WP8A and WP8B. Lidar half reception angle is \\(atan(\\frac {R_{FOV}} {altitude})\\)</p></p> <p><p>The field of view (red) is larger than the footprint (orange).</p></p> <p>Run DART and display the waveform (<code>View/ Lidar / Mono pulse</code>) and Lidar images (<code>View/ Image</code>)</p> <p>1mJ pulse has \\(N_{phot}=\\frac {Pulse\\:\\:energy:\\:1mJ} {Photon\\:\\:energy:\\:h\\nu=1.87048\\times10^{-19}}=5.3462\\times10^{15}\\) photons, simulated by \\(N_{phot\\:DART}=10^5\\) DART photons.</p> <p>File <code>stat_illumination_MC0.txt</code> (folder <code>output/BAND0</code>): scattering maximum order, number of DART photons emitted \\((N_{phot})\\), incident on the ground \\((N_{ground})\\), absorbed measured \\((N_{mesured})\\), etc.</p> <p>\\(N_{measured}=\\int_{\\Delta \\Omega_{fp}} \\frac {N_{phot}} {\\Delta \\Omega_{fp}}.\\frac {\\rho_{ground}} {\\pi}.\\frac{A_t cos^4(\\theta)}{H^2}.d\\Omega=N_{phot}.\\frac {\\rho_{ground}} {\\pi}.\\frac {A_t} {H^2}.\\frac {\\int_{0}^{2\\pi} \\int_{0}^{\\theta_{fp}} cos^4(\\theta).sin(\\theta).d\\theta.d\\phi} {\\int_{0}^{2\\pi} \\int_{0}^{\\theta_{fp}} sin(\\theta).d\\theta.d\\phi} = N_{phot}.\\frac {\\rho_{ground}} {\\pi}.\\frac {A_t} {H^2}.\\frac {1 - cos^5(\\theta_{fp})} {5.(1 - cos(\\theta_{fp}))}\\)</p> <p>with H=LiDAR altitude, \\(A_t=LiDAR\\) aperture area, and \\(\\theta_{fp}\\)= half angle of beam divergence. Usually, the beam divergence is very small, that is \\(\\lim\\limits_{\\theta_{fp} \\rightarrow 0} \\frac {1 - cos^5(\\theta_{fp})} {5.(1 - cos(\\theta_{fp}))}=1\\). We have: \\(N_{measured} = N_{phot}.\\frac {\\rho_{ground}} {\\pi}.\\frac {A_t} {H^2}\\).</p> <p>Question</p> <p>Check: \\(N_{ground}=N_{phot}=5.3462.10^{15}\\) and \\(N_{measured}=68070\\) (it is divided by 100 if LiDAR altitude is multiplied by 10).</p> <p>\"View / Lidar / Mono pulse\"</p> <ul> <li>Total and \\(1^{st}\\) order non-convolved and convolved waveforms (see below): the horizontal axis shows the number of photons or the energy, the left vertical axis shows the absolute time or time relative to the ground, and the right vertical axis shows the absolute distance or distance relative to the ground.</li> </ul> <p><p>Lidar \\(1^{st}\\) and multiple order waveforms from ground. They are equal if there is no atmosphere.</p></p> <ul> <li>3D cloud of apparent and exact scatterer points ( option) and scattering volumes ( option) (see below). For flat bare ground, the apparent and exact 3D locations of last scattering location are identical since there is no multiple scattering. The histograms show the number of measured photons per energy value; a cursor can be slided to hide the least energetic photons (see the image d. and e. below). For flat bare ground, the 2D Ga</li> </ul> <p><p>Per scatterer option: a) Exact and b) apparent 3D location of last scattering; c) Histogram of photons in a,b). Per volume option: exact 3D location of last scattering d) without and e) with user specified energy threshold.</p></p> <p>\"View / Image\". LiDAR images (see below) help to analyze LiDAR results. Their reference is the LiDAR frame (i.e., label 'Lidar') or the simulated scene (i.e., label 'MaketFrame'). Here, for a LiDAR at nadir, the 'MaketFrame' and 'Lidar' images are equal. LiDAR (incident) pulse image (see the image a. below) and LiDAR BOA image (see the image b. below) are the number of emitted \\(N_{photons}^{\\downarrow}\\) and received \\(N_{photons}^{\\uparrow}\\) photons in LiDAR frame. The LiDAR reflectance image (see the image c. below) is the ratio \\(\\frac {\\pi N_{photons\\:at\\:BOA\\:that\\:head\\:to\\:the\\:LiDAR\\:within\\:Min(\\Delta \\omega_{LiDAR}(x,y),\\Delta \\Omega_{LiDAR})}^{\\uparrow}} {N_{photons\\:at\\:(x,y) \\in footprint\\:at\\:BOA}.cos(\\theta_{LiDAR\\:(x,y)}).Min(\\Delta \\omega_{LiDAR}(x,y), \\Delta \\Omega_{LiDAR})}\\), with LiDAR field of view \\(\\Delta \\Omega_{LiDAR}\\), solid angle \\(\\Delta \\omega_{LiDAR}(x,y)\\) under which (x,y) sees the LiDAR aperture, and \\(\\theta_{LiDAR}\\) directions for (x,y).</p> <p>Question</p> <p>Central (9mx9m) LiDAR reflectance image \\(\\rho_{footprint} \\in [0.00989, \\:0.01009]\\). It is not exactly 0.01:. Why?</p> <p><p>LiDAR images.</p></p> <p>Values change with simulations, except if option \"Results are identical if\u2026\" is set.</p>"},{"location":"Tutorials/T8/t8.html#2-horizontal-ground-surface-and-atmosphere-wp8b","title":"2) Horizontal ground surface and atmosphere: WP8B","text":"<p>Objective: waveform of a single Liadar pulse for an horizontal ground surface.</p> <p>Save WP8A as WP8B. Then, define an atmosphere with mono-band (monospectral) parameters\" (see below): optical depth of scattering gases equal to 4, no absorbing gases and no aerosols. The waveform (see below) is more or less the sum \"Ground signal through the atmosphere\" + \"Signal from the atmosphere\". It depends on the parameter \u201cAdvanced mode / LiDAR \\(\\rightarrow  N_{random} =\\) Number of random signals per interception in atmosphere\u201d.</p> <p><p>Parameters of the atmosphere</p></p> <p>Question</p> <p>The atmosphere signal increases with altitude conversely to atmosphere density? Why?</p> <p>Question</p> <p>The waveform is \"better\" if \\(N_{random} = 20\\) (see the image a. below) instead of 1 (see the image a. below). Why?</p> <p><p>Lidar waveform.</p></p>"},{"location":"Tutorials/T8/t8.html#3-urban-scene-wp8c","title":"3) Urban scene: WP8C","text":"<p>Objective: waveform in presence of two horizontal surfaces at two different altitudes.</p> <p><p>Parameters for WP8C.</p></p> <p><p>Simulated scene: house and ground. a) 2D view. c) 3D view.</p></p> <p>Run DART and display the waveform</p> <p>In the image below, the 1D waveform (a, b) has 1 peak for the ground and 1 peak for the horizontal roof, with 17ns (i.e., 2.5 m distance) between the 2 peaks, and the 3D graphs display scattered energy:</p> <ul> <li>per scatterer: per actual (d) and per perceived (e) location of the last scatterer. Each vertical bar of (f) represents \"Total measured energy * \\(10^{-3}\\)\". The distance between the extreme bars gives the normalized energy range per scattering event in terms of actual photons. Its height is the associated number of scattering events (i.e., number of DART photons) in the simulation. The cursor cn be moved to hite least energetic photons in the 3D displays.</li> <li>per volume (i.e., scene cell): per actual (g) and per perceived (h) location of cell. The histogram horizontal axis (i) shows the energy scattered per cell. The vertical axis shows the number of cells that scatter a given energy per cell.</li> </ul> <p><p>a) 1D raw/ convolved waveform. b) 1D raw waveform (<code>lidar_dart_wave.txt</code>): bin number, time (ns) and number of photons. c) Data per measured photon (file phtonInformations.binary) are shown per scattering event (d,e,f) or cell volume (g,h,i), either per exact (d,g) or apparent (e,h) location of last scattering; a cursor manages the display of least energetic scatterers in 3D graphs (f, i).</p></p> <p>Display LiDAR images with \"View/ Images\"</p> <p>For a single pulse, the signal of usual LiDAR systems is a 1D data array (e.g., waveform). DART can display it as images (see below) in terms of number of photons / pixel in order to help in understanding simulation results.</p> <ul> <li>3 images in LiDAR reference (plane perpendicular to view direction). a) LiDAR emitted pulse at BOA level. c) Photons backscattered along LiDAR direction at BOA level. d) LiDAR reflectance image. It gives the reflectance of scene elements. This image can be useful for testing the accuracy of LiDAR simulations.</li> <li>1 image in scene reference (PhotonReachedGround_MaketFrame): photons that reached the ground b).</li> </ul> <p>Question</p> <p>Ground scatters more photons than the horizontal roof: \\(N_{ground}^{\\uparrow} \\approx 4.787\\times 10^5\\), \\(N_{roof}^{\\uparrow} \\approx 2.637 \\times10^5\\). Why?</p> <p><p>LiDAR images.</p></p>"},{"location":"Tutorials/T8/t8.html#4-topography-wp8d","title":"4) Topography: WP8D","text":"<p>Objective: variation of the LiDAR waveform with the slope of a 40m x 40m bare ground plane surface.</p> <p>Create 6 slopes (0\u00b0, 5\u00b0, 10\u00b0, 30\u00b0, 45\u00b0, 60\u00b0): use \"DEMGenerator\" (see the image b. below) and parameters in (see the image a. below).</p> <p><p>a) Parameters for creating 6 DEMs. b) Menu with parameters for the 60\u00b0 slope.</p></p> <p>Run the 6 simulations with the 6 DEMs and display the resulting waveforms (see below).</p> <p>Question</p> <p>Verify that the peaks of the waveforms correspond to the DEM mean altitudes.</p> <p>Question</p> <p>Why waveforms with slopes &lt; 45\u00b0 have discontinuous shapes?</p> <p><p>Lidar waveform of a slope with 6 angles: 0\u00b0, 5\u00b0, 10\u00b0, 30\u00b0, 45\u00b0 and 60\u00b0.</p></p>"},{"location":"Tutorials/T8/t8.html#5-homogeneous-turbid-vegetation-scene-wp8e","title":"5) Homogeneous turbid vegetation scene: WP8E","text":"<p>Objective: LiDAR waveform of a 5m thick turbid vegetation layer (LAI = 5) over an horizontal ground (Fsee below).</p> <p><p>DART parameters for WP8E.</p></p> <p><p>Vegetation plot over a horizontal bare ground.</p></p> <p>Question</p> <p>The waveform (see below) has 2 peaks. Why?</p> <p>Question</p> <p>Apparent scatterer location:     - there are scatterers 'below' the ground, but no above the plot. Why?     - the waveform is nearly 100% 1st order at its upper part. Why?</p> <p><p>a) 1st order and total waveforms, convolved and not convolved. b) 3D display of last scattering location.</p></p> <p>Schematic inversion of 1st order lidar signal in terms of LAI and \\(r_{ground}\\)</p> <p>Let a vegetation plot with LAI = LAI plot and ground reflectance \u03c1ground. The file <code>stat_illumination_MC0.txt</code> (<code>Photons_Order1.xls</code>) gives the number \\(N_{phot,scene,in}\\) of incident photons in the footprint, and the numbers \\(N_{phot,ground,mes,1}\\) and \\(N_{phot,plot,mes,1}\\) of ground and plot 1st order photons measured by the LiDAR, respectively. Here, there is no atmosphere. The Lidar is at nadir \\((\u03b8=0\u00b0)\\), at an altitude H=800km with an area \\(A=1m^2\\). It is viewed from the ground with the solid angle \\(\\Delta \\Omega_{lidar}=\\frac {A} {H^2}.cos^3(\\theta_{lidar})\\).</p> <p>Ground: \\(N_{phot,ground,mes,1} = N_{phot,scene,in}.e^{- G(\\Omega_s).LAI_{plot}}.\\frac {\\rho_{ground}} {\\pi}.\\Delta \\Omega_{lidar}\\) with \\(G(\\Omega_s) = \\frac {total\\:leaf\\:area\\:along\\:direction\\:\\Omega_s} {total\\:leaf\\:area}\\). For a spherical LAD: \\(G(\\Omega_s)=0.5\\).</p> <p>Plot: \\(N_{phot,ground,mes,1} = N_{phot,scene,in}.(1 - e^{- G(\\Omega_s).LAI_{plot}}).\\frac {T(\\Omega_s, \\Omega_v)} {\\Delta \\Omega_{dart}}.\\Delta \\Omega_{lidar}\\). Here: \\(\\frac {T(\\Omega_s, \\Omega_v)} {\\Delta \\Omega_{dart}} \\approx 5.14\\times10^{-2}\\). with \\(T(\\Omega_s, \\Omega_v)=\\) leaf transfer function (lib_phase/0.grass_rye_ScatteringFunction) for incident direction \\(\\Omega_s=\\Omega_{lidar}\\) to discrete direction (\\(\\Omega_v, \\Delta \\Omega_{dart}\\)) that comprises the LiDAR direction (\\(\\Omega_{lidar},\\Delta \\Omega_{lidar})\\)\". Here: \\(\\theta_{lidar}=\\theta_v=0\\).</p> <p>\\(\\implies LAI_{plot}= - \\frac {1} {G(\\Omega_s)}.ln(1- \\frac {N_{phot,plot,mes,1}.\\Delta \\Omega_{dart}} {N_{phot,scene,in}.T(\\Omega_s, \\Omega_v).\\Delta \\Omega_{lidar}})\\) and \\(\\rho_{ground}=\\frac {\\pi} {\\Delta \\Omega_{lidar}}.\\frac {N_{phot,ground,mes,1}} {N_{phot,scene,in}}.\\frac {1} {e^{-G(\\Omega_s).LAI_{plot}}}\\).</p> <p>Here: </p> <ul> <li><code>stat_illumination_MC0.txt</code>: \\(N_{phot,scene,in}=7.8\\times10^{15}, N_{phot,ground,mes,1}=77.42\\) (theory 77.3), \\(N_{phot,plot,mes,1} = 571.47\\) (theory: 574.09)</li> <li>\\(r_{ground}=0.243, T(\\Omega_s, \\Omega_v)=0.00648, \\Delta \\Omega_{dart}=0.1263, \\Delta \\Omega_{lidar}=1.56\\times10^{-12}\\).</li> </ul> <p>This schematic inversion gives: \\(LAI_{plot} = 4.896\\) and \\(r_{ground} = 0.243\\). Here, its use with \\(1^{st}\\) and multiple order photons (i.e., actual LiDAR) does not work. It is less accurate, because actual LiDARs contain multiple order. Here, there is no solution with all scattering order photons. A possible solution is to consider the shape of the waveform with \\(\\omega_{leaf}\\) being an unknown.</p>"},{"location":"Tutorials/T8/t8.html#6-3d-vegetation-wp8f","title":"6) 3D vegetation: WP8F","text":"<p>Objective: waveform of \"3D cherry tree + plane ground\" is simulated with the tree crown simulated as a set of facets (see the image a. below), then as a set of turbid cells derived from the crown simulated with facets (see the image d. below).</p> <p><p>DART parameters for WP8F. The leaves and trunk of the tree are triangles.</p></p> <p>For the facet- and turbid-trees, the images below show the cloud of last scattering points (b,e), and the corresponding 3D (c,f) / 1D (g,h) waveforms and 2 Lidar FOV images: \"ground incident photons\" in scene reference (i.e., ellipse) and \"BOA LiDAR signal\" in Lidar reference (i.e., disk). The closeness of facet- and turbid-derived results illustrates the interest of the transformation 'facet \\(\\rightarrow\\) turbid'. Its use is advided or not depending on.</p> <p><p>For the fact- and turbid- tree: 3D exact (b,e) and apparent (c,f) positions of last scatterers, 1st/total scattering order waveform (g,h), and LiDAR images.</p></p>"},{"location":"Tutorials/T8/t8.html#7-3d-triangle-tree-atmosphere-wp8g","title":"7) 3D triangle tree + Atmosphere: WP8G","text":"<p>Objective: waveform with atmosphere (Aerosol: Rural V=5km; Gas: Mid-Latitude summer) above and in the Earth scene (see below).</p> <p><p>a) Earth scene. Top view (b) and front view (c) of apparent location of last scattering events. d) Waveform.</p></p>"},{"location":"Tutorials/T8/t8.html#8-multi-pulse-als-acquisition-wp8h","title":"8) Multi-pulse ALS acquisition: WP8H","text":"<p>Objective: Lidar scanner acquisition for the scene {bare ground, 3D triangle tree, no atmosphere}.</p> <p>The image below shows the ALS scan grid and the input parameters in order to simulate it:</p> <ul> <li>Swath begin and end positions (x, y) on the ground.</li> <li>Azimuth angle (squint angle): if sensor scan direction is not perpendicular to the flight direction.</li> <li>Control Point (CP): position (x, y) on the ground and look angle at CP.</li> <li>Grid: azimuth separation (meter) and range separation (rad or meter) of the acquisition grid.</li> <li>\"Multithread\" option. Indeed, pulse information is specific per pulse.</li> </ul> <p><p>Menu for creating an ALS scanner acquisition.</p></p> <p>The image below shows the 3D multi-pulse \"convolved waveform\" (b) and its individual components (a).</p> <p><p>\"Lidar Multi-pulse\" graph. a) Selection menu. Node (17, 16) is selected. b) Waveform of node (17,16). c) 3D convolved waveform for each Lidar pulse. Blue color is for lower energy levels.</p></p>"},{"location":"Tutorials/T8/t8.html#9-multi-pulse-tls-acquisition-wp8i","title":"9) Multi-pulse TLS acquisition: WP8I","text":"<p>Objective: TLS simulation of same scene as WP8H.</p> <p>Warning</p> <p>The volume to store (file <code>LIDAR_IMAGE_FILE.binary</code>) depends on TLS range and angular resolutions. It can be huge</p> <p><p>TLS simulation. Direction \\((\\theta=110\u00b0,\\phi=180\u00b0)\\) is from target to TLS. a) Menus. b) TLS 3D view.</p></p>"},{"location":"Tutorials/T8/t8.html#10-single-pulse-lidar-waveform-with-solar-noise-wp8j","title":"10) Single-pulse Lidar waveform with solar noise: WP8J","text":"<p>Objective: LiDAR signal with solar noise for a scene with 10 cherry trees and 1 classic building (see below).</p> <p><p>DART parameters for WP8J.</p></p> <p>Solar noise is computed by simulating the radiance of the LiDAR ground FOV due to the reflectance of sun radiation. It adds a constant number of photons to the LiDAR signal. Here, it is very small. It would be higher with a smaller sun zenith angle. Also, its relative importance would be larger with a smaller Lidar pulse energy.</p> <ul> <li>DART-FT simulation of solar time is slow compared to LiDAR simulation. It is greatly faster with DART-Lux.</li> </ul> <p><p>a) 3D scene; b) LiDAR waveform with solar signal; c) Solar noise reflectance of total scene; d) LiDAR footprint in (c). e) Lidar (photons) BOA image without sun. f) Lidar (photons) BOA image with sun.</p></p>"},{"location":"Tutorials/T8/t8.html#11-lidar-discrete-return-point-cloud-wp8k","title":"11) Lidar discrete return (point cloud): WP8K","text":"<p>Objective: ALS point cloud simulation of same scene as WP8J.</p> <p>DART-RC and DART-Lux LiDAR simulate waveforms and transform them into point cloud that they store to file <code>DetectedPoints.txt</code>. Two transformation methods are available: i) DART external process (script <code>DART2LAS.py</code> based on laspy library); ii) DART internal processing.</p> <p>!!question     Why are there very few points returned from the ground under the trees?</p> <p>Question</p> <p>Why are there holes in the top view of point cloud? What factor affects the area of holes?</p> <p>Question</p> <p>Why are the apparent reflectance of two roofs different? What factor affects the apparent reflectance?</p> <p><p>ALS 3D point cloud. a) Menus. b) CloudCompare display: color by intensity value (apparent reflectance).</p></p>"},{"location":"Tutorials/T8/t8.html#12-lidar-photon-counting-with-atmosphere-and-solar-noise-wp8l","title":"12) Lidar photon counting with atmosphere and solar noise: WP8L","text":"<p>Objective: ALS photon counting simulation of MABEL instrument. Same scene as WP8J, with sun and atmosphere.</p> <p>Photon count (i.e., file <code>DetectedPoints.txt</code>) is internally simulated by DART or computed by applying the DART python script \"photoncounting.py\" to the DART simulated waveform binary file. Solar noise is computed with the \"Pushbroom\" option or \"Camera\" option (a solar noise image is computed per LiDAR node \\(\\implies\\) very time consuming).</p> <ul> <li>Solar noise is present in the entire vertical space. Why?</li> <li>Which factors do influence the density of solar photons?</li> </ul> <p><p>ALS photon counting. a) Menus. b) 3D photon points in vertical ranges [-1000m 3000m] and [-5m 20m].</p></p>"},{"location":"Tutorials/T8/t8.html#13-high-efficiency-lidar-simulation-wp8m","title":"13) High-efficiency Lidar simulation: WP8M","text":"<p>Objective: relative efficiency of DART-Lux LiDAR and DART-RC to simulate single-pulse waveforms (see below).</p> <p>First, the consistency of DART-Lux LiDAR and DART-RC is verified using a large number of photons: for \\(N_{phot}=10^8\\), their waveforms are nearly equal (\\(R^2=1\\), rRMSE=0.01; see the image b. below). Using them as a reference, DART-Lux LiDAR and DART-RC are run with increasing \\(N_{phot}\\): their resulting waveforms gradually converge to the reference (see the image c. below). However, for a same \\(N_{phot}\\), the DART-Lux waveform is closer to the reference (see the image d. below). For example, for \\(N_{phot}=10^3\\): \\(R^2=0.991\\) and rRMSE=0.17 for DART-RC, whereas \\(R^2=0.995\\) and rRMSE=0.1 for DART-Lux.</p> <p>Question</p> <p>Why does the waveform gradually converges if the photon number increases?</p> <p>Question</p> <p>Why is DART-Lux LiDAR mode more accurate than DART-RC with the same photon number?</p> <p><p>a) Scene and LiDAR footprint and FOV. b) DART-Lux and DART-RC waveforms (Nphot=108). b) DART-Lux waveforms with various \\(N_{phot}\\). c) DART-Lux and DART-RC \\((N_{phot}=10^3)\\) with reference waveform.</p></p> <p>Lidar photon counting with atmosphere and solar noise</p> <p>Photon counting can be simulated by applying a python script to DART simulated waveforms. Photon counting devices tend to have much smaller bin lengths (e.g., 0.1 ns) and higher pulse repetition frequencies that waveform LiDARs (bin length: 1-10ns; 20 points / \\(m^2\\)). The provided python script has solar noise option. It processes waveforms to assess the probability to measure photons. Then, random pulling is used to state if a photon is detected in a given bin. If it is detected, its 3D position is stored. Then, 3D plotting gives the photon counting LiDAR beam.</p> <p>For a sensor with quantum efficiency = 0.015, detector dead time = 2.5ns and dark count rate = 100 kHz: <code>python photoncounting.py LIDAR_IMAGE_FILE.binary photons.txt 0.015 2.5 100</code></p> <p><p>Lidar multi-pulse acquisition for the St Sernin district of Toulouse (France). a) Toulouse geometric database. b) DART-FT reflectance image. c) Multi-pulse Lidar image (800 x 520m). 560nm. \\(10\\mu J\\). Footprint diameter: 50cm. Sensor area: \\(0.15m^2\\). Sensor height: 1km. Acquisition rate: 1ns. Resolution: 0.25x0.25m (16 points / \\(m^2\\)). Platform azimuth: 0\u00b0. Look angle at swath center: 0\u00b0. \\(6.656\\times 10^6\\) Lidar pulses (\\(10^3\\) photons/pulse). Lidar images process with SPDlib software.</p></p>"},{"location":"Tutorials/T9/t9.html","title":"WP9 - Airborne and in-situ sensors","text":"<p>Objective: to simulate sensors (camera, push-broom) with a non null field of view (FOV). For DART-FT, pushbrooms and frame cameras are above the Earth scene, and pinhole and spherical cameras are in the Earth scene. DART-Lux \"pinhole camera\" simulates cameras outside and inside the Earth scene.</p>"},{"location":"Tutorials/T9/t9.html#1-pinhole-and-spherical-camera-with-horizontal-bare-ground-wp9a","title":"1) Pinhole and spherical camera with horizontal bare ground: WP9A","text":"<p>Objective: to introduce DART-FT cameras for the case of a simple horizontal bare ground.</p> <p>Scene: 40x40m. \\(\\Delta x=\\Delta z=0.5m\\). \\(\\rho_{ground}=0.5\\). \\(\\theta_s=30\u00b0, \\phi_s=225\u00b0\\). Mode \"Infinite slope\". Small transparent (\\(t_{dir}=1\\)) facet (isocele triangle: 0.02m x 0.01m) at \\(z_{facet}=30m\\) (this altitude allows one to use a DART-FT within scene camera).</p> <p>Cameras:</p> <ul> <li> <p>frame camera (above scene): x=y=20m, z=40m, vertical downward looking:  \\(\\theta = 0\u00b0\\)</p> </li> <li> <p>spherical (radius: 0.1m, \\(\\theta_{FOV,max}\\) : 90 \\(\\implies\\) view of hemisphere) and pinhole (sensor: 0.54x0.54m, focal: 0.1m) cameras: \\(z_{cam}=15m &lt; z_{facet}\\), 1000 x 1000 pixels, Rep=0 &amp; 10 scene repetitions (\\(\\theta_{max} =53\u00b0\\) &amp; \\(88\u00b0\\)), upward (\\(_theta_{cam}=0\u00b0 \\implies\\) image Camera_xx_VZ=180_VA=0) and downward (\\(\\theta_{cam}=180\u00b0\\)) vertical looking. Camera image coordinates (i,j) and viewing angles \\((\\theta_v,\\phi_v)\\) are linked by equations. \\(\\rho_{camera}(i,j) = \\frac {\\pi \\times L_{camera}(i,j)} {BOA\\:irradiance}\\)</p> </li> </ul> <p>DART-FT sun / atmosphere illumination of pixel j of an upward looking camera is simulated with rays from mesh elements i the BOA plane (witthout \"penumbra\" option: sun surface radiance is spatially constant and isotropic):</p> <ul> <li>Sun solid angle subtended: \\(\\Delta \\Omega_{sun} = \\frac {\\pi.R_{sun}^2} {l_{sun-camera}^2}\\) from the camera and \\(\\Delta \\Omega_{sun,i} \\approx \\frac {\\pi.R_{sun}^2} {l_{sun-BOA}^2} \\approx 6.8 \\times 10^{-5}\\) sr from BOA. \\(l=distance\\).</li> <li>BOA direct sun energy that is measured: \\(\\sum_{i=1}^{I} \\chi_{ij}.L_{sun,BOA,i}(\\Omega_i).\\Delta \\Omega_{sun,i}.\\Delta P_i.cos(\\theta_i)\\) with \\(L_{sun,BOA,i}(\\Omega_i) = \\frac {E_{sun,BOA}} {cos(\\theta_i).\\Delta \\Omega_{sun,i}}\\) with \\(\\Delta P_i = D^2 =\\) area of DART-FT BOA illumination mesh element i that the camera pixel j sees within \\(\\Delta \\Omega_{sun}\\).<ul> <li>\\(I.D^2 =\\) sun projection on BOA = \\(\\Delta \\Omega_{sun}.l_{BOA-camera}^2\\).</li> <li>\\(\\chi_{ij}\\) = direct transmittance \"\\(\\Delta P_i\\) - camera pixel j\" along \\((\\Omega_{sun,i}, \\Delta \\Omega_{sun,i}\\)).</li> </ul> </li> <li>Atmosphere radiance \\(L_{atm,BOA,i}(\\Omega_i)\\) is the result of the interpolation on atmosphere radiance in DART discrete directions neighbor of \\(\\Omega_i\\). For an isotropic atmosphere: \\(L_{atm,BOA,i}= \\frac {E_{atm,BOA}} {\\pi}\\)</li> </ul> <p>Camera radiance images and dart.txt values are consistent. The screenshots below show images of upward / downward looking pinhole and spherical cameras. Here, the option \"Penumbra\" is not set. Therefore, the upward looking camera only measures atmosphere radiation. Although this camera does not see the sun, the propagation of sun radiation is simulated: the downward looking camera sees the correct upward radiation whatever the option \"Penumbra\".</p> <p><p>Spherical (top) and pinhole (bottom) camera images (1000 x 1000). Downward (left) / upward (right) looking directions. Option \"Penumbra\" is not set. Scene repetition is Rep = 0 and 10.</p></p> <ul> <li> <p>dart.txt:</p> <ul> <li>\\(E_{BOA} =1346.52 W/m^2/\\mu m\\) (\\(\\implies \\overline{L}^{\\downarrow}=428.61 W/m^2/sr/\\mu m\\)),</li> <li>\\(E_{sun,BOA}=950.87 W/m^2/\\mu m (\\implies L_{sun,BOA} \\approx 1.615 \\times10^7 W/m^2/sr/\\mu m)\\)</li> <li>\\(E_{atm,BOA}=395.64 W/m^2/\\mu m \\implies L_{atm}=125.94 W/m^2/sr/\\mu m\\)</li> <li>\\(M_{ground}=673.24 W/m^2/\\mu m (\\rho_{ground}=0.5) \\implies L_{ground}=214.3 W/m^2/sr/\\mu m\\)</li> </ul> </li> <li> <p>Simulation</p> <ul> <li>No penumbra: \\(E_{spherical}^{\\downarrow}\\) (Rep=0 / 10) = \\(394 / 395.64\\) \\(W/m^2/\\mu m \\approx E_{atm,BOA} \\implies \\overline{L}_{spherical}^{\\downarrow} = L_{atm}\\)</li> </ul> </li> <li> <p>Properties.txt</p> <ul> <li>Penumbra: \\(E_{spherical}^{\\downarrow}\\)(Rep=0 / 10) = \\(1671.7 / 1500.1\\) \\(W/m^2/\\mu m\\) (in <code>simulation.properties.txt</code> &gt; \\(E_{BOA}\\)</li> <li>Penumbra or not: \\(E_{spherical}^{\\uparrow}\\) (Rep=0 / 10) = \\(671.25 / 673.26\\) \\(W/m^2/\\mu m \\approx M_{ground} \\implies L_{spherical}^{\\uparrow} \\approx L_{ground}\\)</li> </ul> </li> <li> <p>Upward camera images:</p> <ul> <li>\\(L_{spherical,atm}^{\\downarrow} = L_{pinhole,atm}^{\\downarrow}\\) (Rep=0 / 10) = \\(125.94 / 125.94\\) \\(W/m^2/sr/\\mu m\\)</li> <li>No penumbra: \\(L_{spherical,sun}^{\\downarrow} = L_{pinhole,sun}^{\\downarrow}\\) (Rep=0 / 10) = \\(0\\) \\(W/m^2/sr/\\mu m\\)</li> <li>With penumbra: Max [\\(L_{spherical,sun}^{\\downarrow}\\) ] + \\(L_{atm} (Rep=0 / 10) = 3.86 \\times10^7 / 3.86\\times 10^7 W/m^2/sr/\\mu m\\)</li> <li>With penumbra: Max [\\(L_{pinhole,sun}^{\\downarrow}\\)] + \\(L_{atm} (Rep=0 / 10) = 3.82 \\times10^7 / 3.82\\times 10^7 W/m^2/sr/\\mu m\\)</li> </ul> </li> <li> <p>Downward camera images: \\(L_{spherical}^{\\uparrow} = L_{pinhole}^{\\uparrow} (Rep=0 / 10) = 214.3 / 214.3 W/m^2/sr/\\mu m \\implies M_{ground}=673.24 W/m^2/\\mu m\\)</p> </li> </ul>"},{"location":"Tutorials/T9/t9.html#2-pinhole-and-spherical-camera-with-a-3d-scene-element-wp9b-copy-of-wp9a","title":"2) Pinhole and spherical camera with a 3D scene element: WP9B (copy of WP9A)","text":"<p>Objective: to introduce the DART cameras with a simple 3D scene element over horizontal bare ground.</p> <p>Scene: 40mx40m. \\(\\Delta x=\\Delta z=0.5m\\). House: h=30m, \\(\\rho_{ground}=\\rho_{wall}=0.5\\), \\(\\rho_{roof}=1.\\) \\(\\theta_s=30\u00b0, \\phi_s=225\u00b0\\). Mode \"Infinite slope\".</p> <p>The images below show the nadir satellite image, the image of a downlooking camera at 40m altitude, and the images of the cameras defined in WP9A. It illustrates that \\(\\rho_{camera}(\\Omega_v)=\\rho_{satellite}(\\Omega_v)\\); for example, \"Central pixel of the downward spherical camera image\" = \"Mean satellite nadir image\". In the upward image: \\(\\overline{\\rho}_{center} = \\frac {\\pi.L_{nadir}(0\u00b0)} {E_{BOA}}=SKYL\\).</p> <p><p>DART spherical camera. a) House (h=30m) in a 40mx40m scene. \\(\\rho_{ground}=\\rho_{wall}=0.5, \\rho_{roof}=1\\). b) DART-FT reflectance nadir satellite image and downward nadir frame camera (h=40m). c) DART-FT downward/upward pinhole and spherical cameras (h=15m). Rep=0 and 10 scene repetitions. CT=220s. d) DART-Lux downwar looking pinhole camera image (same as in c). Rep=10. CT=20s.</p></p> <p><p>Pin hole camera image of a flat surface with a house. The camera is at 4 different altitudes (vey low to high). The camera is located at different altitudes on the red vertical axis.</p></p> <p><p>Top: camera image (\\(\\theta_s = 50\u00b0\\), \\(z_s = 140m\\)). Bottom: orthographic projection image \\((\\theta_s = 50\u00b0, z_s = \\propto\\))</p></p> <p></p>"}]}